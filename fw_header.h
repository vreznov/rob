#ifndef FW_HEADER_H
#define FW_HEADER_H


/*
    Axis define
*/
/* machine information for FS30i/31i/32i */
#define HSSB_LIB
#define FS30D

#if defined (F22_TYPEB)
#define MAX_AXIS        96
#define MAX_SPINDLE     24
#elif defined (F22_TYPEA)
#define MAX_AXIS        72
#define MAX_SPINDLE     14
#elif defined (F22_TYPE5)
#define MAX_AXIS        48
#define MAX_SPINDLE     16
#else
#define MAX_AXIS        32
#define MAX_SPINDLE     8
#endif

#if defined(F22_TYPEA)
#define MAX_CNCPATH     15
#else
#define MAX_CNCPATH     10
#endif

#if defined(F22_TYPEA) || defined(F22_TYPEB)
#define MAX_IFSB_LINE   4
#else
#define MAX_IFSB_LINE   3
#endif

#if !defined (MAX_AXIS)
#if defined (F22_TYPEB) || !defined(CNC_PPC)
#define MAX_AXIS        96
#elif defined (F22_TYPEA)
#define MAX_AXIS        72
#elif defined (F22_TYPE5)
#define MAX_AXIS        48
#else
#define MAX_AXIS        32
#endif
#endif
#if !defined (MAX_SPINDLE)
#if defined (F22_TYPEB) || !defined(CNC_PPC)
#define MAX_SPINDLE     24
#elif defined (F22_TYPEA)
#define MAX_SPINDLE     14
#elif defined (F22_TYPE5)
#define MAX_SPINDLE     16
#else
#define MAX_SPINDLE      8
#endif
#endif

#define MAX_AXISNAME    4

#define ALL_AXES        (-1)
#define ALL_SPINDLES    (-1)

#if !defined (MAX_IFSB_LINE)
//#if defined(F22_TYPEA) || defined(F22_TYPEB) || !defined(CNC_PPC)
#if defined(F22_TYPEA) || defined(F22_TYPEB)
#define MAX_IFSB_LINE   4   /* Maximum line number */
#else
#define MAX_IFSB_LINE   3   /* Maximum line number */
#endif
#endif

#if !defined (MAX_CNCPATH)
#if defined(F22_TYPEA) || !defined(CNC_PPC)
#define MAX_CNCPATH     15
#else
#define MAX_CNCPATH     10
#endif
#endif

/*
    Program lock define
*/
#define MAX_LOCK_PROG   12              /* Program lock max num */

/*
    Error Codes
*/
#define EW_PROTOCOL     (-17)           /* protocol error */
#define EW_SOCKET       (-16)           /* Windows socket error */
#define EW_NODLL        (-15)           /* DLL not exist error */
#define	EW_INIERR       (-14)           /* error in APi library inital valiefile */
#define	EW_ITLOW        (-13)           /* low temperature alarm of intelligent terminal */
#define	EW_ITHIGHT      (-12)           /* hight temperature alarm of intelligent terminal */
#define EW_BUS          (-11)           /* bus error */
#define EW_SYSTEM2      (-10)           /* system error */
#define EW_HSSB         (-9)            /* hssb communication error */
#define EW_HANDLE       (-8)            /* Windows library handle error */
#define EW_VERSION      (-7)            /* CNC/PMC version missmatch */
#define EW_UNEXP        (-6)            /* abnormal error */
#define EW_SYSTEM       (-5)            /* system error */
#define EW_PARITY       (-4)            /* shared RAM parity error */
#define EW_MMCSYS       (-3)            /* emm386 or mmcsys install error */
#define EW_RESET        (-2)            /* reset or stop occured error */
#define EW_BUSY         (-1)            /* busy error */
#define EW_OK           0               /* no problem */
#define EW_FUNC         1               /* command prepare error */
#define EW_NOPMC        1               /* pmc not exist */
#define EW_LENGTH       2               /* data block length error */
#define EW_NUMBER       3               /* data number error */
#define EW_RANGE        3               /* address range error */
#define EW_ATTRIB       4               /* data attribute error */
#define EW_TYPE         4               /* data type error */
#define EW_DATA         5               /* data error */
#define EW_NOOPT        6               /* no option error */
#define EW_PROT         7               /* write protect error */
#define EW_OVRFLOW      8               /* memory overflow error */
#define EW_PARAM        9               /* cnc parameter not correct error */
#define EW_BUFFER       10              /* buffer error */
#define EW_PATH         11              /* path error */
#define EW_MODE         12              /* cnc mode error */
#define EW_REJECT       13              /* execution rejected error */
#define EW_DTSRVR       14              /* data server error */
#define EW_ALARM        15              /* alarm has been occurred */
#define EW_STOP         16              /* CNC is not running */
#define EW_PASSWD       17              /* protection data error */
#define EW_PMC          18              /* error generated by PMC */
#define EW_PMCHANDLE    19              /* PMC handle error */
#define EW_RD_OVWSTP    20              /* overwrite stop in program read  */
#define EW_RD_RSTFIN    21              /* reset interrupt in program read  */

/*
   Result codes of DNC operation
*/
#define DNC_NORMAL	(-1)		/* normal completed */
#define DNC_CANCEL	(-32768)	/* DNC operation was canceled by CNC */
#define DNC_OPENERR	(-514)		/* file open error */
#define DNC_NOFILE	(-516)		/* file not found */
#define DNC_READERR	(-517)		/* read error */

/*
   Option name for cnc_getlibopt / cnc_setlibopt
*/
#define LIB_MODE          0
#define MOVE_RDPRGPTR     1
#define PRM_ALLPATH       2
#define UPLOAD_M02M99     3
#define MSG_NOCTRL        4
#define DIAM_RAD_SWITCH   5
#define MSG_CONV          6
#define ASYNC_READ_PROG3  7

#define UP_DNLOAD_EDT     8
#define PROG_WORD_SRCH    9
#define ONUM_ZERO_SUP    10
#define LONG_ISE_FIG     11
#define INT_CHK_UNIT     12
#define HZR_PRM_WR_SKIP  13
#define SLVSRAM_ACCESS   14
#define GET_SMTCP_STAT   15
#define TLIFE_OPTION     16
#define SVGD_MATE_PUNCH  17
#define READ_FLD_ON      18
#define DELETE_RECURSIVE 19
#define READ_ORIG_OPT    20
#define SVGD_MATE_ORIGIN 21
#define PUN_SFZN_MDP     22
#define PAXIS_PATH       23
#define AXDATA_G198      24
#define BG_EDIT_SIGNAL   25
#define UPLOAD_BG        26
#define TDATA_EXTRACT    27
#define PROG_CHECK_CMNT  28
#define INITIAL_AX_CONFIG 29
#define MGI_SPECIFICATION 30
#define EFFECTIVE_COND   31
#define LEVEL8_PROTECT   32
#define ACTPT_M198       33
#define SYSINFO_AXIS     34
#define ALARM_INFO_TYPE  35
#define PROG_LEDT_SPUP   36
#define OPMSG_STATUS     37
#define ASYNC_SEARCHWORD 38
#define MA_OPT           39
#define ENABLE_FOCAS_DMA 40
#define DSHOST_RD_SRCH   41
#define BG_EDIT_CONTINUE 42
#define BG_EDIT_GRAPH    43
#define SEARCHWORD_PNTR  44
#define PROG_UPLD_PROT   45
#define PGLOCK_TYPE      64
#define TLIFE_TOOL0     128
#define OPPROG_DSP      256
#define OPPROG_MODE     512
#define PROGRAM_CHECK  1024
#define CZPP_NEDPP     2048
#define MULTI_PATH_MIX_AXIS_NAME    4096

/*
   Work-piece setting
*/
#define WSETER_GRP		8
#define WSETER_DATA		8

/*
   3D interference check
*/
#define MAX_POS_BUF		2

/* cnc_rdtlgeomsize:read tool geom size data */
#define TLGS_EMP  0x7FFFFFFF

/*
    cnc_data_copy
*/
#define DC_PRM          1   /* parameter          */
#define DC_OFS          2   /* offset             */
#define DC_WKZ          3   /* work zero offset   */
#define DC_MAC          4   /* macro value        */
#define DC_PCD          5   /* P-CODE macro value */
#define DC_RTM          6   /* RTM value          */


/*--------------------*/
/*                    */
/* Structure Template */
/*                    */
/*--------------------*/
/*-------------------------------------*/
/* CNC: Control axis / spindle related */
/*-------------------------------------*/

/* cnc_actf:read actual axis feedrate(F) */
/* cnc_acts:read actual spindle speed(S) */
typedef struct odbact {
    short   dummy[2] ;  /* dummy */
    long    data ;      /* actual feed / actual spindle */
} ODBACT ;

/* cnc_acts2:read actual spindle speed(S) */
/* (All or specified ) */
typedef struct odbact2 {
     short	datano;		/* spindle number */
     short	type;		/* dummy */
     long	data[MAX_SPINDLE];	/* spindle data */
} ODBACT2 ;

/* cnc_absolute:read absolute axis position */
/* cnc_machine:read machine axis position */
/* cnc_machine2:read machine axis position(2) */
/* cnc_relative:read relative axis position */
/* cnc_distance:read distance to go */
/* cnc_skip:read skip position */
/* cnc_srvdelay:read servo delay value */
/* cnc_accdecdly:read acceleration/deceleration delay value */
/* cnc_absolute2:read absolute axis position 2 */
/* cnc_relative2:read relative axis position 2 */
/* cnc_absolute_bg:read absolute axis position (BG) */
/* cnc_relative_bg:read relative axis position (BG) */
/* cnc_machine_bg:read machine axis position (BG) */
typedef struct odbaxis {
    short   dummy ;             /* dummy */
    short   type ;              /* axis number */
    long    data[MAX_AXIS] ;    /* data value */
} ODBAXIS ;
typedef struct odbaxis_ex {
    short   counter ;           /* counter */
    short   type ;              /* axis number */
    long    data[MAX_AXIS] ;    /* data value */
} ODBAXIS_EX ;

/*-------------------------------------*/
/* IS-E long stroke type               */
/*-------------------------------------*/

typedef struct realdata {
    double val;                  /* data value    */
    long   dec;                  /* decimal point */
    long   dummy;
} REALDATA;

/* cnc_prstwkcd64:preset work coordinate */
typedef struct idbwra64 {
    short       datano;         /* dummy */
    short       type;           /* axis number */
    short       dummy[2];       /* dummy2 */
    REALDATA    data[MAX_AXIS]; /* preset data */
} IDBWRA64;

/* cnc_wrrelpos64:set origin / preset relative axis position */
typedef struct idbwrr64 {
    short       datano;         /* dummy */
    short       type;           /* axis number */
    short       dummy[2];       /* dummy2 */
    REALDATA    data[MAX_AXIS]; /* preset data */
} IDBWRR64;

/* cnc_rdcommand64: read command value */
typedef struct odbcmd64 {
    char        adrs;           /* command address */
    char        num;            /* M-Code / axis num */
    short       flag;           /* add info */
    long        dec_val;        /* decimal point */
    double      cmd_val;        /* command data  */
} ODBCMD64;

/* cnc_zofs_rnge64:read validity of work zero offset */
/* cnc_wksft_rnge64:read validity of work shift value */
typedef struct odbdatrng64 {
    double      data_min;       /* lower limit */
    double      data_max;       /* upper limit */
    long        dec;            /* decimal point */
    long        status;         /* status of setting */
} ODBDATRNG64;

/* cnc_rdzofsr64:read work zero offset value(area specified) */
typedef struct iodbzor64 {
    short       datano_s;           /* start offset number */
    short       type;               /* axis number */
    short       datano_e;           /* end offset number */
    short       dummy;              /* dummy */
    REALDATA    data[MAX_AXIS*8];   /* offset value */
} IODBZOR64; /* In case that the number of axes is MAX_AXIS, the number of data is 7 */

/* cnc_rdparam64 : read  parameter (IEEE double version) */
/* cnc_wrparam64 : write parameter (IEEE double version) */
typedef struct iodbpsd64 {
    short       datano;     /* data number */
    short       type ;      /* data type */
    short       axis ;      /* axis number */
    short       dummy ;     /* dummy */
    union {
        char        cdata;  /* parameter / setting data */
        short       idata;  /* short tyoe data */
        long        ldata;  /* long tyoe data */
        REALDATA    rdata;  /* real type data */
        char        cdatas[MAX_AXIS];
        short       idatas[MAX_AXIS];
        long        ldatas[MAX_AXIS];
        REALDATA    rdatas[MAX_AXIS];
    } u;
} IODBPSD64;

/* cnc_rdwkcdshft64:read  work coordinate shift */
/* cnc_wrwkcdshft64:write work coordinate shift */
/* cnc_rdwkcdsfms64:read  work coordinate shift measure */
/* cnc_wrwkcdsfms64:write work coordinate shift measure */
typedef struct iodbwcsf64 {
    short       dummy1;         /* dummy1 */
    short       type;           /* axis number */
    short       dummy2[2];      /* dummy2 */
    REALDATA    data[MAX_AXIS]; /* data */
} IODBWCSF64;

/* cnc_wrzofs64:write work zero offset value */
typedef struct iodbzofs64 {
    short       datano;         /* offset NO. */
    short       type;           /* axis number */
    short       dummy[2];       /* dummy */
    REALDATA    data[MAX_AXIS]; /* data value */
} IODBZOFS64;

/* cnc_machine:read machine axis position */
typedef struct odbaxis64 {
    short       dummy1 ;        /* dummy1 */
    short       type ;          /* axis number */
    short       dummy2[2];      /* dummy2 */
    REALDATA    data[MAX_AXIS]; /* data value */
} ODBAXIS64 ;

/* cnc_rdaxisdata64:read various axis data(IEEE double version) */
typedef struct odbaxdt64 {
    char    name[4];    /* axis name */
    char    dummy[4];
    double  data;       /* position data */
    short   dec;        /* decimal position */
    short   unit;       /* data unit */
    short   flag;       /* flags */
    short   reserve;    /* reserve */
} ODBAXDT64 ;

typedef struct odbdgn64 {
    short   datano ;    /* data number */
    short   type ;      /* axis number */
    short   axis ;      /* axis number */
    short   dummy ;     /* dummy */
    union {
        char        cdata ; /* diagnosis data */
        short       idata ;
        long        ldata ;
        REALDATA    rdata ;
        char        cdatas[MAX_AXIS] ;
        short       idatas[MAX_AXIS] ;
        long        ldatas[MAX_AXIS] ;
        REALDATA    rdatas[MAX_AXIS] ;
    } u ;
} ODBDGN64 ;

/* cnc_wrtofsdrctinp:write Tool offset data Direct Input(IEEE double version) */
typedef struct realmes64 {
    double mes_val; /* data of real measeure */
    long   dec_val; /* decimal point of real measeure */
    long   dummy;   /* dummy */
} REALMES64;

/* cnc_rddynamic:read all dynamic data */
typedef struct odbdy {
    short   dummy ;
    short   axis ;      /* axis number */
    short   alarm ;     /* alarm status */
    short   prgnum ;    /* current program number */
    short   prgmnum ;   /* main program number */
    long    seqnum ;    /* current sequence number */
    long    actf ;      /* actual feedrate */
    long    acts ;      /* actual spindle speed */
    union {
        struct {
            long    absolute[MAX_AXIS] ;    /* absolute position */
            long    machine[MAX_AXIS] ;     /* machine position */
            long    relative[MAX_AXIS] ;    /* relative position */
            long    distance[MAX_AXIS] ;    /* distance to go */
        } faxis ;
        struct {
            long    absolute ;  /* absolute position */
            long    machine ;   /* machine position */
            long    relative ;  /* relative position */
            long    distance ;  /* distance to go */
        } oaxis ;   /* In case of no axis */
    } pos ;
} ODBDY ;

/* cnc_rddynamic2:read all dynamic data */
typedef struct odbdy2 {
    short   dummy ;
    short   axis ;       /* axis number             */
    long    alarm ;      /* alarm status            */
    long    prgnum ;     /* current program number  */
    long    prgmnum ;    /* main program number     */
    long    seqnum ;     /* current sequence number */
    long    actf ;       /* actual feedrate         */
    long    acts ;       /* actual spindle speed    */
    union {
        struct {
            long    absolute[MAX_AXIS] ;    /* absolute position   */
            long    machine[MAX_AXIS] ;     /* machine position    */
            long    relative[MAX_AXIS] ;    /* relative position   */
            long    distance[MAX_AXIS] ;    /* distance to go      */
        } faxis ;
        struct {
            long    absolute ;  /* absolute position   */
            long    machine ;   /* machine position    */
            long    relative ;  /* relative position   */
            long    distance ;  /* distance to go      */
        } oaxis ;   /* In case of 1 axis  */
    } pos ;
} ODBDY2 ;

/* cnc_rddynamic3:read all dynamic data(3) */
typedef struct odbdy3 {
    short   dummy ;
    short   axis ;       /* axis number             */
    long    alarm ;      /* alarm status            */
    long    prgnum ;     /* current program number  */
    long    prgmnum ;    /* main program number     */
    long    seqnum ;     /* current sequence number */
    long    actf ;       /* actual feedrate         */
    long    acts ;       /* actual spindle speed    */
    union {
        struct {
            long    absolute[MAX_AXIS] ;    /* absolute position   */
            long    machine[MAX_AXIS] ;     /* machine position    */
            long    relative[MAX_AXIS] ;    /* relative position   */
            long    distance[MAX_AXIS] ;    /* distance to go      */
        } faxis ;
        struct {
            long    absolute ;  /* absolute position   */
            long    machine ;   /* machine position    */
            long    relative ;  /* relative position   */
            long    distance ;  /* distance to go      */
        } oaxis ;   /* In case of 1 axis  */
    } pos ;
} ODBDY3 ;

/* cnc_rddynamic3m:read all dynamic data(3m) */
typedef struct odbdy3m {
    short   dummy ;
    short   axis ;       /* axis number             */
    long    alarm ;      /* alarm status            */
    long    prgnum ;     /* current program number  */
    long    prgmnum ;    /* main program number     */
    long    seqnum ;     /* current sequence number */
    long    actf ;       /* actual feedrate         */
    long    acts ;       /* actual spindle speed    */
    union {
        struct {
            long    absolute[32] ;    /* absolute position   */
            long    machine[32] ;     /* machine position    */
            long    relative[32] ;    /* relative position   */
            long    distance[32] ;    /* distance to go      */
        } faxis ;
        struct {
            long    absolute ;  /* absolute position   */
            long    machine ;   /* machine position    */
            long    relative ;  /* relative position   */
            long    distance ;  /* distance to go      */
        } oaxis ;   /* In case of 1 axis  */
    } pos ;
} ODBDY3M ;

/* cnc_wrrelpos:set origin / preset relative axis position */
typedef struct idbwrr {
    short   datano;         /* dummy */
    short   type;           /* axis number */
    long    data[MAX_AXIS]; /* preset data */
} IDBWRR;

/* cnc_prstwkcd:preset work coordinate */
typedef struct idbwra {
    short   datano;         /* dummy */
    short   type;           /* axis number */
    long    data[MAX_AXIS]; /* preset data */
} IDBWRA;

/* cnc_rdmovrlap:read manual overlapped motion value */
typedef struct iodbovl {
    short   datano;             /* dummy */
    short   type;               /* axis number */
    long    data[2][MAX_AXIS];  /* data value */
} IODBOVL;

/* cnc_rdmovrlapm:read manual overlapped motion value */
typedef struct iodbovlm {
    short   datano;       /* dummy */
    short   type;         /* axis number */
    long    data[2][32];  /* data value */
} IODBOVLM;

/* cnc_rdspload:read load information of serial spindle */
/* cnc_rdspmaxrpm:read maximum r.p.m. ratio of serial spindle */
/* cnc_rdspgear:read gear ratio of serial spindle */
typedef struct odbspn {
    short   datano;     /* spindle number */
    short   type;       /* dummy */
    short   data[MAX_SPINDLE];    /* spindle data */
} ODBSPN;

/* cnc_rdposition:read tool position */
typedef struct poselm {
    long    data;       /* position data */
    short   dec;        /* decimal position */
    short   unit;       /* data unit */
    short   disp;       /* display flag */
    char    name;       /* axis name */
    char    suff;       /* suffix */
} POSELM;

#if !defined (PMD) /* except Power Mate D/H */
typedef struct odbpos {
    POSELM  abs;        /* absolute position */
    POSELM  mach;       /* machine position */
    POSELM  rel;        /* relative position */
    POSELM  dist;       /* distance position */
} ODBPOS ;
#endif

/* cnc_rdhndintrpt:read handle interruption */
typedef struct odbhnd {
    POSELM  input;      /* input unit */
    POSELM  output;     /* output unit */
} ODBHND ;

/* cnc_rdspeed:read current speed */
/* cnc_rdjogdrun:read displayed jog or dryrun feedrate */
typedef struct speedelm {
    long    data;       /* speed data */
    short   dec;        /* decimal position */
    short   unit;       /* data unit */
    short   disp;       /* display flag */
    char    name;       /* name of data */
    char    suff;       /* suffix */
} SPEEDELM ;

typedef struct odbspeed {
    SPEEDELM    actf;   /* actual feed rate */
//  SPEEDELM    acts;   /* actual spindle speed */
    SPEEDELM    acts;   /* type = 1,-1 : actual spindle speed */
                        /* type = 2,-2 : milling servo speed  */
} ODBSPEED ;

typedef struct odbjogdrun {
    SPEEDELM    jogdrun;/* jog or dryrun feedrate */
} ODBJOGDRUN ;

/* cnc_rdsvmeter:read servo load meter */
/* cnc_rdspmeter:read spindle load meter */
typedef struct loadelm {
    long    data;       /* load meter */
    short   dec;        /* decimal position */
    short   unit;       /* unit */
    char    name;       /* name of data */
    char    suff1;      /* suffix */
    char    suff2;      /* suffix */
    char    reserve;    /* reserve */
} LOADELM ;

typedef struct odbsvload {
    LOADELM svload;     /* servo load meter */
} ODBSVLOAD ;

typedef struct odbspload {
    LOADELM spload;     /* spindle load meter */
    LOADELM spspeed;    /* spindle speed */
} ODBSPLOAD ;

/* cnc_rdaxisdata:read various axis data */
typedef struct odbaxdt {
    char    name[4];    /* axis name */
    long    data;       /* position data */
    short   dec;        /* decimal position */
    short   unit;       /* data unit */
    short   flag;       /* flags */
    short   reserve;    /* reserve */
} ODBAXDT;

/* cnc_rdspcss:read constant surface speed data */
typedef struct odbcss {
    long    srpm;       /* order spindle speed */
    long    sspm;       /* order constant spindle speed */
    long    smax;       /* order maximum spindle speed */
} ODBCSS;

/* cnc_simulation:read data for machining simulation */
typedef struct odbsiml {
    long    t_code ;
    long    b_code ;
    long    axis_no ;
    long    machine[MAX_AXIS] ;
    long    dec[MAX_AXIS] ;
    long    fscsl ;
} ODBSIML;

/* cnc_loadtorq */
typedef struct odbload {
    short	datano;
    short	type;
    short	data[MAX_AXIS];
} ODBLOAD;

/* cnc_rdexecpt:read execution program pointer */
#ifndef CNC_PPC
typedef struct prgpnt {
    long    prog_no;    /* program number */
    long    blk_no;     /* block number */
} PRGPNT;
#endif

/* cnc_rdactpt_w:read execution pointer of program for FS160is/180is-WB */
typedef struct odbactptw {
    long    mprgno;     /* main program number */
    long    mblkno;     /* main block number */
    long    sprgno;     /* sub program number */
    long    sblkno;     /* sub block number */
} ODBACTPTW ;

/* cnc_rd5axmandt:read manual feed for 5-axis machining */
typedef	struct odb5axman {
    short   type1;
    short   type2;
    short   type3;
    long    data1;
    long    data2;
    long    data3;
    long    c1;
    long    c2;
    long    dummy;
    long    td;
    long    r1;
    long    r2;
    long    vr;
    long    h1;
    long    h2;
} ODB5AXMAN ;

/* cnc_rdposfig:read position and decimal figure */
typedef struct odbposfig {
    long    val;
    long    dec;
} ODBPOSFIG ;


/*----------------------*/
/* CNC: Program related */
/*----------------------*/

/* cnc_rddncdgndt:read the diagnosis data of DNC operation */
typedef struct odbdncdgn {
    short          ctrl_word;
    short          can_word;
    char           nc_file[16];
    unsigned short read_ptr;
    unsigned short write_ptr;
    unsigned short empty_cnt;
    unsigned long  total_size;
} ODBDNCDGN;

/* cnc_rddncdgndt:read the diagnosis data of DNC operation (2) */
typedef struct odbdncdgn2 {
    short          ctrl_word;
    short          can_word;
    char           nc_file[64];
    unsigned short read_ptr;
    unsigned short write_ptr;
    unsigned short empty_cnt;
    unsigned long  total_size;
} ODBDNCDGN2;

/* cnc_upload:upload NC program */
/* cnc_cupload:upload NC program(conditional) */
typedef struct odbup {
    short   dummy[2] ;  /* dummy */
    char    data[256] ; /* data */
} ODBUP ;   /* In case that the number of data is 256 */

/* cnc_buff:read buffer status for downloading/verification NC program */
typedef struct odbbuf {
    short   dummy[2] ;  /* dummy */
    short   data ;      /* buffer status */
} ODBBUF ;

/* cnc_rdpdf_pglockstat: read program lock status */
typedef struct odbprgname {
    char    name[MAX_LOCK_PROG][256];
} ODBPRGNAME;

/* cnc_rdprogdir:read program directory */
typedef struct prgdir {
    char    prg_data[256] ; /* directory data */
} PRGDIR ;  /* In case that the number of data is 256 */

/* cnc_rdproginfo:read program information */
typedef struct odbnc {
    union {
        struct {
            short   reg_prg ;       /* registered program number */
            short   unreg_prg ;     /* unregistered program number */
            long    used_mem ;      /* used memory area */
            long    unused_mem ;    /* unused memory area */
        } bin ;             /* binary data type */
        char    asc[31] ;   /* ASCII string type */
    } u ;
} ODBNC ;

/* cnc_rdprgnum:read program number under execution */
typedef struct odbpro {
    short   dummy[2] ;  /* dummy */
    short   data ;      /* running program number */
    short   mdata ;     /* main program number */
} ODBPRO ;

/* cnc_exeprgname:read program name under execution */
typedef struct odbexeprg {
    char  name[36];     /* running program name */
    long  o_num;        /* running program number */
} ODBEXEPRG;            /*                        */

/* cnc_dncprgname:read program name of DNC operation */
typedef struct odbdncprg {
    char  name[36];     /* running program name */
    long  o_num;        /* running program number */
} ODBDNCPRG;            /*                        */

/* cnc_rdseqnum:read sequence number under execution */
typedef struct odbseq {
    short   dummy[2] ;  /* dummy */
    long    data ;      /* sequence number */
} ODBSEQ ;

/* cnc_rdexecprog3:read execute-program infomation  */
typedef struct tagEXEPRG {
    unsigned short  length;		/* read data length      */
    short           prep_blk;	/* prepared block number */
    short           act_blk;	/* actual block number   */
    short           dummy;		/* dummy                 */
    char            data[512];	/* execute program       */
} EXEPRG;

typedef struct odbexeprginfo {
    EXEPRG	before_buffering;
    EXEPRG	after_buffering;
} ODBEXEPRGINFO;

/* cnc_rdmdipntr:read execution pointer for MDI operation */
typedef struct odbmdip {
    short   mdiprog;    /* exec. program number */
    long    mdipntr;    /* exec. pointer */
    short   crntprog;   /* prepare program number */
    long    crntpntr;   /* prepare pointer */
} ODBMDIP;

/* cnc_pdf_rdcallstack:read call stack PDF */
typedef struct odbnest{
    unsigned long	attrib;
    char			comment[64] ;
    char			prog_name[245];
    char			dummy[7];
} ODBNESTPDF;

/* cnc_rdpdf_drive:read program drive directory */
typedef struct odbpdfdrv {
    short	max_num;		/* maximum drive number */
    short	dummy;
    char	drive[16][12];	/* drive name */
} ODBPDFDRV ;

/* cnc_rdpdf_inf:read program drive information */
typedef struct odbpdfinf {
    long	used_page;	/* used capacity */
    long	all_page;	/* all capacity */
    long	used_dir;	/* used directory number */
    long	all_dir;	/* all directory number */
} ODBPDFINF ;

/* cnc_rdpdf_subdir:read directory (sub directories) */
typedef struct idbpdfsdir {
    char	path[212];	/* path name */
    short	req_num;	/* entry number */
    short	dummy;
} IDBPDFSDIR ;

/* cnc_rdpdf_subdir:read directory (sub directories) */
typedef struct odbpdfsdir {
    short	sub_exist;	/* existence of sub directory */
    short	dummy;
    char	d_f[36];	/* directory name */
} ODBPDFSDIR ;

/* cnc_rdpdf_alldir:read directory (all files) */
typedef struct idbpdfadir {
    char	path[212];	/* path name */
    short	req_num;	/* entry number */
    short	size_kind;	/* kind of size */
    short	type;		/* kind of format */
    short	dummy;
} IDBPDFADIR ;

/* cnc_rdpdf_alldir:read directory (all files) */
typedef struct odbpdfadir {
    short	data_kind;	/* kinf of data */
    short	year;		/* last date and time */
    short	mon;		/* last date and time */
    short	day;		/* last date and time */
    short	hour;		/* last date and time */
    short	min;		/* last date and time */
    short	sec;		/* last date and time */
    short	dummy;
    long	dummy2;
    long	size;		/* size */
    unsigned long attr;	/* attribute */
    char	d_f[36];	/* path name */
    char	comment[52];/* comment */
    char	o_time[12];	/* machining time stamp */
} ODBPDFADIR ;

/* cnc_rdpdf_prginf:read program infomation  */
typedef struct idbpdfprg {
    char	path[244];	/* path name */
    short	size_kind;	/* kind of size */
    short	type;		/* kind of format */
    short	dummy;
} IDBPDFPRG ;

/* cnc_rdpdf_prginf:read program infomation  */
typedef struct odbpdfprg {
    short	year;		/* last date and time */
    short	mon;		/* last date and time */
    short	day;		/* last date and time */
    short	hour;		/* last date and time */
    short	min;		/* last date and time */
    short	sec;		/* last date and time */
    long	size;		/* size */
    unsigned long attr;	/* attribute */
    char	comment[52];/* comment */
    char	o_time[12];	/* machining time stamp */
} ODBPDFPRG ;

/* cnc_rdprotect:read protect status  */
typedef struct odbprtct {
    short       disp;           /* for disp */
    short       edit;           /* for eidt */
    short       encd;           /* for encode */
    short       lock;           /* for program lock */
} ODBPRTCT ;

/* cnc_rdprotect2:read protect status  */
typedef struct odbprtct2 {
    short       disp;           /* for disp */
    short       edit;           /* for edit */
    short       encd;           /* for encode */
    short       lock;           /* for program lock */
    short       output;         /* for output */
    short       dummy;
} ODBPRTCT2 ;

/* cnc_rdpdf_subdirn:read file count the directory has */
typedef struct odbpdfnfil {
    short	dir_num;	/* directory */
    short	file_num;	/* file */
} ODBPDFNFIL ;

/* cncc_wrpdf_attr:change attribute of program file and directory */
typedef struct idbpdftdir {
    unsigned long slct;	/* selection */
    unsigned long attr;	/* data */
} IDBPDFTDIR ;

/* cnc_rddsfile: get file list infomation */
typedef struct in_dsfile {
    char    path[256];  /* path name   */
    long    fnum;       /* file number */
    long    offset;     /* offset */
    short   req_num;    /* request file num */
    short   size_type;  /* size type */
    short   detail;    /* comment type */
    short   dummy;
} IN_DSFILE;

/* cnc_rddsfile: get file list infomation */
typedef struct out_dsinfo {
    short           type;       /* type */
    short           dummy;
    long            fnum;       /* file num */
    long            total;      /* all file num */
    unsigned long   remain_h;   /* remain(high) */
    unsigned long   remain_l;   /* remain(low) */
    char            dir[256];   /* current folder */
} OUT_DSINFO;

/* cnc_rddsfile: get file list infomation */
typedef struct out_dsfile {
    short           year;       /* year */
    short           mon;        /* month */
    short           day;        /* day */
    short           hour;       /* hour */
    short           min;        /* minute */
    short           sec;        /* second */
    long            size;       /* size */
    unsigned long   attr;       /* attribute */
    char            file[36];   /* file name */
    char            info[128];  /* file infomation */
} OUT_DSFILE;

/* cnc_dsfile_req: get file list infomation */
typedef struct in_dsfile_req {
    char            file[256];  /* file name */
    long            fnum;       /* file number */
    long            offset;     /* offset */
    short           detail;     /* comment type */
    unsigned short  option;     /* option */
} ODB_IN_DSFILE_REQ;

/* cnc_dsstat_rdfile: get file list infomation */
typedef struct in_stat_dsfile {
    short   req_num;    /* request file num */
    short   size_type;  /* size type */
} ODB_IN_STAT_DSFILE;

/* cnc_rdembedf_inf:read embedded folder information*/
typedef struct odbembedfinf {
    long	used_page;	/* used capacity */
    long	all_page;	/* all capacity */
} ODBEMBEDFINF ;

/*---------------------------*/
/* CNC: NC file data related */
/*---------------------------*/

/* cnc_rdtofs:read tool offset value */
typedef struct odbtofs {
    short   datano ;    /* data number */
    short   type ;      /* data type */
    long    data ;      /* data */
} ODBTOFS ;

/* cnc_rdtofsr:read tool offset value(area specified) */
/* cnc_wrtofsr:write tool offset value(area specified) */
typedef struct iodbto {
    short   datano_s ;  /* start offset number */
    short   type ;      /* offset type */
    short   datano_e ;  /* end offset number */
    union {
        long    m_ofs[5] ;      /* M Each */
        long    m_ofs_a[5] ;    /* M-A All */
        long    m_ofs_b[10] ;   /* M-B All */
        long    m_ofs_c[20] ;   /* M-C All */
        struct  {
            short   tip ;
            long    data[1] ;
        } m_ofs_at[5] ;         /* M-A All with tip */
        struct  {
            short   tip ;
            long    data[2] ;
        } m_ofs_bt[5] ;         /* M-A All with tip  */
        struct  {
            short   tip ;
            long    data[4] ;
        } m_ofs_ct[5] ;         /* M-A All with tip  */
        short   t_tip[5] ;      /* T Each, 2-byte */
        long    t_ofs[5] ;      /* T Each, 4-byte */
        struct  {
            short   tip ;
            long    data[4] ;
        } t_ofs_a[5] ;          /* T-A All */
        struct {
            short   tip ;
            long    data[8] ;
        } t_ofs_b[5] ;          /* T-B All */
        long    t_ofs_2g[15];   /* T-2nd geometry */
        long    m_ofs_cnr[10];  /* M-CornerR */
        struct  {
                long    data[2];
        } t_ofs_ex[5];		     /* T-Ex-Ofs */
    } u ;   /* In case that the number of data is 5 */
} IODBTO ;

/* cnc_rdzofs:read work zero offset value */
/* cnc_wrzofs:write work zero offset value */
typedef struct iodbzofs {
    short   datano ;            /* offset NO. */
    short   type ;              /* axis number */
    long    data[MAX_AXIS] ;    /* data value */
} IODBZOFS ;

/* cnc_rdzofsr:read work zero offset value(area specified) */
/* cnc_wrzofsr:write work zero offset value(area specified) */
typedef struct iodbzor {
    short   datano_s ;  /* start offset number */
    short   type ;      /* axis number */
    short   datano_e ;  /* end offset number */
    long    data[8*MAX_AXIS] ;  /* offset value */
} IODBZOR ; /* In case that the number of axes is MAX_AXIS, the number of data is 7 */

/* cnc_rdjogmdi:read manual numeric command */
typedef struct iodbjogcmdcode {
    char    adrs;                   /* command address */
    long    num;                    /* command number */
} ODBJOGCMDCODE;
/* cnc_rdjogmdi:read manual numeric command */
typedef struct iodbjogcmdscode {
    char    adrs[4];                /* command address */
    long    num;                    /* command number */
} ODBJOGCMDSCODE;
/* cnc_rdjogmdi:read manual numeric command */
typedef struct iodbjogcmdaxis {
    char    name[4];                /* axis name */
    long    data;                   /* command number */
    long    dec;                    /* Decimal places */
} ODBJOGCMDAXIS;
/* cnc_rdjogmdi:read manual numeric command */
typedef struct odbjogcmd {
    ODBJOGCMDCODE       gcode;          /* G code */
    ODBJOGCMDCODE       mcode;          /* M code */
    ODBJOGCMDCODE       scode;          /* S code */
    ODBJOGCMDCODE       tcode;          /* T code */
    ODBJOGCMDCODE       bcode;          /* B code */
    ODBJOGCMDCODE       padr;           /* address P */
    ODBJOGCMDSCODE		extscode[4];	/* extension S code */
    ODBJOGCMDAXIS       axis[MAX_AXIS]; /* axis */
    long				axis_cnt;		/* axis count */
} ODBJOGCMD;

/* cnc_rdmsptype:read mesured point value */
/* cnc_wrmsptype:write mesured point value */
typedef struct iodbmstp {
    short   datano_s ;  /* start offset number */
    short   dummy ;     /* dummy */
    short   datano_e ;  /* end offset number */
    char    data[7] ;   /* mesured point value */
} IODBMSTP ;

/* cnc_rdparam:read parameter */
/* cnc_wrparam:write parameter */
/* cnc_rdset:read setting data */
/* cnc_wrset:write setting data */
/* cnc_rdparar:read parameter(area specified) */
/* cnc_wrparas:write parameter(plural specified) */
/* cnc_rdsetr:read setting data(area specified) */
/* cnc_wrsets:write setting data(plural specified) */
typedef struct realprm {
        long   prm_val;     /* data of real parameter */
        long   dec_val;     /* decimal point of real parameter */
} REALPRM;

#if !defined (HSSB_LIB) || defined (FS30D) || defined (FS15D) || defined (FS0IDD) /* Ethernet & FS30i & FS15i & FS0i-D */
typedef struct iodbpsd {
    short   datano ;    /* data number */
    short   type ;      /* axis number */
    union {
        char    cdata ;     /* parameter / setting data */
        short   idata ;
        long    ldata ;
        REALPRM rdata ;
        char    cdatas[MAX_AXIS] ;
        short   idatas[MAX_AXIS] ;
        long    ldatas[MAX_AXIS] ;
        REALPRM rdatas[MAX_AXIS] ;
    } u ;
} IODBPSD ;

#else

typedef struct iodbpsd {
    short   datano ;    /* data number */
    short   type ;      /* axis number */
    union {
        char    cdata ;     /* parameter / setting data */
        short   idata ;
        long    ldata ;
        char    cdatas[MAX_AXIS] ;
        short   idatas[MAX_AXIS] ;
        long    ldatas[MAX_AXIS] ;
    } u ;
} IODBPSD ;
#endif

/* cnc_rdparam_ext:read parameters */
/* cnc_rddiag_ext:read diagnosis data */
/* cnc_start_async_wrparam:async parameter write start */
typedef struct iodbprm {
    long    datano ;    /* data number */
    short   type ;      /* data type */
    short   axis ;      /* axis information */
    short   info ;      /* misc information */
    short   unit ;      /* unit information */
    struct {
        long    prm_val ;   /* parameter / setting data */
        long    dec_val ;
    } data[32];
} IODBPRM;

/* cnc_preset_prm:parameter preset */
typedef struct iodbbook {
    short   param_no ;      /* parameter number     */
    char    axis ;          /* data type            */
    char    type ;          /* axis number          */
    union {
        char    cdata ;     /* bit / byte type data */
        short   idata ;     /* word type data       */
        long    ldata ;     /* 2 word type data     */
        REALPRM rdata ;     /* real type data       */
    } u ;
} IODBBOOK;

/* cnc_rdpitchr:read pitch error compensation data(area specified) (incremental)*/
/* cnc_wrpitchr:write pitch error compensation data(area specified)(incremental) */
typedef struct iodbpi {
    short   datano_s ;  /* start pitch number */
    short   dummy ;     /* dummy */
    short   datano_e ;  /* end pitch number */
    char    data[5] ;   /* offset value */
} IODBPI ;  /* In case that the number of data is 5 */

/* cnc_rdoverstore:read overstore command */
typedef struct iodbovmst {
    char    adrs;                   /* command address */
    long    num;                    /* command number */
} IODBOVMST;

/* cnc_rdoverstore:read overstore command */
typedef struct iodbovstr {
    IODBOVMST       mcode;          /* M code */
    IODBOVMST       scode;          /* S code */
    IODBOVMST       tcode;          /* T code */
    IODBOVMST       bcode;          /* B code */
} IODBOVSTR;

#define	MAX_PITCH_GROUP		8
/* cnc_rdpitchblkinfo : read pitch compensation data */
typedef struct tagIODBPITCHBLK {
    short	group_num ;
    struct {
        long	s_no ;
        long	e_no ;
        short	attr ;
    } pginf [MAX_PITCH_GROUP] ;
} IODBPITCHBLK ;

/* cnc_rdvolc : read volumetric compensation data */
/* cnc_wrvolc : write volumetric compensation data */
typedef struct tagODBVOLC {
    long	start_no ;
    long	start_ax ;
    long	end_no ;
    long	end_ax ;
    long	num ;
    char	type ;
    long	data[72] ;
} ODBVOLC ;

/* cnc_rdrotvolc : read rotate volumetric compensation data */
/* cnc_wrrotvolc : write rotate volumetric compensation data */
/* cnc_wrrotvolc2 : write rotate volumetric compensation data (2) */
typedef struct iodbrotvolc {
     long   lin[3] ;
     long   rot[3] ;
} IODBROTVOLC ;

/* cnc_rdvolccomp : get volumetric compensation amount of axes */
/* cnc_dvpunchvolc : punch volumetric compensation data to device */
/* cnc_dvreadvolc : read volumetric compensation data to device */
typedef struct tagODBVOLCOMP {
    long	comp[5] ;
} ODBVOLCOMP ;

/* cnc_rdmacro:read custom macro variable */
typedef struct odbm {
    short   datano ;    /* variable number */
    short   dummy ;     /* dummy */
    long    mcr_val ;   /* macro variable */
    short   dec_val ;   /* decimal point */
} ODBM ;

/* cnc_rdmacro3:read custom macro variable (3)*/
typedef struct odbm3 {
    long    datano ;    /* variable number */
    long    mcr_val ;   /* macro variable */
    short   dec_val ;   /* decimal point */
} ODBM3 ;

/* cnc_rdmacror:read custom macro variables(area specified) */
/* cnc_wrmacror:write custom macro variables(area specified) */
typedef struct iodbmr {
    short   datano_s ;  /* start macro number */
    short   dummy ;     /* dummy */
    short   datano_e ;  /* end macro number */
    struct {
        long    mcr_val ;   /* macro variable */
        short   dec_val ;   /* decimal point */
    } data[5] ;
} IODBMR ;  /* In case that the number of data is 5 */

/* cnc_rdmacror2_name:read custom macro names(area specified) */
typedef struct iodbmnr {
    double  mcr_val ;   /* macro variable */
    char    name[16] ;  /* macro name */
} IODBMRN ;  /* In case that the number of data is 50 */

/* cnc_rdmacror3:read custom macro names(area specified) */
typedef struct iodbmnr3 {
    double  mcr_val ;   /* macro variable */
    char    name[32] ;  /* macro name */
} IODBMRN3 ;  /* In case that the number of data is 50 */

/* cnc_rdpmacro:read P code macro variable */
typedef struct odbpm {
    long    datano ;    /* variable number */
    short   dummy ;     /* dummy */
    long    mcr_val ;   /* macro variable */
    short   dec_val ;   /* decimal point */
} ODBPM ;

/* cnc_rdpmacror:read P code macro variables(area specified) */
/* cnc_wrpmacror:write P code macro variables(area specified) */
typedef struct iodbpr {
    long    datano_s ;  /* start macro number */
    short   dummy ;     /* dummy */
    long    datano_e ;  /* end macro number */
    struct {
        long    mcr_val ;   /* macro variable */
        short   dec_val ;   /* decimal point */
    } data[5] ;
} IODBPR ;  /* In case that the number of data is 5 */

/* cnc_rdtofsinfo:read tool offset information */
typedef struct odbtlinf {
    short   ofs_type;
    short   use_no;
} ODBTLINF;

/* cnc_rdtofsinfo2:read tool offset information(2) */
typedef struct odbtlinf2 {
    short   ofs_type;
    short   use_no;
    short   ofs_enable;
} ODBTLINF2;

/* cnc_rdmacroinfo:read custom macro variable information */
typedef struct odbmvinf {
    short   use_no1;
    short   use_no2;
} ODBMVINF;

/* cnc_rdpmacroinfo:read P code macro variable information */
#if !defined (FS15BD)
typedef struct odbpminf {
    short       use_no1;
#ifdef PCD_UWORD
    unsigned short  use_no2;
#else
    short       use_no2;
#endif
    short       v2_type;
} ODBPMINF;
#else
typedef struct odbpminf {
    short       use_no1;
#ifdef PCD_UWORD
    unsigned short  use_no2;
#else
    short       use_no2;
#endif
    short       v2_type1;
    short       v2_type2;
} ODBPMINF;
#endif

/* cnc_rdpmacroinfo2:read P code macro variable information (2) */
typedef struct odbpminf2 {
    long    use_no1;
    long    use_no2;
    long    use_no20;
    short   v1_type;
    short   v2_type;
    short   v20_type;
} ODBPMINF2;

/* cnc_rdpmacroinfo3:read P code macro variable information (3)*/
typedef struct odbpminf3 {
    short         use_no1;
    unsigned long use_no2;
    short         v1_type;
    short         v2_type;
} ODBPMINF3;

/* cnc_rdpmacvalflag:read P code macro variable flag */
typedef struct odbpmvalflg {
    short       exe_type;
    short       aux_type;
    short       tlk_type;
} ODBPMVALFLG;

/* cnc_tofs_rnge:read validity of tool offset */
/* cnc_zofs_rnge:read validity of work zero offset */
/* cnc_wksft_rnge:read validity of work shift value */
typedef struct odbdatrng {
    long	data_min;	/* lower limit */
    long	data_max;	/* upper limit */
    long	status;		/* status of setting */
} ODBDATRNG ;

/* cnc_rdholmes:read work zero point measurement hole measured value */
typedef struct {
    char	mes_axis[2];
    char	mes_parl[2];
    long	mes_val1[2];/* #1 */
    long	mes_dp1[2];
    long	mes_val2[2];/* #2 */
    long	mes_dp2[2];
    long	mes_val3[2];/* #3 */
    long	mes_dp3[2];
} ODBHOLDATA;

typedef struct  hol64 {
    double mes_val1[2] ; /* #1 */
    long   mes_dp1[2]  ;
    double mes_val2[2] ; /* #2 */
    long   mes_dp2[2]  ;
    double mes_val3[2] ; /* #3 */
    long   mes_dp3[2]  ;
    char   mes_axis[2] ; /* axis */
    char   mes_parl[2] ;
} ODBHOLDATA64 ;

/* cnc_rdtldata:read work zero point measurement TL value */
typedef struct  tlmsinf {
    long	t;			/* t data */
    long	m;			/* m data */
    long	hm;			/* hm data */
    long	hm_dp;		/* hm_dp */
    long	tlofs_no;	/* offset num */
} ODBTLMSINF ;

/* cnc_rdtlmsinfo:read tool length measurement information */
typedef struct	tldata {
    long	tl;			/* tl data */
    long	tl_dp;		/* tl dp */
} ODBTLDATA ;

/* cnc_rdhsprminfo:read the information for function cnc_rdhsparam() */
typedef struct hspinfo {
    char prminfo[8][16];
} HSPINFO;

/* cnc_rdhsparam:read parameters at the high speed */
#ifndef CNC_PPC
#if !defined (HSSB_LIB) || defined (FS30D) || defined (FS15D) || defined (FS0IDD) /* Ethernet & FS30i & FS15i & FS0i-D */
typedef union hspdata {
    char    cdata[MAX_AXIS];
    short   idata[MAX_AXIS];
    long    ldata[MAX_AXIS];
        REALPRM rdata[MAX_AXIS];
} HSPDATA;

#else

typedef union hspdata {
    char    cdata[MAX_AXIS];
    short   idata[MAX_AXIS];
    long    ldata[MAX_AXIS];
} HSPDATA;
#endif
#endif

/* cnc_rdhsparam:read parameters at the high speed */
typedef union hspdatam {
    char    cdata[32];
    short   idata[32];
    long    ldata[32];
        REALPRM rdata[32];
} HSPDATAM;

/* cnc_rdfixoffs:read rotary table dynamic fixture offset */
/* cnc_wrfixoffs:write rotary table dynamic fixture offset */
typedef struct odbfofs {
    long    mcrval;
    short   decval;
} ODBFOFS;

/* cnc_rdcdslctprm:read the machining condition parameters */
typedef struct iodbctpr {
    struct {
        long    acc_bipl[MAX_AXIS];
        long    acc_chg_time;
        long    jerk_acc_diff[MAX_AXIS];
        long    jerk_acc_diff_lin[MAX_AXIS];
        char    jerk_acc_ratio;
        long    max_acc[MAX_AXIS];
        short   t_con_aipl[MAX_AXIS];
        long    corner_feed_diff[MAX_AXIS];
        long    max_cut_fdrate[MAX_AXIS];
    } data;
    struct {
        short   datano;
        short   type;
        union {
            char    cdata;
            short   idata;
            long    ldata;
            char    cdatas[MAX_AXIS];
            short   idatas[MAX_AXIS];
            long    ldatas[MAX_AXIS];
        } u;
    } prm[2];
} IODBCTPR;

/* cnc_rdcdslctprmm:read the machining condition parameters */
typedef struct iodbctprm {
    union {
        // Series 16i/18i
        struct {
            long    acc_bipl[8];
            long    acc_chg_time;
            long    jerk_acc_diff[8];
            long    jerk_acc_diff_lin[8];
            char    jerk_acc_ratio;
            long    max_acc[8];
            short   t_con_aipl[8];
            long    corner_feed_diff[8];
            long    max_cut_fdrate[8];
        } data_160;

        // Series 30i/31i/32i
        struct {
            REALPRM acc_bipl[32];
            REALPRM acc_chg_time;
            REALPRM jerk_acc_diff[32];
            REALPRM jerk_acc_diff_lin[32];
            char    jerk_acc_ratio;
            REALPRM max_acc[32];
            short   t_con_aipl[32];
            REALPRM corner_feed_diff[32];
            REALPRM max_cut_fdrate[32];
        } data_30i;
    } data;
    // Series 16i/18i/30i/31i/32i
    struct {
        short   datano;
        short   type;
        union {
            char    cdata;
            short   idata;
            long    ldata;
            REALPRM rdata;
            char    cdatas[32];
            short   idatas[32];
            long    ldatas[32];
            REALPRM rdatas[32];
        } u;
    } prm[2];
} IODBCTPRM;

/* cnc_rdtlgeomsize:read tool geom size data */
/* cnc_wrtlgeomsize:write tool geom size data */
typedef struct {
    long    data1;          /* tool data1   */
    long    data2;          /* tool data2   */
    char    tooltype;       /* tool kind    */
    char    install;        /* attach       */
    char    toolname[9];    /* tool name    */
    char    dummy;          /* dummy        */
} IODBTLGS;

/* cnc_rdtlgeomsize_ext:read extended tool geom size data */
/* cnc_wrtlgeomsize_ext:write extended tool geom size data */
typedef struct iodbtlgsext {
    long    data1;          /* tool data1   */
    long    data2;          /* tool data2   */
    long    data3;          /* tool data3   */
    long    data4;          /* tool data4   */
    char    tooltype;       /* tool kind    */
    char    install;        /* attach       */
    char    holder;         /* holder       */
    char    toolname[9];    /* tool name    */
} IODBTLGSEXT;

/* cnc_rdtlgeomsize_ext2:read extended tool geom size data */
/* cnc_wrtlgeomsize_ext2:write extended tool geom size data */
typedef struct iodbtlgsext2 {
    long    data1;          /* tool data1   */
    long    data2;          /* tool data2   */
    long    data3;          /* tool data3   */
    long    data4;          /* tool data4   */
    long    data5;          /* tool data5   */
    long    data6;          /* tool data6   */
    long    data7;          /* tool data7   */
    long    data8;          /* tool data8   */
    long    data9;          /* tool data9   */
    long    data10;         /* tool data10  */
    char    tooltype;       /* tool kind    */
    char    install;        /* attach       */
    char    holder;         /* holder       */
    char    toolname[9];    /* tool name    */
} IODBTLGSEXT2;

/*----------------------------------------*/
/* CNC: Tool life management data related */
/*----------------------------------------*/

/* cnc_rdgrpid:read tool life management data(tool group number) */
typedef struct odbtlife1 {
    short   dummy ; /* dummy */
    short   type ;  /* data type */
    long    data ;  /* data */
} ODBTLIFE1 ;

/* cnc_rdngrp:read tool life management data(number of tool groups) */
typedef struct odbtlife2 {
    short   dummy[2] ;  /* dummy */
    long    data ;      /* data */
} ODBTLIFE2 ;

/* cnc_rdntool:read tool life management data(number of tools) */
/* cnc_rdlife:read tool life management data(tool life) */
/* cnc_rdcount:read tool life management data(tool lift counter) */
typedef struct odbtlife3 {
    short   datano ;    /* data number */
    short   dummy ;     /* dummy */
    long    data ;      /* data */
} ODBTLIFE3 ;

/* cnc_rd1length:read tool life management data(tool length number-1) */
/* cnc_rd2length:read tool life management data(tool length number-2) */
/* cnc_rd1radius:read tool life management data(cutter compensation no.-1) */
/* cnc_rd2radius:read tool life management data(cutter compensation no.-2) */
/* cnc_t1info:read tool life management data(tool information-1) */
/* cnc_t2info:read tool life management data(tool information-2) */
/* cnc_toolnum:read tool life management data(tool number) */
typedef struct odbtlife4 {
    short   datano ;    /* data number */
    short   type ;      /* data type */
    long    data ;      /* data */
} ODBTLIFE4 ;

/* cnc_rdgrpid2:read tool life management data(tool group number) 2 */
typedef struct odbtlife5 {
    long    dummy ; /* dummy */
    long    type ;  /* data type */
    long    data ;  /* data */
} ODBTLIFE5 ;

/* cnc_rdtoolrng:read tool life management data(tool number, tool life, tool life counter)(area specified) */
typedef struct iodbtr {
    short   datano_s ;  /* start group number */
    short   dummy ;     /* dummy */
    short   datano_e ;  /* end group number */
    struct {
        long    ntool ;     /* tool number */
        long    life ;      /* tool life */
        long    count ;     /* tool life counter */
    } data[5] ;
} IODBTR ;  /* In case that the number of data is 5 */

/* cnc_rdtoolgrp:read tool life management data(all data within group) */
typedef struct odbtg {
    short   grp_num ;   /* start group number */
    short   dummy[2] ;  /* dummy */
    long    ntool ;     /* tool number */
    long    life ;      /* tool life */
    long    count ;     /* tool life counter */
    struct {
        long    tuse_num ;      /* tool number */
        long    tool_num ;      /* tool life */
        long    length_num ;    /* tool life counter */
        long    radius_num ;    /* tool life counter */
        long    tinfo ;         /* tool life counter */
    } data[5] ;
} ODBTG ;   /* In case that the number of data is 5 */

/* cnc_wrcountr:write tool life management data(tool life counter) (area specified) */
typedef struct idbwrc {
    short   datano_s ;  /* start group number */
    short   dummy ;     /* dummy */
    short   datano_e ;  /* end group number */
    struct {
        long    dummy[2] ;  /* dummy */
        long    count ;     /* tool life counter */
    } data[5] ;
} IDBWRC ;  /* In case that the number of data is 5 */

/* cnc_rdusegrpid:read tool life management data(used tool group number) */
typedef struct odbusegr {
    short   datano; /* dummy */
    short   type;   /* dummy */
    long    next;   /* next use group number */
    long    use;    /* using group number */
    long    slct;   /* selecting group number */
} ODBUSEGR;

/* cnc_rdmaxgrp:read tool life management data(max. number of tool groups) */
/* cnc_rdmaxtool:read tool life management data(maximum number of tool within group) */
typedef struct odblfno {
    short   datano; /* dummy */
    short   type;   /* dummy */
    short   data;   /* number of data */
} ODBLFNO;

/* cnc_rdusetlno:read tool life management data(used tool no within group) */
typedef struct odbtluse {
    short   s_grp;      /* start group number */
    short   dummy;      /* dummy */
    short   e_grp;      /* end group number */
    long    data[5];    /* tool using number */
} ODBTLUSE; /* In case that the number of group is 5 */

/* cnc_rd1tlifedata:read tool life management data(tool data1) */
/* cnc_rd2tlifedata:read tool life management data(tool data2) */
/* cnc_wr1tlifedata:write tool life management data(tool data1) */
/* cnc_wr2tlifedata:write tool life management data(tool data2) */
typedef struct iodbtd {
    short   datano;     /* tool group number */
    short   type;       /* tool using number */
    long    tool_num;   /* tool number */
    long    h_code;     /* H code */
    long    d_code;     /* D code */
    long    tool_inf;   /* tool information */
} IODBTD;

/* cnc_rd1tlifedat2:read tool life management data(tool data1) 2 */
/* cnc_wr1tlifedat2:write tool life management data(tool data1) 2 */
typedef struct iodbtd2 {
    short   datano;     /* tool group number */
    short   dummy;      /* dummy */
    long    type;       /* tool using number */
    long    tool_num;   /* tool number */
    long    h_code;     /* H code */
    long    d_code;     /* D code */
    long    tool_inf;   /* tool information */
} IODBTD2;

/* cnc_rdgrpinfo:read tool life management data(tool group information) */
/* cnc_wrgrpinfo:write tool life management data(tool group information) */
typedef struct iodbtgi {
    short   s_grp;  /* start group number */
    short   dummy;  /* dummy */
    short   e_grp;  /* end group number */
    struct {
        long    n_tool;         /* number of tool */
        long    count_value;    /* tool life */
        long    counter;        /* tool life counter */
        long    count_type;     /* tool life counter type */
    } data[5];
} IODBTGI;  /* In case that the number of group is 5 */

/* cnc_rdgrpinfo2:read tool life management data(tool group information 2) */
/* cnc_wrgrpinfo2:write tool life management data(tool group information 2) */
typedef struct iodbtgi2 {
    short   s_grp;              /* start group number */
    short   dummy;              /* dummy */
    short   e_grp;              /* end group number */
    long    opt_grpno[5];       /* optional group number of tool */
} IODBTGI2;  /* In case that the number of group is 5 */

/* cnc_rdgrpinfo3:read tool life management data(tool group information 3) */
/* cnc_wrgrpinfo3:write tool life management data(tool group information 3) */
typedef struct iodbtgi3 {
    short   s_grp;              /* start group number */
    short   dummy;              /* dummy */
    short   e_grp;              /* end group number */
    long    life_rest[5];       /* tool life rest count */
} IODBTGI3;  /* In case that the number of group is 5 */

/* cnc_rdgrpinfo4:read tool life management data(tool group information 4) */
/* cnc_wrgrpinfo4:write tool life management data(tool group information 4) */
typedef struct iodbtgi4 {
    short   grp_no;             /* group number */
    long	n_tool;				/* 				*/
    long	count_value;		/*				*/
    long	counter;			/*				*/
    long	count_type;			/*				*/
    long	opt_grpno;			/*				*/
    long	life_rest;			/*				*/
} IODBTGI4;

/* cnc_instlifedt:insert tool life management data(tool data) */
typedef struct idbitd {
    short   datano; /* tool group number */
    short   type;   /* tool using number */
    long    data;   /* tool number */
} IDBITD;

/* cnc_instlifedt:insert tool life management data(tool data) */
typedef struct idbitd2 {
    short   datano; /* tool group number */
    long    type;   /* tool using number */
    long    data;   /* tool number */
} IDBITD2;

/* cnc_rdtlinfo:read tool life management data */
typedef struct odbtlinfo {
    long    max_group;  /* maximum number of tool groups */
    long    max_tool;   /* maximum number of tool within group */
    long    max_minute; /* maximum number of life count (minutes) */
    long    max_cycle;  /* maximum number of life count (cycles) */
} ODBTLINFO;

/* cnc_rdtlusegrp:read tool life management data(used tool group number) */
typedef struct odbusegrp {
    long    next;       /* next use group number */
    long    use;        /* using group number */
    long    slct;       /* selecting group number */
    long    opt_next;   /* next use optional group number */
    long    opt_use;    /* using optional group number */
    long    opt_slct;   /* selecting optional group number */
} ODBUSEGRP;

/* cnc_rdtlgrp:read tool life management data(tool group information 2) */
typedef struct iodbtlgrp {
    long    ntool;      /* number of all tool */
    long    nfree;      /* number of free tool */
    long    life;       /* tool life */
    long    count;      /* tool life counter */
    long    use_tool;   /* using tool number */
    long    opt_grpno;  /* optional group number */
    long    life_rest;  /* tool life rest count */
    short   rest_sig;   /* tool life rest signal */
    short   count_type; /* tool life counter type */
} IODBTLGRP;

/* cnc_rdtltool:read tool life management data (tool data1) */
typedef struct iodbtltool {
    long    tool_num;   /* tool number */
    long    h_code;     /* H code */
    long    d_code;     /* D code */
    long    tool_inf;   /* tool information */
} IODBTLTOOL;

/* cnc_rdtltool:read tool life management data (tool data1) */
typedef struct exgrp {
    long    grp_no;     /* group number */
    long    opt_grpno;  /* optional group number */
} ODBEXGP;


/*-----------------------------------*/
/* CNC: Tool management data related */
/*-----------------------------------*/

/* cnc_regtool:new registration of tool management data */
/* cnc_rdtool:lead of tool management data */
/* cnc_wrtool:write of tool management data */
typedef struct  iodbtlmng {
    long T_code;
    long life_count;
    long max_life;
    long rest_life;
    unsigned char  life_stat;
    unsigned char  cust_bits;
    unsigned short tool_info;
    short H_code;
    short D_code;
    long spindle_speed;
    long feedrate;
    short magazine;
    short pot;
    short G_code;
    short W_code;
    short gno;
    short grp;
    short edge;
    short org_magazine;
    short org_pot;
    unsigned char edge_num;
    char reserve_c;
    long reserved[2];
    long custom1;
    long custom2;
    long custom3;
    long custom4;
    long custom5;
    long custom6;
    long custom7;
    long custom8;
    long custom9;
    long custom10;
    long custom11;
    long custom12;
    long custom13;
    long custom14;
    long custom15;
    long custom16;
    long custom17;
    long custom18;
    long custom19;
    long custom20;
} IODBTLMNG;

typedef struct  iodbtlmng_f2 {
    long T_code;
    long life_count;
    long max_life;
    long rest_life;
    unsigned char  life_stat;
    unsigned char  cust_bits;
    unsigned short tool_info;
    short H_code;
    short D_code;
    long spindle_speed;
    long feedrate;
    short magazine;
    short pot;
    short G_code;
    short W_code;
    short gno;
    short grp;
    short edge;
    short org_magazine;
    short org_pot;
    unsigned char edge_num;
    char reserve_c;
    long reserved[2];
    long custom1;
    long custom2;
    long custom3;
    long custom4;
    long custom5;
    long custom6;
    long custom7;
    long custom8;
    long custom9;
    long custom10;
    long custom11;
    long custom12;
    long custom13;
    long custom14;
    long custom15;
    long custom16;
    long custom17;
    long custom18;
    long custom19;
    long custom20;
    long custom21;
    long custom22;
    long custom23;
    long custom24;
    long custom25;
    long custom26;
    long custom27;
    long custom28;
    long custom29;
    long custom30;
    long custom31;
    long custom32;
    long custom33;
    long custom34;
    long custom35;
    long custom36;
    long custom37;
    long custom38;
    long custom39;
    long custom40;
} IODBTLMNG_F2;

/* cnc_wrtool2:write of individual data of tool management data */
typedef struct  idbtlm {
    short data_id;
    union {
        unsigned char data1;
        short         data2;
        long          data4;
    } item;
} IDBTLM;

/* cnc_rdtool2:read data */
typedef struct  iodbtlm2 {
    short number;
    short reserve;
    union {
        unsigned char data1;
        short         data2;
        long          data4;
    } item;
} IODBTLM2;

/* cnc_regmagazine:new registration of magazine management data */
/* cnc_rdmagazine:lead of magazine management data */
typedef struct  iodbtlmag {
    short magazine;
    short pot;
    short tool_index;
} IODBTLMAG;

/* cnc_delmagazine:deletion of magazine management data */
typedef struct  iodbtlmag2 {
    short magazine;
    short pot;
} IODBTLMAG2;

/* cnc_rdspdlwaitname */
typedef struct  iodbtlname {
    struct {
        char sp_pos1[5] ;
        char sp_pos2[5] ;
        char sp_pos3[5] ;
        char sp_pos4[5] ;
    } sp_name ;
    struct {
        char wt_pos1[5] ;
        char wt_pos2[5] ;
        char wt_pos3[5] ;
        char wt_pos4[5] ;
    } wt_name ;
} IODBTLSPWTNAME ;

typedef struct  tlmngtlgeom {
    unsigned char l_pot_num;
    unsigned char r_pot_num;
    unsigned char u_pot_num;
    unsigned char d_pot_num;
    unsigned char tl_geom_num;
} IODBTLGEOM;

typedef struct  iodbtlintf {
    short inf_tool[2];
} IODBTLINTF;

typedef struct  iodbtllf {
    long T_code_sum;
    long life_count_sum;
    long rem_life_sum;
    long max_life_sum;
    long notice_life_sum;
    short tools_sum;
    char notice_stat_sum;
    char count_type_sum;
} IODBTLLF;

typedef struct  iodbtl_retype {
    unsigned char type;
    unsigned char data_type;
    char renew;
    char reserve;
}IODBTL_RDTYPE;

typedef struct  iodbtllfd {
    short order;
    short tool_num;
    long life_count;
    long rem_life;
    long max_life;
    long notice_life;
    char life_stat;
    char count_type;
    short reserve;
} IODBTLLFD;

typedef struct  iodbtlmgr_check {
    long T_code;
    short tool_num;
    short reserve;
} IODBTLMGR_CHECK;

typedef struct  iodbtool_date{
    short year;
    short mon;
    short day;
    short hour;
    short min;
    short sec;
}IODBTOOL_DATE;

typedef struct  iodbtool_inhis{
    short tool_no;
    short reserve;
    IODBTOOL_DATE	date;
    IODBTLMNG_F2	tool_f2;
}IODBTOOL_INHIS;

typedef struct  iodbtool_outhis{
    short tool_no;
    short cause;
    IODBTOOL_DATE	date;
    IODBTLMNG_F2	tool_f2;
}IODBTOOL_OUTHIS;

typedef struct  iodbtool_causenme {
    char cause1[8] ;
    char cause2[8] ;
    char cause3[8] ;
    char cause4[8] ;
    char cause5[8] ;
} IODBTOOL_CAUSENME ;

/* Tlmgr sort function */
typedef struct  iodbtlmng_sort {
    short      tl_num;
    short      reserve;
    IODBTLMNG_F2 data;
} IODBTLMNG_SORT;

/* cnc_rdmag_property:read of magazineproperty data */
/* cnc_wrmag_property:write of magazineproperty data */
typedef struct  iodbmagprty {
    short         mag ;
    short         reserve_s ;
    unsigned char mag_info ;
    char          reserve[3] ;
    short         mt_line ;
    short         mt_row ;
    long          cstm[4] ;
} IODBMAGPRTY;

/* cnc_rdpot_property:read of potproperty data */
/* cnc_wrpot_property:write of potproperty data */
typedef struct  iodbpotprty {
    short           tool_no ;
    short           pot_type ;
    unsigned char   pot_info1 ;
    unsigned char   pot_info2 ;
    char            reserve[2] ;
    long            cstm[10] ;
} IODBPOTPRTY;

/* cnc_delmag_property:delete of magazineproperty data */
typedef struct  iodbmagprty2 {
    short           mag ;
    short           reserve ;
} IODBMAGPRTY2;

/* cnc_magazinesrch:Search  magazine management data */
/* cnc_toolsrch    :Search  tool management data */
typedef struct  idbtlm_srchdt {
    IDBTLM	id_info;
    short	srch_cond;
    short	add_cond;
} IDBTLM_SRCHDT;

typedef struct  iodbtlmag_srchinfo {
    IODBTLMAG2	startInfo;
    IODBTLMAG	result;
} IODBTLMAG_SRCHINFO;

/* cnc_tool_srh_free_min_num:Serch free number */
typedef struct  odbtl_free_num {
    short  edge_gp;           /* edge group number  */
    short  ofs_h;             /* ofset number (H)   */
    short  ofs_d;             /* ofset number (D)   */
    short  ofs_g;             /* ofset number (G)   */
    short  ofs_w;             /* ofset number (W)   */
    short  reserve[3];       /* reserve            */
} ODBTL_FREE_NUM;

typedef struct  iodbtlmng_mu_edge_data {
    long life_count;            /*$ tool life count $*/
    long max_life;              /*$ max tool life $*/
    long rest_life;             /*$ tool notice life $*/
    unsigned char  life_stat;   /*$ tool life status $*/
    unsigned char  cust_bits;   /*$ customize bit $*/
    short reserve_s;            /*$ reserve $*/
    short H_code;               /*$ H code $*/
    short D_code;               /*$ D code $*/
    long spindle_speed;         /*$ spindle speed $*/
    long feedrate;              /*$ feedrate speed $*/
    short G_code;               /*$ TG code $*/
    short W_code;               /*$ TW code $*/
    long custom1;               /*$ customize 1 $*/
    long custom2;               /*$ customize 2 $*/
    long custom3;               /*$ customize 3 $*/
    long custom4;               /*$ customize 4 $*/
} IODBTLMNG_MU_EDGE_DATA;

typedef struct  odbtlmng_edge_data {
  union {
    IODBTLMNG_MU_EDGE_DATA edge;/*$ edge data $*/
    IODBTLLF               tllf;/*$ tool life sum edge data $*/
    IODBTLLFD             tllfd;/*$ tool life sum detile edge data $*/
  } u ;
} ODBTLMNG_EDGE_DATA;

typedef struct  odbtlmng_mu_edge {
    short data_no;                      /*$ data no $*/
    short edge_no;                      /*$ edge no $*/
    ODBTLMNG_EDGE_DATA edge_data;   /*$ edge data $*/
} ODBTLMNG_MU_EDGE;

typedef struct  iodbtlmgr_edg {
    short data_no;      /*$ data no $*/
    short edge_no;      /*$ edge no $*/
} IODBTLMGR_EDG;

typedef struct  idbtlmgr_add_info {
   long  dsp_info;      /*$ dsp info $*/
   short data_kind;     /*$ data kind $*/
} IDBTLMGR_ADD_INFO;

typedef struct  iodbtlmgr_page {
    union {
        IODBTLMGR_EDG edg;      /*$ data no and edge no $*/
        struct {
            IODBTLMGR_EDG s_edg;/*$ start data no and start edge no $*/
            IODBTLMGR_EDG e_edg;/*$ end data no and end edge no $*/
        } page;
    } info;
} IODBTLMGR_PAGE;

/*-------------------------------------*/
/* CNC: Operation history data related */
/*-------------------------------------*/

/* cnc_rdophistry:read operation history data */
typedef struct odbhis {
    unsigned short  s_no;   /* start number */
    short   type;           /* dummy */
    unsigned short  e_no;   /* end number */
    union {
        struct {
            short   rec_type;   /* record type */
            short   alm_grp;    /* alarm group */
            short   alm_no;     /* alarm number */
            char    axis_no;    /* axis number */
            char    dummy;
        } rec_alm;
        struct {
            short   rec_type;   /* record type */
            char    key_code;   /* key code */
            char    pw_flag;    /* power on flag */
            char    dummy[4];
        } rec_mdi;
        struct {
            short   rec_type;   /* record type */
            char    sig_name;   /* signal name */
            char    sig_old;    /* old signal bit pattern */
            char    sig_new;    /* new signal bit pattern */
            char    dummy;
            short   sig_no;     /* signal number */
        } rec_sgn;
        struct {
            short   rec_type;   /* record type */
            char    year;       /* year */
            char    month;      /* month */
            char    day;        /* day */
            char    pw_flag;    /* power on flag */
            char    dummy[2];
        } rec_date;
        struct {
            short   rec_type;   /* record flag */
            char    hour;       /* hour */
            char    minute;     /* minute */
            char    second;     /* second */
            char    pw_flag;    /* power on flag */
            char    dummy[2];
        } rec_time;
    } data[10];
} ODBHIS;   /* In case that the number of data is 10 */

/* cnc_rdophistry2:read operation history data */
typedef struct odbophis {
    short   rec_len;    /* length */
    short   rec_type;   /* record type */
    union {
        struct {
            char    key_code;   /* key code */
            char    pw_flag;    /* power on flag */
            short   dummy;
        } rec_mdi;
        struct {
            short   sig_name;   /* signal name */
            short   sig_no;     /* signal number */
            char    sig_old;    /* old signal bit pattern */
            char    sig_new;    /* new signal bit pattern */
            short   dummy;
        } rec_sgn;
        struct {
            short   alm_grp;    /* alarm group */
            short   alm_no;     /* alarm number */
            short   axis_no;    /* axis number */
            short   year;       /* year */
            short   month;      /* month */
            short   day;        /* day */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   dummy;
        } rec_alm;
        struct {
            short   evnt_type;  /* event type */
            short   year;       /* year */
            short   month;      /* month */
            short   day;        /* day */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   dummy;
        } rec_date;
    } u;
} ODBOPHIS;

/* cnc_rdophistry3:read operation history data */
typedef struct odbophis3 {
    short   rec_len;    /* length */
    short   rec_type;   /* record type */
    union {
        struct {
            char    key_code;   /* key code */
            char    pw_flag;    /* power on flag */
            short   pth_no;     /* path index */
        } rec_mdi;
        struct {
            short   sig_name;   /* signal name */
            short   sig_no;     /* signal number */
            char    sig_old;    /* old signal bit pattern */
            char    sig_new;    /* new signal bit pattern */
            short   pmc_no;     /* pmc index */
        } rec_sgn;
        struct {
            short   alm_grp;    /* alarm group */
            short   alm_no;     /* alarm number */
            short   axis_no;    /* axis number */
            short   year;       /* year */
            short   month;      /* month */
            short   day;        /* day */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   pth_no;     /* path index */
        } rec_alm;
        struct {
            short   evnt_type;  /* event type */
            short   year;       /* year */
            short   month;      /* month */
            short   day;        /* day */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   dummy;
        } rec_date;
    } u;
} ODBOPHIS3;

/* cnc_rdophistry4:read operation history data */
typedef struct odbophis4 {/*--*/
    short   rec_len;    /* length */
    short   rec_type;   /* record type */
    union {
        struct {
            char    key_code;   /* key code */
            char    pw_flag;    /* power on flag */
            short   pth_no;     /* path index */
            short   ex_flag;    /* kxternal key flag */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
        } rec_mdi;              /* MDI */
        struct {
            short   sig_name;   /* signal name */
            short   sig_no;     /* signal number */
            char    sig_old;    /* old signal bit pattern */
            char    sig_new;    /* new signal bit pattern */
            short   pmc_no;     /* pmc index */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   dummy;
        } rec_sgn;              /* SIGNAL */
        struct {
            short   alm_grp;    /* alarm group */
            short   alm_no;     /* alarm number */
            short   axis_no;    /* axis number */
            short   year;       /* year */
            short   month;      /* month */
            short   day;        /* day */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   pth_no;     /* path index */
#if 0
            short   sys_alm;    /* sys alarm */
            short   dsp_flg;    /* message dsp flag */
            short   axis_num;   /* axis num */
#endif
        } rec_alm;              /* ALARM */
        struct {
            short   evnt_type;  /* event type */
            short   year;       /* year */
            short   month;      /* month */
            short   day;        /* day */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   dummy;
        } rec_date;             /* DATE */
        struct {
            short   alm_grp;    /* alarm group */
            short   alm_no;     /* alarm number */
            short   axis_no;    /* axis number */
            short   year;       /* year */
            short   month;      /* month */
            short   day;        /* day */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   pth_no;     /* path index */
            short   sys_alm;    /* sys alarm */
            short   dsp_flg;    /* message dsp flag */
            short   axis_num;   /* axis num */
            short   dummy1;
            long    g_modal[10];/* G code Modal */
            char    g_dp[10];   /* #7:1 Block */
                                /* #6乣#0 dp*/
            short   dummy2;
            long    a_modal[10];/* B,D,E,F,H,M,N,O,S,T code Modal */
            char    a_dp[10];   /* #7:1 Block */
                                /* #6乣#0 dp*/
            short   dummy3;
            long    abs_pos[32];/* Abs pos */
            char    abs_dp[32]; /* Abs dp  */
            long    mcn_pos[32];/* Mcn pos */
            char    mcn_dp[32]; /* Mcn dp  */
        } rec_ial;              /* INFO ALARM */
        struct {
            short   alm_grp;    /* alarm group */
            short   alm_no;     /* alarm number */
            short   axis_no;    /* axis number */
            short   year;       /* year */
            short   month;      /* month */
            short   day;        /* day */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   pth_no;     /* path index */
            short   sys_alm;    /* sys alarm */
            short   dsp_flg;    /* message dsp flag */
            short   axis_num;   /* axis num */
volatile    char    alm_msg[64];/* alarm message */
            short   dummy1;
            long    g_modal[10];/* G code Modal */
            char    g_dp[10];   /* #7:1 Block */
                                /* #6乣#0 dp*/
            short   dummy2;
            long    a_modal[10];/* B,D,E,F,H,M,N,O,S,T code Modal */
            char    a_dp[10];   /* #7:1 Block */
                                /* #6乣#0 dp*/
            short   dummy3;
            long    abs_pos[32];/* Abs pos */
            char    abs_dp[32]; /* Abs dp  */
            long    mcn_pos[32];/* Mcn pos */
            char    mcn_dp[32]; /* Mcn dp  */
        } rec_mal;              /* MSG ALARM */
        struct {/*opm*/
            short   dsp_flg;  /* Dysplay flag(ON/OFF) */
            short   om_no;    /* message number */
            short   year;       /* year */
            short   month;      /* month */
            short   day;        /* day */
            short   hour;       /* Hour */
            short   minute;     /* Minute */
            short   second;     /* Second */
            char    ope_msg[256];/* Messege */
        } rec_opm;              /* EXT OPMESSAGE */
        struct {
            short   ofs_grp;    /* Tool offset group */
            short   ofs_no;     /* Tool offset number */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   pth_no;     /* path index */
            long    ofs_old;    /* old data */
            long    ofs_new;    /* new data */
            short   old_dp;     /* old data decimal point */
            short   new_dp;     /* new data decimal point */
        } rec_ofs;              /* TOOL OFS */
        struct {
            short   prm_grp;    /* paramater group */
            short   prm_num;    /* paramater number */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   prm_len;    /* paramater data length */
            long    prm_no;     /* paramater no */
            long    prm_old;    /* old data */
            long    prm_new;    /* new data */
            short   old_dp;     /* old data decimal point */
            short   new_dp;     /* new data decimal point */
        } rec_prm;              /* PARAMATER */
        struct {
            short   ofs_grp;    /* Work offset group */
            short   ofs_no;     /* Work offset number */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   pth_no;     /* path index */
            short   axis_no;    /* path axis num $*/
            short   dummy;
            long    ofs_old;    /* old data */
            long    ofs_new;    /* new data */
            short   old_dp;     /* old data decimal point */
            short   new_dp;     /* new data decimal point */
        } rec_wof;              /* WORK OFS */
        struct {
            short   mac_no;     /* macro val number */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   pth_no;     /* path index */
            short   dummy;
            long    mac_old;    /* old data */
            long    mac_new;    /* new data */
            short   old_dp;     /* old data decimal point */
            short   new_dp;     /* old data decimal point */
        } rec_mac;              /* MACRO VAL */
        struct {
            long    mac_no;     /* macro val number(expand) */
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
            short   pth_no;     /* path index */
            long    mac_old;    /* old data */
            long    mac_new;    /* new data */
            short   old_dp;     /* old data decimal point */
            short   new_dp;     /* old data decimal point */
        } rec_mac2;             /* MACRO VAL2*/
        struct {
            short   scrn_old;   /* old screen nubmer */
            short   scrn_new;   /* new screen nubmer */
            short   dummy;
            short   hour;       /* hour */
            short   minute;     /* minute */
            short   second;     /* second */
        } rec_scrn;             /* SCREEN NUMBER*/
    } u;
} ODBOPHIS4;

/* cnc_rdalmhistry:read alarm history data */
typedef struct odbahis {
    unsigned short  s_no;   /* start number */
    short   type;           /* dummy */
    unsigned short  e_no;   /* end number */
    struct {
        short   dummy;
        short   alm_grp;        /* alarm group */
        short   alm_no;         /* alarm number */
        char    axis_no;        /* axis number */
        char    year;           /* year */
        char    month;          /* month */
        char    day;            /* day */
        char    hour;           /* hour */
        char    minute;         /* minute */
        char    second;         /* second */
        char    dummy2;
        short   len_msg;        /* alarm message length */
        char    alm_msg[32];    /* alarm message */
    } alm_his[10];
} ODBAHIS;  /* In case that the number of data is 10 */

/* cnc_rdalmhistry2:read alarm history data */
typedef struct odbahis2 {
    unsigned short  s_no;   /* start number */
    unsigned short  e_no;   /* end number */
    struct {
        short   alm_grp;        /* alarm group */
        short   alm_no;         /* alarm number */
        short   axis_no;        /* axis number */
        short   year;           /* year */
        short   month;          /* month */
        short   day;            /* day */
        short   hour;           /* hour */
        short   minute;         /* minute */
        short   second;         /* second */
        short   len_msg;        /* alarm message length */
        char    alm_msg[32];    /* alarm message */
    } alm_his[10];
} ODBAHIS2;  /* In case that the number of data is 10 */

/* cnc_rdalmhistry3:read alarm history data */
typedef struct odbahis3 {
    unsigned short  s_no;   /* start number */
    unsigned short  e_no;   /* end number */
    struct {
        short   alm_grp;        /* alarm group */
        short   alm_no;         /* alarm number */
        short   axis_no;        /* axis number */
        short   year;           /* year */
        short   month;          /* month */
        short   day;            /* day */
        short   hour;           /* hour */
        short   minute;         /* minute */
        short   second;         /* second */
        short   len_msg;        /* alarm message length */
        short   pth_no;         /* path index */
        short   dummy;
        char    alm_msg[32];    /* alarm message */
    } alm_his[10];
} ODBAHIS3;  /* In case that the number of data is 10 */

/* cnc_rdalmhistry4:read alarm history data */
typedef struct odbahis4 {
    unsigned short  s_no;   /* start number */
    unsigned short  e_no;   /* end number */
    struct {
        short   alm_grp;        /* alarm group */
        short   alm_no;         /* alarm number */
        short   axis_no;        /* axis number */
        short   year;           /* year */
        short   month;          /* month */
        short   day;            /* day */
        short   hour;           /* hour */
        short   minute;         /* minute */
        short   second;         /* second */
        short   len_msg;        /* alarm message length */
        short   pth_no;         /* path index */
        short   dummy;
        char    alm_msg[64];    /* alarm message */
    } alm_his[10];
} ODBAHIS4;  /* In case that the number of data is 10 */

/* cnc_rdalmhistry5:read alarm history data */
typedef struct odbahis5 {
    unsigned short  s_no;   /* start number */
    unsigned short  e_no;   /* end number */
    struct {
        short   alm_grp;        /* alarm group */
        short   alm_no;         /* alarm number */
        short   axis_no;        /* axis number */
        short   year;           /* year */
        short   month;          /* month */
        short   day;            /* day */
        short   hour;           /* hour */
        short   minute;         /* minute */
        short   second;         /* second */
        short   len_msg;        /* alarm message length */
        short   pth_no;         /* path index */
/*addalm--<*/
        short   sys_alm;        /* sys alarm */
        short   dsp_flg;        /* message dsp flag */
        short   axis_num;    /* sum axis num */
        char    alm_msg[64]; /* alarm message */
        long    g_modal[10]; /* G code Modal */
        char    g_dp[10];    /* #7:1 Block */
                             /* #6乣#0 dp*/
        short   dummy1;
        long    a_modal[10]; /* B,D,E,F,H,M,N,O,S,T code Modal */
        char    a_dp[10];    /* #7:1 Block */
                             /* #6乣#0 dp*/
        short   dummy2;
        long    abs_pos[32]; /* Abs pos */
        char    abs_dp[32];  /* Abs dp */
        long    mcn_pos[32]; /* Mcn pos */
        char    mcn_dp[32];  /* Mcn dp */
/*addalm-->*/
    } alm_his[10];
} ODBAHIS5;  /* In case that the number of data is 10 */

/* cnc_rdomhistry2:read operater message history data */
typedef struct odbmhis2 {
    unsigned short  s_no;   /* start number */
    unsigned short  e_no;   /* end number */
    struct {
        short   dsp_flg;  /* Dysplay flag(ON/OFF) */
        short   om_no;    /* operater message number */
        short   year;     /* year */
        short   month;    /* month */
        short   day;      /* day */
        short   hour;     /* Hour */
        short   minute;   /* Minute */
        short   second;   /* Second */
        char    ope_msg[256];/* Messege */
    } opm_his[10];
} ODBOMHIS2;  /* In case that the number of data is 10 */

/* cnc_rdhissgnl:read signals related operation history */
/* cnc_wrhissgnl:write signals related operation history */
typedef struct iodbsig {
    short   datano; /* dummy */
    short   type;   /* dummy */
    struct {
        short   ent_no;     /* entry number */
        short   sig_no;     /* signal number */
        char    sig_name;   /* signal name */
        char    mask_pat;   /* signal mask pattern */
    } data[20];
} IODBSIG;  /* In case that the number of data is 20 */

/* cnc_rdhissgnl2:read signals related operation history 2 */
/* cnc_wrhissgnl2:write signals related operation history 2 */
typedef struct iodbsig2 {
    short   datano; /* dummy */
    short   type;   /* dummy */
    struct {
        short   ent_no;     /* entry number */
        short   sig_no;     /* signal number */
        char    sig_name;   /* signal name */
        char    mask_pat;   /* signal mask pattern */
    } data[45];
} IODBSIG2;

/* cnc_rdhissgnl3:read signals related operation history */
/* cnc_wrhissgnl3:write signals related operation history */
typedef struct iodbsig3 {
    short   datano; /* dummy */
    short   type;   /* dummy */
    struct {
        short   ent_no;     /* entry number */
        short   pmc_no;     /* PMC number */
        short   sig_no;     /* signal number */
        char    sig_name;   /* signal name */
        char    mask_pat;   /* signal mask pattern */
    } data[60];
} IODBSIG3;  /* In case that the number of data is 60 */


/*--------------------------------------*/
/* CNC: 3 dimensional interferect check */
/*--------------------------------------*/
/* cnc_rdtdiinfo:read 3 dimensional interferect check information */
typedef struct odbinf {
    unsigned short  max_shape_num ;     /* maximum shape number */
    unsigned short  max_tool_num ;      /* maximum tool number */
    unsigned short  max_holder_num ;    /* maximum tool holder number */
    unsigned short  max_object_num ;    /* maximum object number */
    unsigned short  max_element_num ;   /* maximum element number */
    unsigned short  max_holder_shpnum ; /* maximum each tool holder shape number */
    unsigned short  max_object_shpnum ; /* maximum each object shape number */
    short           reserve ;           /* reserve */
} ODBINF ;

/* cnc_rdtdinamesetting:read name setting */
/* cnc_wrtdinamesetting:write name setting */
typedef struct odbnme {
    short           ob_type ;   /* object type */
    unsigned short  obj_no ;    /* object number */
    unsigned short  nme_no ;    /* name number */
    unsigned short  suffix  ;   /* suffix */
    char            name[12] ;  /* optional name */
} ODBNME ;

/* cnc_rdtdidispsetting:read display setting */
/* cnc_wrtdidispsetting:write display setting */
typedef struct odbdst {
    short           ob_type ;   /* object type */
    unsigned short  obj_no ;    /* object number */
    unsigned char   shp_disp ;  /* figure screen */
    unsigned char   mva_disp ;  /* move axis screen */
} ODBDST ;

/* cnc_rdtdishapedata:read shape data */
/* cnc_wrtdishapedata:write shape data */
typedef struct odbshp {
    short           ob_type ;       /* object type */
    unsigned short  obj_no ;        /* object number */
    unsigned short  shp_no ;        /* shape number */
    unsigned short  fig_ele[10] ;    /* figure element 1乣6 */
    long            ref_pos[3] ;    /* reference position */
    long            tool_ref[3] ;   /* tool reference position */
    long            tool_dir[3] ;   /* tool direction */
    long            ref_ang1 ;      /* reference angle1 */
    long            ref_ang2 ;      /* reference angle2 */
    unsigned char   n_unit ;        /* numetrical unit */
} ODBSHP ;

/* cnc_rdtdicubedata:read cube data */
/* cnc_wrtdicubedata:write cube data */
typedef struct odbcub {
    long            ref_vtx[3] ;      /* reference vertex */
    long            adj_vtx1[3] ;     /* adjacence vertex1 */
    long            adj_vtx2[3] ;     /* adjacence vertex2 */
    long            adj_vtx3[3] ;     /* adjacence vertex3 */
    unsigned char   n_unit ;          /* numetrical unit */
    char   			cb_form ;         /* cube form flag */
} ODBCUB ;

/* cnc_rdtdicubeinfo:read cube infomation */
typedef struct odbcbi {
    unsigned short  cb_no ;   /* name setting */
    ODBNME          nme_set ;   /* name setting */
    unsigned char   shp_no ;    /* shape number */
    char            cd_form ;   /* cube form flag */
} ODBCBI ;

/* cnc_rdtdimoveaxis:read move axis infomation */
/* cnc_wrtdimoveaxis:write move axis infomation */
typedef struct odbmva {
    unsigned short  sync_obj ;      /* synchronized object */
    unsigned short  path ;          /* path */

    struct {
        unsigned short  axis_no ;   /* axis number */
        unsigned short  mov_dir ;   /* moving direction */
    } lin_ax[3] ;                   /* line axis(1乣3) */

    struct {
        unsigned short  axis_no ;   /* axis number */
        unsigned short  c_ax_dir ;  /* rotating direction */
        long            c_pos[3] ;  /* rotating position */
        long            inc_ang ;   /* inclination angle */
        unsigned short  rot_dir ;   /* rotational direction */
        short           reserve ;   /* reserve */
    } rot_ax[2] ;                   /* rotating axis(1乣2) */

    struct {
        unsigned short  master ;    /* master rotating axis */
        unsigned short  slave ;     /* slave rotating axis */
    } rot_ele[6] ;                  /* rotating element(1乣6) */
} ODBMVA ;

/* cnc_rdtdicrntshapeinf:read current shape data */
typedef struct odbcrntshp {
    long            fig_type ;
    long 			reserve;
    union {
        struct {
            double	base_pos[3] ;
            double	vect1[3] ;
            double	vect2[3] ;
            double	vect3[3] ;
        } par ;
        struct {
            double	vect1[3] ;
            double	vect2[3] ;
            double	v ;
        } cyl ;
        struct {
            double	point[3] ;
            double	vect[3] ;
        } pln ;
    } fig ;
    char   			cb_form ;
    char   			reserve2[7] ;
} ODBCRNTSHP ;

/* cnc_rdtdicylinderdata:read cylinder data */
/* cnc_wrtdicylinderdata:write cylinder data */
typedef struct odbcyl {
    long            sta_pnt[3] ;      /* start point */
    long            end_pnt[3] ;      /* end point */
    long            radius ;          /* radius */
    unsigned char   n_unit ;          /* numetrical unit */
    char            cb_form ;         /* figure form flag */
} ODBCYL ;

/* cnc_rdtdiplanedata:read plane data */
/* cnc_wrtdiplanedata:write plane data */
typedef struct odbpln {
    long            point[3] ;        /* optional point on plane */
    long            vect[3] ;         /* vertical vector */
    unsigned char   n_unit ;          /* numetrical unit */
    char            cb_form ;         /* figure form flag */
} ODBPLN ;

/* cnc_rdtdifiguredata:read figure data */
/* cnc_wrtdifiguredata:write figure data */
typedef struct odbfig {
    long            fig_type ;        /* figure type */
    union {
        struct {
            long    ref_vtx[3] ;      /* reference vertex */
            long    adj_vtx1[3] ;     /* adjacence vertex1 */
            long    adj_vtx2[3] ;     /* adjacence vertex2 */
            long    adj_vtx3[3] ;     /* adjacence vertex3 */
        } par ;
        struct {
            long    sta_pnt[3] ;      /* start point */
            long    end_pnt[3] ;      /* end point */
            long    radius ;          /* radius */
        } cyl ;
        struct {
            long    point[3] ;        /* optional point on plane */
            long    vect[3] ;         /* vertical vector */
        } pln ;
    } fig ;
    unsigned short  fig_no ;          /* figure number */
    unsigned char   n_unit ;          /* numetrical unit */
    char            cb_form ;         /* figure form flag */
} ODBFIG ;

/*-------------*/
/* CNC: Others */
/*-------------*/

/* cnc_sysinfo:read CNC system information */
#if !defined (FS15BD)
typedef struct odbsys {
    short   addinfo ;       /* additional information  */
    short   max_axis ;      /* maximum axis number */
    char    cnc_type[2] ;   /* cnc type <ascii char> */
    char    mt_type[2] ;    /* M/T/TT <ascii char> */
    char    series[4] ;     /* series NO. <ascii char> */
    char    version[4] ;    /* version NO.<ascii char> */
    char    axes[2] ;       /* axis number<ascii char> */
} ODBSYS ;
#else
typedef struct odbsys {
    short   dummy ;         /* dummy                   */
    char    max_axis[2] ;   /* maximum axis number     */
    char    cnc_type[2] ;   /* cnc type <ascii char> */
    char    mt_type[2] ;    /* M/T/TT <ascii char> */
    char    series[4] ;     /* series NO. <ascii char> */
    char    version[4] ;    /* version NO.<ascii char> */
    char    axes[2] ;       /* axis number<ascii char> */
} ODBSYS ;
#endif

typedef struct _odbsramif {
    long    protect;        /* protective state of File SRAM */
    long    size;           /* size of File SRAM */
} ODBSRAMIF;

typedef struct _odbsramif2 {
    long            protect;    /* protective state of File SRAM */
    unsigned long   adrs;       /* address of File SRAM */
    long            size;       /* size of File SRAM */
} ODBSRAMIF2;

/* cnc_statinfo:read CNC status information */

#if defined (FS15D) || defined (FS15BD)
typedef struct odbst {
    short dummy[2];     /* dummy                    */
    short aut;          /* selected automatic mode  */
    short manual;       /* selected manual mode     */
    short run;          /* running status           */
    short edit;         /* editting status          */
    short motion;       /* axis, dwell status       */
    short mstb;         /* m, s, t, b status        */
    short emergency;    /* emergency stop status    */
    short write;        /* writting status          */
    short labelskip;    /* label skip status        */
    short alarm;        /* alarm status             */
    short warning;      /* warning status           */
    short battery;      /* battery status           */
} ODBST ;

#elif defined (FS16WD)
typedef struct odbst {
    short   dummy[2] ;  /* dummy */
    short   aut ;       /* selected automatic mode */
    short   run ;       /* running status */
    short   motion ;    /* axis, dwell status */
    short   mstb ;      /* m, s, t, b status */
    short   emergency ; /* emergency stop status */
    short   alarm ;     /* alarm status */
    short   edit ;      /* editting status */
} ODBST ;

#else
typedef struct odbst {
    short   hdck ;      /* handl retrace status */
    short   tmmode ;    /* T/M mode */
    short   aut ;       /* selected automatic mode */
    short   run ;       /* running status */
    short   motion ;    /* axis, dwell status */
    short   mstb ;      /* m, s, t, b status */
    short   emergency ; /* emergency stop status */
    short   alarm ;     /* alarm status */
    short   edit ;      /* editting status */
} ODBST ;
#endif

/* cnc_statinfo2:read CNC status information 2 */
typedef struct odbst2 {
    short   hdck ;      /* handl retrace status */
    short   tmmode ;    /* T/M mode */
    short   aut ;       /* selected automatic mode */
    short   run ;       /* running status */
    short   motion ;    /* axis, dwell status */
    short   mstb ;      /* m, s, t, b status */
    short   emergency ; /* emergency stop status */
    short   alarm ;     /* alarm status */
    short   edit ;      /* editting status */
    short   warning ;   /* warning status */
    short   o3dchk;     /* o3dchk status */
    short   ext_opt;    /* option */
    short   restart;    /* State of edit when SBK */
} ODBST2 ;

/* cnc_sramstat:After setting the option, The state of SRAM is acquired.*/
typedef struct odbopmsg {
    short   msg_kind;   /* state of message */
    char    msg[30];    /* message string   */
} ODBOPMSG ;

/* cnc_sramstatus:After setting the option, The state of SRAM is acquired.*/
typedef struct odbsramstat {
    short   msg_kind;   /* state of message */
    char    msg[64];    /* message string   */
} ODBSRAMSTAT ;

/* read DMG Netservice status information */
typedef struct out_statinfo_dmg {
     short  dummy[1];     /* 枹巊梡                       */
     short  dmg;          /* DMG Netservice僗僥乕僞僗忣曬 */
     short  dummy1[7];    /* 枹巊梡                       */
} OUT_STATINF_DMG ;

/* cnc_alarm:read alarm status */
typedef struct odbalm {
    short   dummy[2] ;  /* dummy */
    short   data ;      /* alarm status */
} ODBALM ;

/* cnc_rdalminfo:read alarm information */
typedef struct alminfo {
#if MAX_AXIS > 16
    union {
        struct {
            struct {
                long    axis ;
                short   alm_no ;
            } alm[5] ;
            long    data_end ;
        } alm1 ;
        struct {
            struct {
                long    axis ;
                short   alm_no ;
                short   msg_len ;
                char    alm_msg[32] ;
            } alm[5] ;
            long    data_end ;
        }alm2 ;
    } u ;
#else
    union {
        struct {
            struct {
                short   axis ;
                short   alm_no ;
            } alm[5] ;
            short   data_end ;
        } alm1 ;
        struct {
            struct {
                short   axis ;
                short   alm_no ;
                short   msg_len ;
                char    alm_msg[32] ;
            } alm[5] ;
            short   data_end ;
        }alm2 ;
    } u ;
#endif
} ALMINFO ; /* In case that the number of alarm is 5 */

/* cnc_rdalminfo2:read alarm information */
typedef struct alminfo2 {
    union {
        struct {
            struct {
                short   axis ;
                short   alm_no ;
            } alm[5] ;
            short   data_end ;
        } alm1 ;
        struct {
            struct {
                short   axis ;
                short   alm_no ;
                short   msg_len ;
                char    alm_msg[34] ;
            } alm[5] ;
            short   data_end ;
        }alm2 ;
    } u ;
} ALMINFO2 ; /* In case that the number of alarm is 5 */

/* cnc_rdalmmsg:read alarm messages */
typedef struct odbalmmsg {
    long    alm_no;
    short   type;
    short   axis;
    short   dummy;
    short   msg_len;
    char    alm_msg[32];
} ODBALMMSG ;

typedef struct odbalmmsg2 {
    long    alm_no;
    short   type;
    short   axis;
    short   dummy;
    short   msg_len;
    char    alm_msg[64];
} ODBALMMSG2 ;

typedef struct odbalmmsg3 {
    long    alm_no;
    short   type;
    short   axis;
    short   dummy;
    short   msg_len;
    char    alm_msg[256];
} ODBALMMSG3 ;

/* cnc_modal:read modal data */
#if defined (HSSB_LIB) && defined (FS16WD)
typedef struct odbmdl {
    short   datano;
    short   type;
    union {
        char    g_data;
        char    g_rdata[12];
        char    g_1shot;
        struct {
            long    aux_data;
            char    flag1;
            char    flag2;
        }aux;
        struct {
            long    aux_data;
            char    flag1;
            char    flag2;
        }raux1[25];
    }modal;
} ODBMDL ;
#else
typedef struct odbmdl {
    short   datano;
    short   type;
    union {
        char    g_data;
        char    g_rdata[35];
        char    g_1shot[4];
        struct {
            long    aux_data;
            char    flag1;
            char    flag2;
        }aux;
        struct {
            long    aux_data;
            char    flag1;
            char    flag2;
        }raux1[27];
        struct {
            long    aux_data;
            char    flag1;
            char    flag2;
        }raux2[MAX_AXIS];
    }modal;
} ODBMDL ;
#endif

/* cnc_rdgcode: read G code */
typedef struct odbgcd {
    short	group ;
    short	flag ;
    char	code[8] ;
} ODBGCD;

/* cnc_rdcommand: read command value */
typedef struct odbcmd {
    char	adrs ;
    char	num ;
    short	flag ;
    long	cmd_val ;
    long	dec_val ;
} ODBCMD;

/* cnc_diagnoss:read diagnosis data */
/* cnc_diagnosr:read diagnosis data(area specified) */
typedef struct realdgn {
        long   dgn_val;     /* data of real diagnoss */
        long   dec_val;     /* decimal point of real diagnoss */
} REALDGN ;

#if !defined (HSSB_LIB) || defined (FS30D) || defined (FS15D) || defined (FS0IDD) /* Ethernet & FS30i & FS15i & FS0i-D */
typedef struct odbdgn {
    short   datano ;    /* data number */
    short   type ;      /* axis number */
    union {
        char    cdata ; /* diagnosis data */
        short   idata ;
        long    ldata ;
        REALDGN rdata ;
        char    cdatas[MAX_AXIS] ;
        short   idatas[MAX_AXIS] ;
        long    ldatas[MAX_AXIS] ;
        REALDGN rdatas[MAX_AXIS] ;
    } u ;
} ODBDGN ;

#else

typedef struct odbdgn {
    short   datano ;    /* data number */
    short   type ;      /* axis number */
    union {
        char    cdata ; /* diagnosis data */
        short   idata ;
        long    ldata ;
        char    cdatas[MAX_AXIS] ;
        short   idatas[MAX_AXIS] ;
        long    ldatas[MAX_AXIS] ;
    } u ;
} ODBDGN ;
#endif

#if defined (FS15BD)

/* cnc_adcnv:read A/D conversion data */
typedef struct odbad {
    short   datano ;    /* input analog voltage type */
    short   type ;      /* analog voltage type */
    char    data ;      /* digital voltage data */
} ODBAD ;

#else

/* cnc_adcnv:read A/D conversion data */
typedef struct odbad {
    short   datano ;    /* input analog voltage type */
    short   type ;      /* analog voltage type */
    short   data ;      /* digital voltage data */
} ODBAD ;

#endif

#if defined (FS15D) || defined (FS15BD)

/* cnc_rdopmsg:read operator's message */
typedef struct msg {
    short datano ;     /* operator's message number */
    short type ;       /* operator's message type   */
    short char_num ;   /* message string length   */
    char  data[129] ;  /* operator's message string */
} OPMSG ;               /* In case that the data length is 129 */

#else	/* FS15D */

/* cnc_rdopmsg:read operator's message */
typedef struct msg {
    short   datano ;    /* operator's message number */
    short   type ;      /* operator's message type */
    short   char_num ;  /* message string length */
    char    data[256] ; /* operator's message string */
} OPMSG ;   /* In case that the data length is 256 */

#endif	/* FS15D */

/* cnc_rdopmsg2:read operator's message */
typedef struct opmsg2 {
    short   datano ;    /* operator's message number */
    short   type ;      /* operator's message type */
    short   char_num ;  /* message string length */
    char    data[64] ;  /* operator's message string */
} OPMSG2 ;   /* In case that the data length is 64 */

/* cnc_rdopmsg3:read operator's message */
typedef struct opmsg3 {
    short   datano ;    /* operator's message number */
    short   type ;      /* operator's message type */
    short   char_num ;  /* message string length */
    char    data[256] ; /* operator's message string */
} OPMSG3 ;   /* In case that the data length is 256 */

/* cnc_rdopmsgmps:read operator message for MAPPS */
typedef struct _opmsgmps {
    short datano;
    short type;
    short char_num;
    char data[256];
} OPMSGMPS;

/* cnc_sysconfig:read CNC configuration information */
#if defined (FS15BD)
typedef struct odbsysc {
    char        slot_no_p[16];
    char        slot_no_l[16];
    short       mod_id[16];
    short       soft_id[16];
    char        s_series[16][5];
    char        s_version[16][5];
    char        sys_id[16];
    char        sys_ser[5];
    char        sys_ver[5];
    char        basic_ver[5];
    char        opta1_ver[5];
    char        opta2_ver[5];
    char        opta3_ver[5];
    char        opta4_ver[5];
    char        sub_ver[5];
    char        opts1_ver[5];
    char        tcopt_ver[5];
    char        axis_ser[5];
    char        axis_ver[5];
    char        help_ser[5];
    char        help_ver[5];
    char        boot_ser[5];
    char        boot_ver[5];
    char        servo_ser[5];
    char        servo_ver[5];
    char        cmpl_ser[5];
    char        cmpl_ver[5];
    char        sral1_ser[5];
    char        sral1_ver[5];
    char        sral2_ser[5];
    char        sral2_ver[5];
    char        sral3_ser[5];
    char        sral3_ver[5];
    char        sral4_ser[5];
    char        sral4_ver[5];
    short       pcb_info[20];
    short       pcb_note[20][16];
} ODBSYSC ;

#elif defined (PMD)
typedef struct odbsysc {
     char    slot_no_p[16];	/* not used */
     char    slot_no_l[16];	/* not used */
     short   mod_id[16];	/* not used */
     short   soft_id[16];	/* software ID */
     char    s_series[16][5];	/* software series */
     char    s_version[16][5];	/* software version */
     char    dummy[16];		/* dummy */
     short   m_rom;		/* not used */
     short   s_rom;		/* not used */
     char    svo_soft[8];	/* series and version of searvo software */
     char    pmc_soft[6];	/* series and version of PMC management software */
     char    lad_soft[6];	/* series and version of Ladder software */
     char    mcr_soft[8];	/* series and version of a macro executor */
     char    spl1_soft[6];	/* not used */
     char    spl2_soft[6];	/* not used */
     short   frmmin;		/* capacity of FROM module */
     short   drmmin;		/* capacity of DRAM module */
     short   srmmin;		/* capacity of added SRAM module */
     short   pmcmin;		/* type of PMC module */
     short   sv1min;		/* presence or absence of a servo module 1,2 */
     short   sv3min;		/* presence or absence of a servo module 3,4 */
     short   sv5min;		/* presence or absence of a servo module 5,6 */
     short   sicmin;		/* presence or absence of SIC */
     short   posmin;		/* presence or absence of a position LSI */
     short   submin;		/* information of sub-board */
     short   hdiio;		/* presence or absence of an LSI for high-speed skip(I/O card) */
     short   dummy2[32];	/* dummy */
} ODBSYSC;

#else
typedef struct odbsysc {
    char    slot_no_p[16];
    char    slot_no_l[16];
    short   mod_id[16];
    short   soft_id[16];
    char    s_series[16][5];
    char    s_version[16][5];
    char    dummy[16];
    short   m_rom;
    short   s_rom;
    char    svo_soft[8];
    char    pmc_soft[6];
    char    lad_soft[6];
    char    mcr_soft[8];
    char    spl1_soft[6];
    char    spl2_soft[6];
    short   frmmin;
    short   drmmin;
    short   srmmin;
    short   pmcmin;
    short   crtmin;
    short   sv1min;
    short   sv3min;
    short   sicmin;
    short   posmin;
    short   drmmrc;
    short   drmarc;
    short   pmcmrc;
    short   dmaarc;
    short   iopt;
    short   hdiio;
    short   frmsub;
    short   drmsub;
    short   srmsub;
    short   sv5sub;
    short   sv7sub;
    short   sicsub;
    short   possub;
    short   hamsub;
    short   gm2gr1;
    short   crtgr2;
    short   gm1gr2;
    short   gm2gr2;
    short   cmmrb;
    short   sv5axs;
    short   sv7axs;
    short   sicaxs;
    short   posaxs;
    short   hanaxs;
    short   romr64;
    short   srmr64;
    short   dr1r64;
    short   dr2r64;
    short   iopio2;
    short   hdiio2;
    short   cmmrb2;
    short   romfap;
    short   srmfap;
    short   drmfap;
} ODBSYSC ;
#endif

/* cnc_rdprstrinfo:read program restart information */
typedef struct odbprs {
    short   datano;         /* dummy */
    short   type;           /* dummy */
    short   data_info[5];   /* data setting information */
    long    rstr_bc;        /* block counter */
    long    rstr_m[35];     /* M code value */
    long    rstr_t[2];      /* T code value */
    long    rstr_s;         /* S code value */
    long    rstr_b;         /* B code value */
    long    dest[MAX_AXIS]; /* program re-start position */
    long    dist[MAX_AXIS]; /* program re-start distance */
} ODBPRS;

/* cnc_rdprstrinfo:read program restart information */
typedef struct odbprsm {
    short   datano;          /* dummy */
    short   type;            /* dummy */
    short   data_info[5];    /* data setting information */
    long    rstr_bc;         /* block counter */
    long    rstr_m[35];      /* M code value */
    long    rstr_t[2];       /* T code value */
    long    rstr_s;          /* S code value */
    long    rstr_b;          /* B code value */
    long    dest[32];        /* program re-start position */
    long    dist[32];        /* program re-start distance */
} ODBPRSM;

#if defined (FS15D) || defined (FS15BD)

/* cnc_rdopnlsgnl:read output signal image of software operator's panel */
/* cnc_wropnlsgnl:write output signal of software operator's panel */
typedef struct iodbsgnl {
    short   datano;     /* dummy */
    short   type;       /* data select flag */
    short   mode;       /* mode signal */
    short   hndl_ax;    /* Manual handle feed axis selection signal */
    short   hndl_mv;    /* Manual handle feed travel distance selection signal */
    short   rpd_ovrd;   /* rapid traverse override signal */
    short   jog_ovrd;   /* manual feedrate override signal */
    short   feed_ovrd;  /* feedrate override signal */
    short   spdl_ovrd;  /* spindle override signal */
    short   blck_del;   /* optional block skip signal */
    short   sngl_blck;  /* single block signal */
    short   machn_lock; /* machine lock signal */
    short   dry_run;    /* dry run signal */
    short   mem_prtct;  /* memory protection signal */
    short   feed_hold;  /* automatic operation halt signal */
    short   manual_rpd; /* manual rapid traverse selection signal */
    short   dummy[2];   /* (not used) */
} IODBSGNL;

#else	/* FS15D */

/* cnc_rdopnlsgnl:read output signal image of software operator's panel */
/* cnc_wropnlsgnl:write output signal of software operator's panel */
typedef struct iodbsgnl {
    short   datano;     /* dummy */
    short   type;       /* data select flag */
    short   mode;       /* mode signal */
    short   hndl_ax;    /* Manual handle feed axis selection signal */
    short   hndl_mv;    /* Manual handle feed travel distance selection signal */
    short   rpd_ovrd;   /* rapid traverse override signal */
    short   jog_ovrd;   /* manual feedrate override signal */
    short   feed_ovrd;  /* feedrate override signal */
    short   spdl_ovrd;  /* (not used) */
    short   blck_del;   /* optional block skip signal */
    short   sngl_blck;  /* single block signal */
    short   machn_lock; /* machine lock signal */
    short   dry_run;    /* dry run signal */
    short   mem_prtct;  /* memory protection signal */
    short   feed_hold;  /* automatic operation halt signal */
} IODBSGNL;

#endif	/* FS15D */

/* cnc_rdopnlgnrl:read general signal image of software operator's panel */
/* cnc_wropnlgnrl:write general signal image of software operator's panel */
typedef struct iodbgnrl {
    short   datano; /* dummy */
    short   type;   /* data select flag */
    char    sgnal;  /* general signal */
} IODBGNRL;

/* cnc_rdopnlgnrl2:read general signal image of software operator's panel(2) */
/* cnc_wropnlgnrl2:write general signal image of software operator's panel(2) */
typedef struct iodbgnrl2 {
    short   datano; /* dummy */
    short   type;   /* data select flag */
    short   sgnal;  /* general signal */
} IODBGNRL2;

/* cnc_rdopnlgsname:read general signal name of software operator's panel */
/* cnc_wropnlgsname:write general signal name of software operator's panel*/
typedef struct iodbrdna {
    short   datano;         /* dummy */
    short   type;           /* data select flag */
    char    sgnl1_name[9];  /* general signal 1 name */
    char    sgnl2_name[9];  /* general signal 2 name */
    char    sgnl3_name[9];  /* general signal 3 name */
    char    sgnl4_name[9];  /* general signal 4 name */
    char    sgnl5_name[9];  /* general signal 5 name */
    char    sgnl6_name[9];  /* general signal 6 name */
    char    sgnl7_name[9];  /* general signal 7 name */
    char    sgnl8_name[9];  /* general signal 8 name */
} IODBRDNA;

/* cnc_rdopnlgsname2:read general signal name of software operator's panel(2) */
/* cnc_wropnlgsname2:write general signal name of software operator's panel(2)*/
typedef struct iodbrdna2 {
    short   datano;         /* dummy */
    short   type;           /* data select flag */
    char    sgnl1_name[9];  /* general signal 1 name */
    char    sgnl2_name[9];  /* general signal 2 name */
    char    sgnl3_name[9];  /* general signal 3 name */
    char    sgnl4_name[9];  /* general signal 4 name */
    char    sgnl5_name[9];  /* general signal 5 name */
    char    sgnl6_name[9];  /* general signal 6 name */
    char    sgnl7_name[9];  /* general signal 7 name */
    char    sgnl8_name[9];  /* general signal 8 name */
    char    sgnl9_name[9];  /* general signal 9 name */
    char    sgnl10_name[9]; /* general signal 10 name */
    char    sgnl11_name[9]; /* general signal 11 name */
    char    sgnl12_name[9]; /* general signal 12 name */
    char    sgnl13_name[9]; /* general signal 13 name */
    char    sgnl14_name[9]; /* general signal 14 name */
    char    sgnl15_name[9]; /* general signal 15 name */
    char    sgnl16_name[9]; /* general signal 16 name */
} IODBRDNA2;

/* cnc_getdtailerr:get detail error */
typedef struct odberr {
    short   err_no ;
    short   err_dtno ;
} ODBERR ;

/* cnc_rdparainfo:read informations of CNC parameter */
typedef struct odbparaif {
    unsigned short  info_no ;
    short   prev_no ;
    short   next_no ;
    struct {
        short   prm_no ;
        short   prm_type ;
    } info[10] ;    /* In case that the number of data is 10 */
} ODBPARAIF ;

/* cnc_rdsetinfo:read informations of CNC setting data */
typedef struct odbsetif {
    unsigned short  info_no ;
    short   prev_no ;
    short   next_no ;
    struct {
        short   set_no ;
        short   set_type ;
    } info[10] ;    /* In case that the number of data is 10 */
} ODBSETIF ;

/* cnc_rddiaginfo:read informations of CNC diagnose data */
typedef struct odbdiagif {
    unsigned short  info_no ;
    short   prev_no ;
    short   next_no ;
    struct {
        short   diag_no ;
        short   diag_type ;
    } info[10] ;    /* In case that the number of data is 10 */
} ODBDIAGIF ;

/* cnc_rdparainfo2:read informations of CNC parameter(2) */
/* cnc_rdparainfo3:read informations of CNC parameter(3) */
/* cnc_rdsetinfo2:read informations of CNC setting data(2) */
/* cnc_rddiaginfo2:read informations of CNC diagnose data(2) */
typedef struct odbparaif2 {
    short   prm_no;         /* parameter number */
    short   size;           /* size */
    short   array;          /* array type */
    short   unit;           /* unit */
    short   dim;            /* dimension */
    short   input;          /* input type */
    short   display;        /* display infomation */
    short   others;         /* others */
} ODBPARAIF2 ;

/* cnc_rdparanum:read maximum, minimum and total number of CNC parameter */
typedef struct odbparanum {
    unsigned short  para_min ;
    unsigned short  para_max ;
    unsigned short  total_no ;
} ODBPARANUM ;

/* cnc_rdsetnum:read maximum, minimum and total number of CNC setting data */
typedef struct odbsetnum {
    unsigned short  set_min ;
    unsigned short  set_max ;
    unsigned short  total_no ;
} ODBSETNUM ;

/* cnc_rddiagnum:read maximum, minimum and total number of CNC diagnose data */
typedef struct odbdiagnum {
    unsigned short  diag_min ;
    unsigned short  diag_max ;
    unsigned short  total_no ;
} ODBDIAGNUM ;

/* cnc_rdfrominfo:read F-ROM information on CNC  */
typedef struct odbfinfo {
    char  slotname[12];      /* Slot Name */
    long  fromnum;           /* Number of F-ROM SYSTEM data */
    struct {
        char  sysname[12];   /* F-ROM SYSTEM data Name */
        long  fromsize;      /* F-ROM Size */
    } info[32];
} ODBFINFO;

/* cnc_getfrominfo:read F-ROM information on CNC  */
#ifndef CNC_PPC
typedef struct odbfinform {
    long  slotno;            /* Slot Number */
    char  slotname[12];      /* Slot Name */
    long  fromnum;           /* Number of F-ROM SYSTEM data */
    struct {
        char  sysname[12];   /* F-ROM SYSTEM data Name */
        long  fromsize;      /* F-ROM Size */
        long  fromattrib;    /* F-ROM data attribute */
    } info[128];
} ODBFINFORM;
#endif

/* cnc_rdsraminfo:read S-RAM information on CNC */
/* cnc_getsraminfo:read S-RAM information on CNC */
typedef struct odbsinfo {
    long  sramnum;          /* Number of S-RAM data */
    struct {
        char  sramname[12]; /* S-RAM data Name */
        long  sramsize;     /* S-RAM data Size */
        short divnumber;    /* Division number of S-RAM file */
        char  fname[6][16]; /* S-RAM file names */
    } info[8];
} ODBSINFO;

/* cnc_rdsramaddr:read S-RAM address on CNC */
typedef struct sramaddr {
    short   type ;          /* SRAM data type */
    long    size ;          /* SRAM data size */
    long    offset ;        /* offset from top address of SRAM */
} SRAMADDR ;

/* cnc_dtsvrdpgdir:read file directory in Data Server */
typedef struct odbdsdir {
    long    file_num ;
    long    remainder ;
    short   data_num ;
    struct {
        char    file_name[16] ;
        char    comment[64] ;
        long    size ;
        char    date[16] ;
    } data[32] ;
} ODBDSDIR ;

/* cnc_dtsvrdset:read setting data for Data Server */
/* cnc_dtsvwrset:write setting data for Data Server */
typedef struct iodbdsset {
    char host_ip[16] ;
    char host_uname[32] ;
    char host_passwd[32] ;
    char host_dir[128] ;
    char dtsv_mac[13] ;
    char dtsv_ip[16] ;
    char dtsv_mask[16] ;
} IODBDSSET ;

/* cnc_dtsvmntinfo:read maintenance information for Data Server */
typedef struct odbdsmnt {
    long empty_cnt ;
    long total_size ;
    long read_ptr ;
    long write_ptr ;
} ODBDSMNT ;

/* cnc_rdposerrs2:read the position deviation S1 and S2 */
typedef struct odbpser {
    long    poserr1 ;
    long    poserr2 ;
} ODBPSER ;

/* cnc_rdctrldi:read the control input signal */
typedef struct odbspdi {
    char    sgnl1 ;
    char    sgnl2 ;
    char    sgnl3 ;
    char    sgnl4 ;
} ODBSPDI ;

/* cnc_rdctrldo:read the control output signal */
typedef struct odbspdo {
    char    sgnl1 ;
    char    sgnl2 ;
    char    sgnl3 ;
    char    sgnl4 ;
} ODBSPDO ;

/* cnc_rdsvfeedback:Read Servo feedback multiplication data */
typedef struct odbsvfback {
        short   dummy;
        short   dtype;
        long    fback[MAX_AXIS];
        long    afback[MAX_AXIS];
} ODBSVFBACK;

/* cnc_rdwaveprm:read the parameter of wave diagnosis */
/* cnc_wrwaveprm:write the parameter of wave diagnosis */
typedef struct iodbwave {
    short   condition ;
    char    trg_adr ;
    char    trg_bit ;
    short   trg_no ;
    short   delay ;
    short   t_range ;
    struct {
        short   kind ;
        union {
#if MAX_AXIS > 16
            long        axis ;
#else
            short       axis ;
#endif
            struct {
                char    adr ;
                char    bit ;
                short   no ;
            } io ;
        } u ;
    } ch[12] ;
} IODBWAVE ;

/* cnc_rdwaveprm2:read the parameter of wave diagnosis 2 */
/* cnc_wrwaveprm2:write the parameter of wave diagnosis 2 */
typedef struct iodbwvprm {
    short   condition ;
    char    trg_adr ;
    char    trg_bit ;
    short   trg_no ;
    short   reserve1 ;
    long    delay ;
    long    t_range ;
    struct {
        short   kind ;
        union {
            long    axis ;
            struct {
                char    adr ;
                char    bit ;
                short   no ;
            } io ;
        } u ;
        long    reserve2 ;
    } ch[12] ;
} IODBWVPRM ;

/* cnc_rdwaveprm3:read the parameter of wave diagnosis 3 */
/* cnc_wrwaveprm3:write the parameter of wave diagnosis 3 */
typedef struct iodbwvprm3 {
    short   condition ;
    short   trg_unittype ;
    char    trg_adr ;
    char    trg_bit ;
    short   trg_no ;
    short   alm_kind ;
    short   alm_no ;
    short   alm_axis ;
    short   reserve1 ;
    long    delay ;
    long    t_range ;
    short   wav_cycle ;
    short   dio_cycle ;
    struct {
        short   kind ;
        short   reserve2 ;
        union {
            struct {
                long    axis ;
                long    reserve3;
            } ax ;
            struct {
                short   unittype ;
                char    adr ;
                char    bit ;
                short   no ;
                short   reserve3 ;
            } io ;
        } u ;
    } ch[40] ;
} IODBWVPRM3 ;

/* cnc_rdwavedata:read the data of wave diagnosis */
typedef struct odbwvdt {
    short   channel ;
    short   kind ;
    union {
        short   axis ;
        struct {
            char    adr ;
            char    bit ;
            short   no ;
        } io ;
    } u ;
    char    year ;
    char    month ;
    char    day ;
    char    hour ;
    char    minute ;
    char    second ;
    short   t_cycle ;
    short   data[8192] ;
} ODBWVDT ;

typedef struct odbwvdt2 {
    short   channel ;
    union {
        struct {
            short   axis ;
            char    kind ;
        } w ;
        struct {
            short   no ;
            char    adr ;
            char    bit ;
        } io ;
    } u ;
    struct {
        char   year ;
        char   month ;
        char   day ;
        char   hour ;
        char   minute ;
        char   second ;
    } start , stop ;
    short   t_cycle ;
    short   adjust ;
    short   data[ 8192 ] ;
} ODBWVDT2 ;

/* cnc_rdwavedata3:read the data of wave diagnosis */
typedef struct odbwvdt3 {
    short   channel ;
    short   kind ;
    union {
        struct{
            short   axis ;
            short   reserve[3] ;
        } ax ;
        struct {
            short   unittype ;
            char    adr ;
            char    bit ;
            short   no ;
            short   reserve ;
        } io ;
    } u ;
    char    year ;
    char    month ;
    char    day ;
    char    hour ;
    char    minute ;
    char    second ;
    short   t_cycle ;
    short   data[8192] ;
} ODBWVDT3 ;

/* cnc_rdrmtwaveprm:read the parameter of wave diagnosis for remort diagnosis */
/* cnc_wrrmtwaveprm:write the parameter of wave diagnosis for remort diagnosis */
typedef struct iodbrmtprm {
    short   condition ;
    short   reserve ;
    union {
        struct {
            short   no ;
            char    axis ;
            char    type ;
        } alm ;
        struct {
            char    adr ;
            char    bit ;
            short   no ;
        } io ;
    } trg ;
    long    delay ;
    short   wv_intrvl ;
    short   io_intrvl ;
    short   kind1 ;
    short   kind2 ;
    struct {
           char    adr ;
           char    bit ;
           short   no ;
    } smpl[32] ;
} IODBRMTPRM ;

/* cnc_rdrmtwavedt:read the data of wave diagnosis for remort diagnosis */
typedef struct odbrmtdt {
    short   channel ;
    short   kind ;
    char    year ;
    char    month ;
    char    day ;
    char    hour ;
    char    minute ;
    char    second ;
    short   t_intrvl ;
    short   trg_data;
    long    ins_ptr;
    short   t_delta;
    short   data[1917] ;
} ODBRMTDT ;

/* cnc_rdsavsigadr:read of address for PMC signal batch save */
/* cnc_wrsavsigadr:write of address for PMC signal batch save */
typedef struct iodbsigad {
    char    adr ;
    char    reserve ;
    short   no ;
    short   size ;
} IODBSIGAD ;

/* cnc_rdmgrpdata:read M-code group data */
typedef struct odbmgrp {
    long  m_code ;
    short grp_no ;
    char  m_name[21] ;
    char  dummy ;
} ODBMGRP;

/* cnc_wrmgrpdata:write M-code group data */
typedef struct idbmgrp {
    short s_no ;
    short dummy ;
    short num ;
    short group[500] ;
} IDBMGRP ;

/* cnc_rdexecmcode:read executing M-code group data */
typedef struct odbexem {
    short	grp_no;
    short	mem_no;
    struct{
    long	no;
    short	flag;
    }m_code[5];
    char	m_name[21];
    char	dummy;
} ODBEXEM;

/* cnc_rdrstrmcode:read program restart M-code group data */
#ifndef CNC_PPC
typedef struct odbrstrm {
    short	grp_no;
    short	mem_no;
    struct{
    long	no;
    short	flag;
    }m_code[5];
} ODBRSTRM;
#endif

/* cnc_rdproctime:read processing time stamp data */
typedef struct odbptime {
    short	num;
    struct{
        long	prg_no;
        short	hour;
        char	minute;
        char	second;
    }data[10];
} ODBPTIME;

typedef struct odbptime3 {
    short	hour;
    short	min;
    short	sec;
    short	dummy;
} ODBPTIME3;

/* cnc_rdprgdirtime:read program directory for processing time data */
typedef struct prgdirtm {
    long	prg_no;
    char	comment[51];
    char	cuttime[13];
} PRGDIRTM;

/* cnc_rdprogdir2:read program directory 2 */
typedef struct prgdir2 {
    short	number ;
    long	length ;
    char	comment[51] ;
    char	dummy ;
} PRGDIR2;

/* cnc_rdprogdir3:read program directory 3 */
typedef struct prgdir3 {
    long	number ;
    long	length ;
    long	page ;
    char	comment[52] ;
    struct{
        short	year;
        short	month;
        short	day;
        short	hour;
        short	minute;
        short	dummy;
    } mdate;
    struct{
        short	year;
        short	month;
        short	day;
        short	hour;
        short	minute;
        short	dummy;
    } cdate;
} PRGDIR3;

/* cnc_rdprogdir4:read program directory 4 */
#define PRGDIR4 PRGDIR3

/* cnc_rdcomparam:read communication parameter for DNC1, DNC2, OSI-Ethernet */
/* cnc_wrcomparam:write communication parameter for DNC1, DNC2, OSI-Ethernet */
typedef struct iodbcprm {
    char           NcApli[65] ;
    char           Dummy1 ;
    char           HostApli[65] ;
    char           Dummy2 ;
    unsigned long  StatPstv ;
    unsigned long  StatNgtv ;
    unsigned long  Statmask ;
    unsigned long  AlarmStat ;
    unsigned long  PsclHaddr ;
    unsigned long  PsclLaddr ;
    unsigned short SvcMode1 ;
    unsigned short SvcMode2 ;
    long           FileTout ;
    long           RemTout ;
} IODBCPRM ;

/* cnc_rdintchk:read interference check */
/* cnc_wrintchk:write interference check */
typedef	struct  iodbint {
    short   datano_s;	/* start offset No. */
    short   type;		/* kind of position */
    short   datano_e;	/* end offset No. */
    long	data[24];	/* position value of area for not attach */
} IODBINT ;

/* cnc_rdwkcdshft:read work coordinate shift */
/* cnc_wrwkcdshft:write work coordinate shift */
/* cnc_rdwkcdsfms:read work coordinate shift measure */
/* cnc_wrwkcdsfms:write work coordinate shift measure */
typedef struct iodbwcsf {
     short	datano;         /* datano			*/
     short	type;           /* axis number			*/
     long	data[MAX_AXIS]; /* data				*/
} IODBWCSF;

/* cnc_rdomhisinfo:read operator message history information */
typedef struct odbomif {
    unsigned short	om_max ;   /* maximum operator message history */
    unsigned short	om_sum ;   /* actually operator message history */
    unsigned short	om_char ;  /* maximum character (include NULL) */
} ODBOMIF ;

/* cnc_rdomhistry:read operator message history */
typedef struct odbomhis {
    short	om_no;	/* operator message number */
    short	year;	/* year */
    short	month;	/* month */
    short	day;	/* day */
    short	hour;	/* hour */
    short	minute;	/* mimute */
    short	second;	/* second */
    char	om_msg[256];	/* operator message */
} ODBOMHIS ;

/* cnc_rdbtofsr:read b-axis tool offset value(area specified) */
/* cnc_wrbtofsr:write b-axis tool offset value(area specified) */
typedef	struct	iodbbto {
    short datano_s;		/* start offset number */
    short type;		/* offset type */
    short datano_e;		/* end offset number */
    long  ofs[18];		/* offset */
} IODBBTO ;	/* In case that the number of data is 9 (B type) */

/* cnc_rdbtofsinfo:read b-axis tool offset information */
typedef	struct  odbbtlinf {
    short	ofs_type;	/* memory type */
    short	use_no;		/* sum of b-axis offset */
    short	sub_no;		/* sub function number of offset cancel */
} ODBBTLINF ;

/* cnc_rdbaxis:read b-axis command */
typedef struct odbbaxis {
    short		flag ;        /* b-axis command exist or not */
    short		command ;     /* b-axis command */
    unsigned short	speed ;       /* b-axis speed */
    long		sub_data ;    /* b-axis sub data */
} ODBBAXIS ;

/* cnc_rdsyssoft:read CNC system soft series and version */
typedef struct odbsyss {
     char    slot_no_p[16];
     char    slot_no_l[16];
     short   module_id[16];
     short   soft_id[16];
     char    soft_series[16][5];
     char    soft_version[16][5];
     short   soft_inst;
     char    boot_ser[5];
     char    boot_ver[5];
     char    servo_ser[5];
     char    servo_ver[5];
     char    pmc_ser[5];
     char    pmc_ver[5];
     char    ladder_ser[5];
     char    ladder_ver[5];
     char    mcrlib_ser[5];
     char    mcrlib_ver[5];
     char    mcrapl_ser[5];
     char    mcrapl_ver[5];
     char    spl1_ser[5];
     char    spl1_ver[5];
     char    spl2_ser[5];
     char    spl2_ver[5];
     char    spl3_ser[5];
     char    spl3_ver[5];
     char    c_exelib_ser[5];
     char    c_exelib_ver[5];
     char    c_exeapl_ser[5];
     char    c_exeapl_ver[5];
     char    int_vga_ser[5];
     char    int_vga_ver[5];
     char    out_vga_ser[5];
     char    out_vga_ver[5];
     char    pmm_ser[5];
     char    pmm_ver[5];
     char    pmc_mng_ser[5];
     char    pmc_mng_ver[5];
     char    pmc_shin_ser[5];
     char    pmc_shin_ver[5];
     char    pmc_shout_ser[5];
     char    pmc_shout_ver[5];
     char    pmc_c_ser[5];
     char    pmc_c_ver[5];
     char    pmc_edit_ser[5];
     char    pmc_edit_ver[5];
     char    lddr_mng_ser[5];
     char    lddr_mng_ver[5];
     char    lddr_apl_ser[5];
     char    lddr_apl_ver[5];
     char    spl4_ser[5];
     char    spl4_ver[5];
     char    mcr2_ser[5];
     char    mcr2_ver[5];
     char    mcr3_ser[5];
     char    mcr3_ver[5];
     char    eth_boot_ser[5];
     char    eth_boot_ver[5];
     char    reserve[8][5];
} ODBSYSS ;

/* cnc_rdsyssoft2:read CNC system soft series and version (2) */
typedef struct odbsyss2 {
     char    slot_no_p[16];
     char    slot_no_l[16];
     short   module_id[16];
     short   soft_id[16];
     char    soft_series[16][5];
     char    soft_version[16][5];
     short   soft_inst;
     char    boot_ser[5];
     char    boot_ver[5];
     char    servo_ser[5];
     char    servo_ver[5];
     char    pmc_ser[5];
     char    pmc_ver[5];
     char    ladder_ser[5];
     char    ladder_ver[5];
     char    mcrlib_ser[5];
     char    mcrlib_ver[5];
     char    mcrapl_ser[5];
     char    mcrapl_ver[5];
     char    spl1_ser[5];
     char    spl1_ver[5];
     char    spl2_ser[5];
     char    spl2_ver[5];
     char    spl3_ser[5];
     char    spl3_ver[5];
     char    c_exelib_ser[5];
     char    c_exelib_ver[5];
     char    c_exeapl_ser[5];
     char    c_exeapl_ver[5];
     char    int_vga_ser[5];
     char    int_vga_ver[5];
     char    out_vga_ser[5];
     char    out_vga_ver[5];
     char    pmm_ser[5];
     char    pmm_ver[5];
     char    pmc_mng_ser[5];
     char    pmc_mng_ver[5];
     char    pmc_shin_ser[5];
     char    pmc_shin_ver[5];
     char    pmc_shout_ser[5];
     char    pmc_shout_ver[5];
     char    pmc_c_ser[5];
     char    pmc_c_ver[5];
     char    pmc_edit_ser[5];
     char    pmc_edit_ver[5];
     char    lddr_mng_ser[5];
     char    lddr_mng_ver[5];
     char    lddr_apl_ser[5];
     char    lddr_apl_ver[5];
     char    spl4_ser[5];
     char    spl4_ver[5];
     char    mcr2_ser[5];
     char    mcr2_ver[5];
     char    mcr3_ser[5];
     char    mcr3_ver[5];
     char    eth_boot_ser[5];
     char    eth_boot_ver[5];
     char    reserve[8][5];
     char    embEthe_ser[5];
     char    embEthe_ver[5];
     char    reserve2[38][5];
} ODBSYSS2 ;

typedef struct odbsyss3 {
     short   soft_id;
     char    soft_series[5];
     char    soft_edition[5];
} ODBSYSS3 ;

typedef struct odbsyss3_str {
    short   soft_id ;
    char    soft_name[13];
    char    soft_series[5] ;
    char    soft_edition[5] ;
    char    dummy[3] ;
} ODBSYSS3_STR ;

typedef struct odbsysh_str {
    short   group_id ;
    char    group_name[14] ;
    short   hard_id ;
    char    hard_name[13] ;
    char    id1[11] ;
    char    id2[9] ;
    char    slot_no[3];
    char    dummy[2] ;
} ODBSYSH_STR ;

typedef struct odbsysh {
     unsigned long id1 ;
     unsigned long id2 ;
     short  group_id ;
     short  hard_id ;
     short  hard_num ;
     short  slot_no ;
     short  id1_format ;
     short  id2_format ;
} ODBSYSH ;

/* cnc_rdmdlconfig:read CNC module configuration information */
typedef struct odbmdlc {
     short   from;
     short   dram;
     short   sram;
     short   pmc;
     short   crtc;
     short   servo12;
     short   servo34;
     short   servo56;
     short   servo78;
     short   sic;
     short   pos_lsi;
     short   hi_aio;
     short   reserve[12];
     short   drmmrc;
     short   drmarc;
     short   pmcmrc;
     short   dmaarc;
     short   iopt;
     short   hdiio;
     short   gm2gr1;
     short   crtgr2;
     short   gm1gr2;
     short   gm2gr2;
     short   cmmrb;
     short   sv5axs;
     short   sv7axs;
     short   sicaxs;
     short   posaxs;
     short   hamaxs;
     short   romr64;
     short   srmr64;
     short   dr1r64;
     short   dr2r64;
     short   iopio2;
     short   hdiio2;
     short   cmmrb2;
     short   romfap;
     short   srmfap;
     short   drmfap;
     short   drmare;
     short   pmcmre;
     short   dmaare;
     short   frmbgg;
     short   drmbgg;
     short   asrbgg;
     short   edtpsc;
     short   slcpsc;
     short   reserve2[34];
} ODBMDLC ;

/* cnc_rdpscdproc:read processing condition file (processing data) */
/* cnc_wrpscdproc:write processing condition file (processing data) */
typedef struct iodbpscd {
    short   slct;
    long    feed;
    short   power;
    short   freq;
    short   duty;
    short   g_press;
    short   g_kind;
    short   g_ready_t;
    short   displace;
    long    supple;
    short   edge_slt;
    short   appr_slt;
    short   pwr_ctrl;
    long    displace2;
    char    gap_axis;
    char    feed_dec ;
    char    supple_dec ;
    char    dsp2_dec;
} IODBPSCD ;

/* cnc_rdpscdproc2:read processing condition file (processing data) */
/* cnc_wrpscdproc2:write processing condition file (processing data) */
typedef struct iodbpscd2 {
    long    slct ;
    long    feed ;
    short   power ;
    short   freq ;
    short   duty ;
    short   g_press ;
    short   g_kind ;
    short   g_ready_t ;
    short   displace ;
    long    supple ;
    short   edge_slt ;
    short   appr_slt ;
    short   pwr_ctrl ;
    long    displace2 ;
    char    gap_axis ;
    char    feed_dec ;
    char    supple_dec ;
    char    dsp2_dec ;
    short   pb_power ;
    short   reserve[8] ;
} IODBPSCD2 ;

/* cnc_rdpscdpirc:read processing condition file (piercing data) */
/* cnc_wrpscdpirc:write processing condition file (piercing data) */
typedef struct iodbpirc {
    short   slct;
    short   power;
    short   freq;
    short   duty;
    short   i_freq;
    short   i_duty;
    short   step_t;
    short   step_sum;
    long    pier_t;
    short   g_press;
    short   g_kind;
    short   g_time;
    short   def_pos;
    long    def_pos2;
    char    gap_axis;
    char    def_pos2_dec;
    short   pb_power;
} IODBPIRC ;

/* cnc_rdpscdedge:read processing condition file (edging data) */
/* cnc_wrpscdedge:write processing condition file (edging data) */
typedef struct iodbedge {
    short   slct;
    short   angle;
    short   power;
    short   freq;
    short   duty;
    long    pier_t;
    short   g_press;
    short   g_kind;
    long    r_len;
    short   r_feed;
    short   r_freq;
    short   r_duty;
    short   gap;
    short   reserve[4];
} IODBEDGE ;

/* cnc_rdpscdslop:read processing condition file (slope data) */
/* cnc_wrpscdslop:write processing condition file (slope data) */
typedef struct iodbslop {
    long    slct;
    long    upleng;
    short   upsp[10];
    long    dwleng;
    short   dwsp[10];
    char    upleng_dec;
    char    dwleng_dec;
    short   reserve[9];
} IODBSLOP ;

/* cnc_rdlpwrdty:read power controll duty data */
/* cnc_wrlpwrdty:write power controll duty data */
typedef struct iodblpwdt {
    short   slct;
    short   dty_const;
    short   dty_min;
    short   reserve[6];
} IODBLPWDT ;

/* cnc_rdlpwrdat:read laser power data */
typedef struct odblopdt {
    short   slct;
    short   pwr_mon;
    short   pwr_ofs;
    short   pwr_act;
    long    feed_act;
    char    feed_dec;
    char    reserve;
    short   reserves[3];
} ODBLOPDT ;

/* cnc_rdlagslt:read laser assist gas selection */
/* cnc_wrlagslt:write laser assist gas selection */
typedef struct iodblagsl {
    short   slct;
    short   ag_slt;
    short   agflow_slt;
    short   ag_press;
    short   ag_ready_t;
    short   reserve[4];
} IODBLAGSL ;

/* cnc_rdlagst:read laser assist gas flow */
/* cnc_wrlagst:write laser assist gas flow */
typedef struct iodblagst {
    struct {
        short   slct;
        short   pre_time;
        short   pre_press;
        short   proc_press;
        short   end_time;
        short   end_press;
        short   reserve[3];
    } gasflow[3] ;
} IODBLAGST ;

/* cnc_rdledgprc:read laser power for edge processing */
/* cnc_wrledgprc:write laser power for edge processing */
typedef struct iodblegpr {
    short   slct;
    short   power;
    short   freq;
    short   duty;
    short   reserve[5];
} IODBLEGPR ;

/* cnc_rdlprcprc:read laser power for piercing */
/* cnc_wrlprcprc:write laser power for piercing */
typedef struct iodblpcpr {
    short   slct;
    short   power;
    short   freq;
    short   duty;
    long    time;
    short   reserve[4];
} IODBLPCPR ;

/* cnc_rdlcmddat:read laser command data */
typedef struct iodblcmdt {
    short   slct;
    long    feed;
    short   power;
    short   freq;
    short   duty;
    short   g_kind;
    short   g_ready_t;
    short   g_press;
    short   error;
    long    dsplc;
    long    error2;
    char    gap_axis;
    char    feed_dec;
    char    dsplc_dec;
    char    error2_dec;
    short   pb_power ;
    short   reserve[2];
} ODBLCMDT ;

/* cnc_rdlactnum:read active number */
typedef struct odblactn {
    short   slct;
    short   act_proc;
    short   act_pirce;
    short   act_slop;
    short   reserve[5];
} ODBLACTN ;

/* cnc_rdlcmmt:read laser comment */
typedef struct odblcmmt {
    char    comment[25];
} ODBLCMMT ;

/* cnc_rdpwofsthis:read power correction factor history data */
typedef struct odbpwofst {
        long             pwratio;
        long             rfvolt;
        unsigned short   year;
        unsigned short   month;
        unsigned short   day;
        unsigned short   hour;
        unsigned short   minute;
        unsigned short   second;
} ODBPWOFST;

/* cnc_rdmngtime:read management time */
/* cnc_wrmngtime:write management time */
typedef struct iodbmngtime {
        unsigned long    life;
        unsigned long    total;
} IODBMNGTIME;

/* cnc_rddischarge:read data related to electrical discharge at power correction ends */
typedef struct odbdischrg {
        unsigned short   aps;
        unsigned short   year;
        unsigned short   month;
        unsigned short   day;
        unsigned short   hour;
        unsigned short   minute;
        unsigned short   second;
        short            hpc;
        short            hfq;
        short            hdt;
        short            hpa;
        long             hce;
        long             rfi[8];
        long             rfv[8];
        long             dci[8];
        long             dcv[8];
        long             dcw[8];
} ODBDISCHRG;

/* cnc_rddischrgalm:read alarm history data related to electrical discharg */
typedef struct odbdischrgalm {
        unsigned short   year;
        unsigned short   month;
        unsigned short   day;
        unsigned short   hour;
        unsigned short   minute;
        unsigned short   second;
        long             almnum;
        unsigned long    psec;
        short            hpc;
        short            hfq;
        short            hdt;
        short            hpa;
        long             hce;
        unsigned short   asq;
        unsigned short   psu;
        unsigned short   aps;
        short            dummy;
        long             rfi[8];
        long             rfv[8];
        long             dci[8];
        long             dcv[8];
        long             dcw[8];
        short            almcd[8];
} ODBDISCHRGALM;

/* cnc_rdlppfbdt:read power feedback data */
/* cnc_wrlppfbdt:write power feedback data */
typedef struct idblppfbfg {
        short   s_no;
        short   slct;
        short   s_freq;
        short   e_freq;
        short   s_duty;
        short   e_duty;
} IDBLPPFBFG ;

typedef struct iodblppfbdt {
    short   ppower;
        short   dummy;
        short   freq[10];
        short   duty[10];
        short   rpower[10][10];
} IODBLPPFBDT ;

/* cnc_gettimer:get date and time from cnc */
/* cnc_settimer:set date and time for cnc */
typedef struct iodbtimer {
    short	type ;
    short	dummy ;
    union {
        struct {
            short	year ;
            short	month ;
            short	date ;
        } date ;
        struct {
            short	hour ;
            short	minute ;
            short	second ;
        } time ;
    } data ;
} IODBTIMER ;

/* cnc_rdtimer:read timer data from cnc */
/* cnc_wrtimer:write timer data for cnc */
typedef struct iodbtime {
    long	minute ;
    long	msec ;
} IODBTIME ;

/* cnc_rdtlctldata: read tool controll data */
/* cnc_wrtlctldata: write tool controll data */
typedef struct iodbtlctl {
    short	slct;
    short	used_tool;
    short	turret_indx;
    long	zero_tl_no;
    long	t_axis_move;
    long	total_punch[2];
    char    t_axis_dec;
    char    reserve;
    short   reserves[10];
} IODBTLCTL ;

/* cnc_rdtooldata: read tool data */
/* cnc_wrtooldata: read tool data */
typedef struct iodbtldt {
    short	slct;
    long	tool_no;
    long	x_axis_ofs;
    long	y_axis_ofs;
    long	turret_pos;
    long	chg_tl_no;
    long	punch_count;
    long	tool_life;
    long	m_tl_radius;
    long	m_tl_angle;
    char	tl_shape;
    long	tl_size_i;
    long	tl_size_j;
    long	tl_angle;
    char    x_axis_dec;
    char    y_axis_dec;
    char    turret_dec;
    char    m_radius_dec;
    char    m_angle_dec;
    char    tl_size_i_dec;
    char    tl_size_j_dec;
    char    tl_angle_dec;
    short   reserve[2];
} IODBTLDT ;

/* cnc_rdmultitldt: read multi tool data */
/* cnc_wrmultitldt: write multi tool data */
typedef struct iodbmlttl {
    short	slct;
    short	m_tl_no;
    long	m_tl_radius;
    long	m_tl_angle;
    long	x_axis_ofs;
    long	y_axis_ofs;
    char	tl_shape;
    long	tl_size_i;
    long	tl_size_j;
    long	tl_angle;
    char    m_radius_dec;
    char    m_angle_dec;
    char    x_axis_dec;
    char    y_axis_dec;
    char    tl_size_i_dec;
    char    tl_size_j_dec;
    char    tl_angle_dec;
    char    reserve;
    long    reserves[5];
} IODBMLTTL ;

/* cnc_rdmtapdata: read multi tap data */
/* cnc_wrmtapdata: write multi tap data */
typedef struct iodbmtap {
    short	slct;
    long	tool_no;
    long	x_axis_ofs;
    long	y_axis_ofs;
    long	punch_count;
    long	tool_life;
    long	reserve[11];
} IODBMTAP ;

/* cnc_rdtoolinfo: read tool information */
typedef struct odbptlinf {
    short	tld_max;
    short	mlt_max;
    short	reserve;
    short	tld_size[16];
    short	mlt_size[16];
    short	reserves[16];
} ODBPTLINF ;

/* cnc_rdsafetyzone: read safetyzone data */
/* cnc_wrsafetyzone: write safetyzone data */
typedef struct iodbsafe {
    short	slct;
    long	data[3];
} IODBSAFE ;

/* cnc_rdtoolzone: read toolzone data */
/* cnc_wrtoolzone: write toolzone data */
typedef struct iodbtlzn {
    short	slct;
    long	data[2];
} IODBTLZN ;

/* cnc_rdacttlzone: read active toolzone data */
typedef struct odbacttlzn {
    short	act_no;
    long	data[2];
} ODBACTTLZN ;

/* cnc_rdbrstrinfo:read block restart information */
typedef struct odbbrs {
    long dest[MAX_AXIS];
    long dist[MAX_AXIS];
} ODBBRS ;		/*  In case that the number of axes is 10 */

/* cnc_rdradofs:read tool radius offset for position data */
typedef struct odbrofs {
    short mode;
    short pln_axes[2];
    long ofsvct[2];
} ODBROFS ;

/* cnc_rdlenofs:read tool length offset for position data */
typedef struct odblofs {
    short mode;
    long ofsvct[MAX_AXIS];
} ODBLOFS ;		/*  In case that the number of axes is 10 */

/* cnc_rdfixcycle:read fixed cycle for position data */
typedef struct odbfix {
    short mode;
    short pln_axes[2];
    short drl_axes;
    long i_pos;
    long r_pos;
    long z_pos;
    long cmd_cnt;
    long act_cnt;
    long cut;
    long shift[2];
} ODBFIX ;

/* cnc_rdcdrotate:read coordinate rotate for position data */
typedef struct odbrot {
    short mode;
    short pln_axes[2];
    long center[2];
    long angle;
} ODBROT ;

/* cnc_rd3dcdcnv:read 3D coordinate convert for position data */
typedef struct odb3dcd {
    short mode;
    short dno;
    short cd_axes[3];
    long center[2][3];
    long direct[2][3];
    long angle[2];
} ODB3DCD ;

/* cnc_rdmirimage:read programable mirror image for position data */
typedef struct odbmir {
    short mode;
    long mir_flag;
    long mir_pos[MAX_AXIS];
} ODBMIR ;		/*  In case that the number of axes is 10 */

/* cnc_rdscaling:read scaling data for position data */
typedef struct odbscl {
    short mode;
    long center[MAX_AXIS];
    long magnif[MAX_AXIS];
} ODBSCL ;		/*  In case that the number of axes is 10 */

/* cnc_rd3dtofs:read 3D tool offset for position data */
typedef struct odb3dto {
    short mode;
    short ofs_axes[3];
    long ofsvct[3];
} ODB3DTO ;

/* cnc_rdposofs:read tool position offset for position data */
typedef struct odbpofs {
    short mode;
    long ofsvct[MAX_AXIS];
} ODBPOFS ;		/*  In case that the number of axes is 10 */

/* cnc_rdhpccset:read hpcc setting data */
/* cnc_wrhpccset:write hpcc setting data */
typedef struct iodbhpst {
    short       slct ;
    short       hpcc ;
    short       multi ;
    short       ovr1 ;
    short       ign_f ;
    short       foward ;
    long        max_f ;
    short       ovr2 ;
    short       ovr3 ;
    short       ovr4 ;
    long        reserve[7] ;
} IODBHPST ;

/* cnc_rdhpcctupr:read hpcc tuning data ( parameter input ) */
/* cnc_wrhpcctupr:write hpcc tuning data ( parameter input ) */
typedef struct iodbhppr {
    struct {
        short   slct ;
        short   diff ;
        short   fine ;
        short   acc_lv ;
        long    max_f ;
        short   bipl ;
        short   aipl ;
        long    corner ;
        short   clamp ;
        long    radius ;
        long    max_cf ;
        long    min_cf ;
        long    foward ;
        long    reserve[5] ;
    }tune[3] ;
} IODBHPPR ;

/* cnc_rdhpcctuac:read hpcc tuning data ( acc input ) */
/* cnc_wrhpcctuac:write hpcc tuning data ( acc input ) */
typedef struct iodbhpac {
    struct {
        short   slct ;
        short   diff ;
        short   fine ;
        short   acc_lv ;
        long    bipl ;
        short   aipl ;
        long    corner ;
        long    clamp ;
        long    c_acc ;
        long    foward ;
        long    reserve[8] ;
    }tune[3] ;
} IODBHPAC ;

/* cnc_rd3dtooltip:read tip of tool for 3D handle */
/* cnc_rd3dmovrlap:read move overrlap of tool for 3D handle */
typedef struct odb3dhdl {
    short	axes[5] ;
    long	data[5] ;
} ODB3DHDL ;

/* cnc_rd3dpulse:read pulse for 3D handle */
typedef struct odb3dpls {
    long	right_angle_x ;
    long	right_angle_y ;
    long	tool_axis     ;
    long	tool_tip_a_b  ;
    long	tool_tip_c    ;
} ODB3DPLS ;

/* cnc_rd5dtooltip:read tip of 5 axis manufacture send handle */
/* cnc_rd5dtoolmac:read machine axis of 5 axis manufacture send handle */
typedef struct odb5dhdl {
    char	name[4];
    long	data   ;
    short	dec    ;
    short	flag   ;
    short	axis   ;
} ODB5DHDL ;

/* cnc_rd5dpulse:read pulse of 5 axis manufacture send handle */
typedef struct odb5dpls {
    char	name[3];
    long	data   ;
    short	dec    ;
} ODB5DPLS ;

/* cnc_rdaxisname: read axis name */
typedef struct odbaxisname {
    char name;          /* axis name */
    char suff;          /* suffix */
} ODBAXISNAME ;

/* cnc_rdspdlname: read spindle name */
typedef struct odbspdlname {
    char name;          /* spindle name */
    char suff1;         /* suffix */
    char suff2;         /* suffix */
    char suff3;         /* suffix */
} ODBSPDLNAME ;

/* cnc_rdrelaxis: read relative axis */
typedef struct odbrelaxis {
    short path;          /* path number */
    short rel_axis;      /* axis number */
} ODBRELAXIS ;

/* cnc_wrunsolicprm: Set the unsolicited message parameters */
/* cnc_rdunsolicprm: Get the unsolicited message parameters */
typedef struct iodbunsolic {
    char            ipaddr[16] ;
    unsigned short  port ;
    short           reqaddr ;
    short           pmcno ;
    short           retry ;
    short           timeout ;
    short           alivetime;
    short           setno ;
    union {
        struct {
            short   type ;
            short   rdaddr ;
            short   rdno ;
            short   rdsize ;
        } pmc ;
        struct {
            short   type ;
            long    dummy1 ;
            short   dummy2 ;
        } dmy ;
    } rddata[3] ;
} IODBUNSOLIC ;

/* cnc_wrunsolicprm2: Set the unsolicited message parameters(2) */
/* cnc_rdunsolicprm2: Get the unsolicited message parameters(2) */
typedef struct unsolicmsg_type_prm {
    unsigned short      type;
    char                dummy1[2];
    union {
        struct {
            unsigned short  path;
            short           addr;
            unsigned long   no;
            unsigned long   size;
        } pmc;
        struct {
            unsigned short  path;
            char            dummy2[2];
            unsigned long   no;
            unsigned long   num;
        } macro;
    } prm;
} UNSOLICMSG_TYPE_PRM;

typedef struct iodbunsolic2 {
    char                ipaddr[64];
    unsigned long       port;
    unsigned short      retry;
    unsigned short      timeout;
    unsigned short      alivetime;
    char                dummy1[8];
    UNSOLICMSG_TYPE_PRM cntrl;
    unsigned short      transnum;
    char                dummy2[14];
    UNSOLICMSG_TYPE_PRM trans[3];
} IODBUNSOLIC2;

/* cnc_rdunsolicmsg: Reads the unsolicited message data */
typedef struct idbunsolicmsg {
    short   getno ;
    struct {
        short   rdsize ;
        void    *data ;
    } msg[3] ;
} IDBUNSOLICMSG ;

/* cnc_rdunsolicmsg2: Reads the unsolicited message data(2) */
typedef struct unsolicmsg_type_msg {
    unsigned short      type;
    char                dummy1[2];
    union {
        struct {
            unsigned short  path;
            char            dummy2[2];
            unsigned long   size;
            void            *data;
        } pmc;
        struct {
            unsigned short  path;
            char            dummy3[2];
            unsigned long   num;
            void            *data;
        } macro;
    } msg;
} UNSOLICMSG_TYPE_MSG ;

typedef struct idbunsolicmsg2 {
    unsigned short      getnum;
    char                dummy[2];
    UNSOLICMSG_TYPE_MSG get[3];
} IDBUNSOLICMSG2 ;

/* cnc_wrtrqlimit: Set torque limit data */
typedef struct idbtrq {
    short   datano;         /* dummy */
    short   type;           /* axis number */
    unsigned short data[MAX_AXIS]; /* torque limit data */
} IDBTRQ;

/* cnc_rdftrq_info: Get setting information of "Fine toruqe sensing function" */
typedef struct {
    char	smpl_enbl ;			/* sample data save function flag	*/
    char    cycle ;				/* sampling cycle					*/
    char    axis_num ;			/* number of object axes			*/
    char    dummy1 ;			/* dummy							*/
} ODBP_FTRQ_PRM_INF ;


/* embetb_rdparam_w:read embedded ethernet parameter for FS160is/180is-WB */
/* embetb_wrparam_w:write embedded ethernet parameter for FS160is/180is-WB */
typedef struct embtcpprmw {
    char			IPAddress[16];
    char			SubNetMask[16];
    char			RouterIPAddress[16];
} EMBTCPPRMW;

typedef struct fwlibprmw {
    unsigned short	TcpPort;
    unsigned short	UdpPort;
    unsigned short	UdpInterval;
} FWLIBPRMW;

typedef struct flinkprmw {
    char			IPAddress[16];
    unsigned short	Port;
} FLINKPRMW;

typedef struct iodbembethprmw {
    union {
        EMBTCPPRMW	tcpip;
        FWLIBPRMW	fwlib;
        FLINKPRMW	flink;
        char		MACAddress[13];
    } embethprm;
} IODBEMBETHPRMW;

/* cnc_rdpm_item:read maintenance item status */
/* cnc_wrpm_item:write maintenance item status */
typedef struct iodbpmainte {
    char   name[62];    /* name */
    long   type;        /* life count type */
    long   total;       /* total life time (minite basis) */
    long   remain;      /* life rest time */
    long   stat;        /* life state */
} IODBPMAINTE ;

/* cnc_rdofslength:read tool length offset data */
typedef struct odbofslen {
     long    len;    /* tool length offset */
     long    dec;    /* decimal point */
} ODBOFSLEN ;

/* cnc_sysinfo_ex:read CNC system path information */
typedef struct odbsysex {
    short max_axis;       /* maximum axis number */
    short max_spdl;       /*  */
    short max_path;       /*  */
    short max_mchn;       /*  */
    short ctrl_axis;      /*  */
    short ctrl_srvo;      /*  */
    short ctrl_spdl;      /*  */
    short ctrl_path;      /*  */
    short ctrl_mchn;      /*  */
    short addinfo ;       /* additional information	*/
    short reserved[2];    /* reserve		 		*/
    struct {
        short system;     /* M/T/TT <ascii char> */
        short group;      /*  */
        short attrib;     /*  */
        short ctrl_axis;  /*  */
        short ctrl_srvo;  /*  */
        short ctrl_spdl;  /*  */
        short mchn_no;    /*  */
        short reserved;
    } path[MAX_CNCPATH] ;
} ODBSYSEX ;

/* cnc_rdwseterror:read Work-piece setting error data */
/* cnc_wrwseterror:write Work-piece setting error data */
typedef struct wseterror {
     long      data;      /*  */
     short     dec;       /*  */
     short	   dummy;
} REALWSET ;

typedef struct iodbwseterror {
    long	d_no;			/* active group number */
    long	data_act[6];	/* active data */
    long	dp_act[6];		/* decimal point for active data */
    long	dsp_ix[2];		/* axisnumber for axisname */
    REALWSET  data[WSETER_GRP][WSETER_DATA];
} IODBWSETERROR ;

/* cnc_rdlrntrnsdata:read Transfer Data */
typedef struct odbtrns {
        short	status ;				/* transfer status */
        short	pct ;					/* transfer ratio (%) */
        short	type ;					/* transfer type */
        char	dummy[2] ;
} ODBTRNS;

/* cnc_rdlrninfo:read Parts Learning Data */
typedef struct odblrninfo {
    char	name[33] ;			/* program name */
    char	dummy1[3] ;
    char	axis[4][4] ;		/* No.1-No.4 Learning axis name */
    short	year ;				/* update(year) */
    short	month ; 			/* update(month) */
    short	day ;				/* update(day) */
    short	hour ;				/* update(hour) */
    short	minute ;			/* update(minute) */
    short	second ;			/* update(second) */
    char	comment[33] ;		/* comment */
    char	dummy2[3] ;
} ODBLRNINFO;

/* cnc_rdlrninfo2:read Parts Learning Data */
typedef struct odblrninfo2 {
    char	name[33] ;			/* program name */
    char	dummy1[3] ;
    char	axis[20][4] ;		/* No.1-No.20 Learning axis name */
    short	year ;				/* update(year) */
    short	month ; 			/* update(month) */
    short	day ;				/* update(day) */
    short	hour ;				/* update(hour) */
    short	minute ;			/* update(minute) */
    short	second ;			/* update(second) */
    char	comment[33] ;		/* comment */
    char	dummy2[3] ;
} ODBLRNINFO2;

/* cnc_rdlrninfol:read Learning Data  */
typedef struct odblrninfol {
    char	axis[4];			/* Learning axis name */
    char	name[33];			/* program name */
    char	comment[33];		/* comment */
    char    path;               /* path */
    char	dummy1;
}ODBLRNINFOL;

/* cnc_rdlrnprfcmnt:read Profile Data  */
typedef struct odblrnprf {
        char    status ;            /* status */
        char    comment[17] ;       /* comment */
        char    path ;              /* path */
        char    dummy1 ;
}ODBLRNPRF;

/* cnc_sendkey:Send MDI key information */
typedef struct odbkeyinfo {
    unsigned long key[2];	/* key info */
} ODBKEYINFO;

/* cnc_3dchkdata:Reads 3D interference chaeck data */
typedef struct prginf {
    unsigned long prgid[4];
} PRGINF;

typedef struct toolinf {
    long  tcode;
    long  magazin;
    long  pot;
} TOOLINF;

typedef struct posinf {
    struct {
        short prec_pntr;
        short prec_time;
        long  data[MAX_POS_BUF];
        short dec;
        short unit;
    } pos;
    struct {
        long  data;
        short dec;
        short unit;
    } feed;
} POSINF;

typedef struct odb3dchk {
    long  pathno;
    struct {
        long    mode;
        PRGINF  prginf;
        long    dummy[2];
        long    mcode[2];
        TOOLINF tlinf;
        long    dummy2[3];
        long    ctrlaxis;
        POSINF  data[MAX_AXIS];
    } path[MAX_CNCPATH] ;
} ODB3DCHK;

typedef struct odb3dmtbinfo {
    PRGINF  prginf;
    long    mcode[3];
    long    bcode;
    TOOLINF tlinf;
    long    hisorder;
    long    dummy[3];
} ODB3DMTBINFO;

typedef struct odb3dmtbinfo2 {
    unsigned long    path;
    PRGINF           prginf;
    long             mcode[3];
    long             bcode;
    TOOLINF          tlinf;
    long             dummy[4];
} ODB3DMTBINFO2;

/* cnc_3dchk_mchn_stop: Stop machine for 3D interference check */
typedef struct idb3dmstop {
    struct {
        unsigned long   plus;
        unsigned long   minus;
    } path[MAX_CNCPATH] ;
} IDB3DMSTOP;


/* cnc_read_cexeinfo */
typedef struct cexeinfo {
    long    cond;           /*      condition       */
    long    cycle;          /*    cycle of start    */
    long    count;          /*    number of start   */
    long    time;           /*    execution time    */
    long    dummy1;         /*        dummy1        */
    long    dummy2;         /*        dummy2        */
    long    dummy3;         /*        dummy3        */
    long    dummy4;         /*        dummy4        */
} CEXEINFO ;

/* cnc_cannedcycle:read canned command data */
typedef struct cmnddata {
    double  val;         /* Command value */
    long    dec;         /* Decimal point */
    long    dummy;       /* dummy */
} CMNDDATA;

typedef struct odbcancmd {
    CMNDDATA  p_data ;      /* P command */
    CMNDDATA  q_data ;      /* Q command */
    CMNDDATA  r_data ;      /* R command */
    CMNDDATA  z_data ;      /* Z command */
} ODBCANCMD ;

/*-----------------------------------*/
/* CNC: trouble diagnosis            */
/*-----------------------------------*/
/* cnc_mdg_rdalminfo */
typedef struct iodbmdginfo {
    long alm_no;
    short type;
    short axis;
    short path;
    short reserved;
} IODBMDGINFO;

/* cnc_mdg_rdmsg */
typedef struct odbmdgmsg {
    long alm_no;
    short msgidx;
    short reserved;
    char type[4];
    char part[4];
    char level[4];
    char add_inf[4];
    char mark[20];
    char message[100];
    char cause[300];
} ODBMDGMSG;

/* cnc_mdg_rdflow */
typedef struct odbmdgflow {
    short msgidx;
    short yesidx;
    short noidx;
    short reserved;
    char message[400];
    short detail;
    short operate;
} ODBMDGFLOW;

/* cnc_mdg_rddtmsg */
typedef struct odbmdgdtmsg {
    char message[1600];
    unsigned long imgid;
} ODBMDGDTMSG;

/* cnc_mdg_rdalminfoview2 */
typedef union odbmdgval {
    long lval;
    unsigned long ulval;
    short sval;
    unsigned short usval;
    char cval;
    unsigned char ucval;
} ODBMDGVAL;

typedef struct odbmdgdt {
    ODBMDGVAL dt;
    short fp;
    short reserved;
} ODBMDGDT;

typedef struct odbsigdio {
    char sgnl1;
    char sgnl2;
    char sgnl3;
    char sgnl4;
} ODBSIGDIO;

typedef struct odbsv2_grp1 {
    long cmd_pls;
    long fb_pls;
    long refc;
    long pos_err;
    ODBMDGDT act_spd;
    unsigned short amr;
    short reserved;
} ODBSV2_GRP1;

typedef struct odbsv2_grp2 {
    ODBMDGDT mt_cur;
    short trq_cmd;
    short efc_cur;
    unsigned short dlvl;
    unsigned short heat;
    short opt;
    short opt2;
} ODBSV2_GRP2;

typedef struct odbsv2_grp3 {
    ODBMDGDT ps_vumb;
    ODBMDGDT ps_vthd;
    ODBMDGDT freq;
    unsigned short ps_vrms;
    unsigned short ps_cur;
    unsigned short dvolt;
    unsigned char ps_statf;
    char reserved;
} ODBSV2_GRP3;

typedef struct odbsv2_grp4 {
    ODBMDGDT resistance;
    unsigned char detect_res;
    char reserved[7];
} ODBSV2_GRP4;

typedef struct odbsv2_grp5 {
    unsigned short ps_dgn;
    unsigned short ps_sub_dgn;
    unsigned short sv_dgn;
    unsigned char ps_int_tmp;
    unsigned char ps_sink_tmp;
    unsigned char sv_int_tmp;
    unsigned char sv_sink_tmp;
    unsigned char amp_grp;
    unsigned char amp_slv;
} ODBSV2_GRP5;

typedef struct odbsv2_grp6 {
    unsigned short sv_up_err1;
    unsigned short sv_up_err2;
    unsigned short sv_lw_err1;
    unsigned short sv_lw_err2;
    unsigned short sv_up_jt1;
    unsigned short sv_up_jt2;
    unsigned short sv_lw_jt1;
    unsigned short sv_lw_jt2;
    unsigned short sdu_up_err1;
    unsigned short sdu_up_err2;
    unsigned short sdu_lw_err1;
    unsigned short sdu_lw_err2;
    unsigned short sdu_up_jt1;
    unsigned short sdu_up_jt2;
    unsigned short sdu_lw_jt1;
    unsigned short sdu_lw_jt2;
} ODBSV2_GRP6;

typedef struct odbsv2_grp7 {
    unsigned short id_intp;
    unsigned short id_com;
    unsigned short id_wrn;
    unsigned short ed_intp;
    unsigned short ed_com;
    unsigned short ed_wrn;
    short sv_dat1;
    short sv_dat2;
    short sv_dat3;
    short sv_dat4;
} ODBSV2_GRP7;

typedef struct odbsp2_grp1 {
    long motion;
    short cmd_spd;
    char mode;
    char gear;
    char osel;
    char reserved[3];
    ODBSIGDIO sig_in;
    ODBSIGDIO sig_out;
} ODBSP2_GRP1;

typedef struct odbsp2_grp2 {
    long pos_err;
    long syn_err;
    long sp_spd;
    long mt_spd;
    ODBMDGDT mt_cur;
    unsigned short ldmtr;
    short trq_cmd;
    char heat_mt;
    char heat_amp;
    char reserved[2];
} ODBSP2_GRP2;

typedef struct odbsp2_grp3 {
    ODBMDGDT ps_vumb;
    ODBMDGDT ps_vthd;
    ODBMDGDT freq;
    unsigned short ps_vrms;
    unsigned short ps_cur;
    unsigned short dvolt;
    unsigned char ps_statf;
    char reserved;
} ODBSP2_GRP3;

typedef struct odbsp2_grp4 {
    ODBMDGDT resistance;
    unsigned char detect_res;
    char reserved[7];
} ODBSP2_GRP4;

typedef struct odbsp2_grp5 {
    unsigned short ps_dgn;
    unsigned short ps_sub_dgn;
    unsigned short sp_dgn;
    unsigned char ps_int_tmp;
    unsigned char ps_sink_tmp;
    unsigned char sp_int_tmp;
    unsigned char sp_sink_tmp;
    unsigned char amp_grp;
    unsigned char amp_slv;
} ODBSP2_GRP5;

typedef struct odbsp2_grp6 {
    unsigned short sp_up_err1;
    unsigned short sp_up_err2;
    unsigned short sp_lw_err1;
    unsigned short sp_lw_err2;
    unsigned short sp_up_jt1;
    unsigned short sp_up_jt2;
    unsigned short sp_lw_jt1;
    unsigned short sp_lw_jt2;
} ODBSP2_GRP6;

typedef struct odbsp2_grp7 {
    ODBMDGDT iab_amplt;
    ODBMDGDT eab_amplt;
    short iab_ofs_a;
    short iab_ofs_b;
    short iab_noise;
    short eab_ofs_a;
    short eab_ofs_b;
    short eab_noise;
    unsigned short iab_max_flt;
    unsigned short eab_max_flt;
} ODBSP2_GRP7;

typedef struct odbsp2_grp8 {
    unsigned short isncr_intp;
    unsigned short isncr_com;
    unsigned short isncr_wrn;
    unsigned short esncr_intp;
    unsigned short esncr_com;
    unsigned short esncr_wrn;
    short sp_dat1;
    short sp_dat2;
    short sp_dat3;
    short sp_dat4;
} ODBSP2_GRP8;

typedef struct odblat_grp1 {
    unsigned long nnum;
    char prog[36];
    char year;
    char mon;
    char day;
    char hour;
    char min;
    char sec;
    char reserved[2];
} ODBLAT_GRP1;

typedef union odbviewgrp2 {
    ODBSV2_GRP1 sv1;
    ODBSV2_GRP2 sv2;
    ODBSV2_GRP3 sv3;
    ODBSV2_GRP4 sv4;
    ODBSV2_GRP5 sv5;
    ODBSV2_GRP6 sv6;
    ODBSV2_GRP7 sv7;
    ODBSP2_GRP1 sp1;
    ODBSP2_GRP2 sp2;
    ODBSP2_GRP3 sp3;
    ODBSP2_GRP4 sp4;
    ODBSP2_GRP5 sp5;
    ODBSP2_GRP6 sp6;
    ODBSP2_GRP7 sp7;
    ODBSP2_GRP8 sp8;
    ODBLAT_GRP1 lat1;
} ODBVIEWGRP2;

/* cnc_mdg_rdwvdata */
typedef struct odbmdgwvdt {
    long ldata[500];
    unsigned short p_dec;
    unsigned short num;
    unsigned short channel;
    unsigned short axis;
    unsigned short kind;
    unsigned short interval;
    unsigned short t_cycle;
    char unit;
    char sw_alm;
} ODBMDGWVDT;

/*-----*/
/* CNC */
/*-----*/

/* cnc_srcsrdidinfo */
/* cnc_srcswridinfo */
typedef struct iodbidinf {
    long  id_no;
    short drv_no;
    short acc_element;
    short err_general;
    short err_id_no;
    short err_id_name;
    short err_attr;
    short err_unit;
    short err_min_val;
    short err_max_val;
    short id_name_len;
    short id_name_max;
    char  id_name[60];
    long  attr;
    short unit_len;
    short unit_max;
    char  unit[12];
    long  min_val;
    long  max_val;
} IODBIDINF;

/* cnc_srcsrdexstat */
typedef struct odbsrcsst {
    short acc_element;
    short err_general;
    short err_id_no;
    short err_attr;
    short err_op_data;
} ODBSRCSST;

/* cnc_srcsrdlayout */
typedef struct odbsrcslyt {
    short spndl[4];
    short servo[8];
    char  axis_name[8];
} ODBSRCSLYT;

/*-----*/
/* CNC */
/*-----*/
/* cnc_sdsetchnl */
typedef struct idbchan {
    char            chno;
    char            axis;
    long            datanum;
    unsigned short  datainf;
    short           dataadr;
} IDBCHAN;

/* cnc_sdsetchnl2 */
typedef struct pmc_data {
    short			unittype;
    char			adr;
    unsigned char	bit;
    unsigned short	no;
} PMC_DATA;

/* cnc_sdsetchnl2 */
typedef struct idbchan2 {
    short           chno;
    short           axis;
    long            datanum;
    unsigned short  datainf;
    short           dataadr;
    PMC_DATA		io[16];
} IDBCHAN2;

/* cnc_sdstartsmpl2 */
typedef struct trgdata {
    long		seq_no;
    PMC_DATA	pmc_trg;
} TRG_DATA;

/* cnc_sdbetainfo */
typedef struct odbbinfo {
    short   iochno;
    short   grpno;
    short   axis;
    char    name;
    char    suff;
    short   reserve[3];
} ODBBINFO;

/* cnc_sdsetchnl */
typedef struct odbsd {
    unsigned short  *chadata;
    long            *count;
} ODBSD;

/* cnc_sfbsetchnl */
typedef struct idbsfbchan {
        char            chno;
        char            axis;
        unsigned short  shift;
} IDBSFBCHAN;

/* cnc_sdtsetchnl */
typedef struct idbsdtchan {
        short			type;
        char			chno;
        char			axis;
        unsigned short	shift;
} IDBSDTCHAN;

/* cnc_sdtsetchnl2 */
typedef struct idbsdtchan2 {
    short			type;
    char			chno;
    char			axis;
    unsigned short	shift;
    PMC_DATA		io[16];
} IDBSDTCHAN2;

typedef struct idbsdttrg {
    long		seq_no;
    PMC_DATA	pmc_trg;
} IDBSDTTRG;

/*----------------------------*/
/* CNC : REMOTE DIAGNOSIS I/F */
/*----------------------------*/
/* cnc_pdf_startrmtdgn: Remote Diagnosis Start */
/* cnc_pdf_rdrmtdgn: Read Remote Diagnosis Information */
typedef struct rmtdgn_info {
    unsigned long  receipt_num;	    /* Receipt Number   */
    unsigned long  time;            /* Time             */
    short          status;          /* Status           */
    short          err_num;         /* Error Number     */
    char           err_msg[36];     /* Error Message    */
} OUT_RMTDGNINFO;

/*-------------------------*/
/* CNC : FS18-LN function  */
/*-------------------------*/

/* cnc_allowcnd:read allowanced state */
typedef struct odbcaxis {
    short   dummy ;             /* dummy */
    short   type ;              /* axis number */
    unsigned char    data[MAX_AXIS] ;    /* data value */
} ODBCAXIS ;


/*-----------*/
/* Oxxxxxxxx */
/*-----------*/

/* cnc_rdprgnumo8:read program number under execution */
typedef struct odbproo8 {
     short   dummy[2] ;  /* dummy */
     long    data ;      /* running program number */
     long    mdata ;     /* main program number */
} ODBPROO8 ;

/* cnc_rddynamico8:read all dynamic data */
typedef struct odbdyo8 {
    short   dummy ;
    short   axis ;       /* axis number             */
    short   alarm ;      /* alarm status            */
    long    prgnum ;     /* current program number  */
    long    prgmnum ;    /* main program number     */
    long    seqnum ;     /* current sequence number */
    long    actf ;       /* actual feedrate         */
    long    acts ;       /* actual spindle speed    */
    union {
        struct {
            long    absolute[MAX_AXIS] ;    /* absolute position   */
            long    machine[MAX_AXIS] ;     /* machine position    */
            long    relative[MAX_AXIS] ;    /* relative position   */
            long    distance[MAX_AXIS] ;    /* distance to go      */
        } faxis ;
        struct {
            long    absolute ;  /* absolute position   */
            long    machine ;   /* machine position    */
            long    relative ;  /* relative position   */
            long    distance ;  /* distance to go      */
        } oaxis ;   /* In case of no axis  */
    } pos ;
} ODBDYO8 ;

/* (op)cnc_rdmdipntro8:read execution pointer for MDI operation */
typedef struct odbmdipo8 {
    long   mdiprog;     /* exec. program number */
    long   mdipntr;     /* exec. pointer */
    long   crntprog;    /* prepare program number */
    long   crntpntr;    /* prepare pointer */
} ODBMDIPO8;

/* cnc_rdprogdir2o8:read program directory 2 */
typedef struct prgdir2o8 {
    long	number ;
    long	length ;
    char	comment[51] ;
    char	dummy ;
} PRGDIR2O8;


/*---------------------------------*/
/* CNC : C-EXE SRAM file function  */
/*---------------------------------*/

/* read C-EXE SRAM disk directory */
typedef struct cfileinfo {
    char	fname[12] ;	/* file name */
    long	file_size ;	/* file size (bytes) */
    long	file_attr ;	/* attribute */
    short	year;		/* year */
    short	month;		/* month */
    short	day;		/* day */
    short	hour;		/* hour */
    short	minute;		/* mimute */
    short	second;		/* second */
} CFILEINFO;


/*------------*/
/* CNC : FSSB */
/*------------*/

/* cnc_rdfssb_amp:read amp information */
typedef struct tagODBFSSBAMP {
    short	ln_num;			/* line number */
    short	slave_num;		/* slave number */
    char	name[8];		/* amp name */
    char	seires[8];		/* amp series name */
    char	unit[8];		/* amp unit type */
    char	cur[8]; 		/* amp currect */
    short	axis_num;		/* axis number */
//	short	reserve;		/* reserved */
    char	axis_name[4];	/* axis name */
} ODBFSSBAMP ;

/* cnc_rdfssb_plsmod:read pulse module information */
typedef struct tagODBPLSMDL {
    short	ln_num;			/* line number */
    short	slave_num;		/* slave number */
    char	name[8];		/* pulse module name */
    char	type[8];		/* pulse module type name */
    char	pcb_id[8];		/* pulse module hard ID */
    char	function[32];	/* pulse module function */
} ODBPLSMDL ;

/* cnc_rdfssb_axis:read axis information */
/* cnc_wrfssb_axis:write axis information */
typedef struct tagIODBFSSBAXIS {
    short	axis_num;		/* axis number */
    short	reserve1;		/* reserved */
    char	axis_name[4];	/* axis name */
    char	amp_name[8];	/* amp name */
    short	m1;				/* M1 */
    short	m2;				/* M2 */
    short	m3;				/* M3 */
    short	m4;				/* M4 */
    short	dsp1;			/* 1-DSP */
//	short	spos;			/* SPOS */
    short	cs;				/* Cs */
    short	tndm;			/* tandem */
//	short	egb;			/* EGB */
    short	reserve2;		/* reserved */
} IODBFSSBAXIS ;

/* cnc_rdfssb_mainte:read maintenance information */
typedef struct tagODBFSSBMT {
    short	axis_num;		/* axis number */
    short	reserve;		/* reserved */
    char	axis_name[4];	/* axis name */
    char	amp_name[8];	/* amp name */
    char	amp_seires[8];	/* amp series name */
    char	amp_unit[8];	/* amp unit type */
    char	amp_cur[8];		/* amp maximum current */
    char	amp_edt[8];		/* amp version */
    short	amp_axis_num;	/* amp axis */
    short	test_year;		/* amp tested year */
    short	test_month;		/* amp tested month */
    short	test_day;		/* amp tested date */
    short	amp_mainte;		/* amp serial number */
} ODBFSSBMT ;

/* cnc_rdfssb_info:read FSSB information */
typedef struct tagODBFSSBINFO {
    short	card_num;		/* axis card amount */
    struct {
        short	amp_num;	/* amp amount */
        short	plsm_num;	/* pulse module amount */
    } card[8];
} ODBFSSBINFO ;


/* FSSB for 30iB (IFSB) */
typedef struct tagODBIFSBLINE {
    unsigned short  hrv_ln;         /* HRV */
    unsigned short  ax_num_ln;      /* Axis Num */
    unsigned short  sp_num_ln;      /* Spindel Num */
    unsigned short  pm_num_ln;      /* Pulse Module Num */
}ODBIFSBLINE;

typedef struct tagODBIFSBINFO {
    unsigned char   fssb_line_mnt_st;   /* Mount Status */
    unsigned char   reserve;            /* Mount Status */
    unsigned short  card_num;           /* Card Num */
    ODBIFSBLINE     line_info[MAX_IFSB_LINE]; /* Line information */
}ODBIFSBINFO;

typedef struct tagODBFSSBSLVUNT {
    short   slv_unt_num;    /* Slave unit number */
    char    kind;           /* Slave kind */
    char    attrb;          /* Slave attribute */
} ODBIFSBSLVUNT;

typedef struct tagODBIFSBSLUSV {
    short   slave_num;      /* Slave Number */
    short   axis_num;       /* Axis Number */
    char    axis_name[4];   /* Axis Name */
    char    tndm;
    char    reserve[3];
} ODBIFSBSLUSV;

typedef struct tagODBIFSBSVAMP {
    short   slave_num;          /* Slave Number */
    char    name[8];            /* Amp Name */
    char    series[12];         /* Amp Series */
    char    cur[8];             /* Amp Current */
    short   as_axis_num;        /* Axis number for Auto Set */
    char    as_axis_name[4];    /* Axis name for Auto Set */
} ODBIFSBSVAMP;

typedef struct tagODBIFSBSLUSP {
    short   slave_num;      /* Slave Number */
    short   spdl_num;       /* Spindle Number */
    char    spdl_name[4];   /* Spindle Name */
} ODBIFSBSLUSP;

typedef struct tagODBIFSBSLUPM {
    short   slave_num;          /* Slave Number */
    short   axis_num[8];        /* Axis Number */
    char    axis_name[8][4];    /* Axis Name */
} ODBIFSBSLUPM;

typedef struct tagODBIFSBSPAMP {
    short   slave_num;          /* Slave Number */
    char    name[8];            /* Amp Name */
    char    series[12];         /* Amp Series */
    char    pwr[8];             /* Amp Power */
    short   as_spdl_num;        /* Spindle number for Auto Set */
    char    as_spdl_name[4];    /* Spindle name for Auto Set */
} ODBIFSBSPAMP;

typedef struct tagODBIFSBPLSMDL {
    short           slave_num;  /* Slave Number */
    char            name[8];    /* PM Name */
    char            type[8];    /* PM Type */
    unsigned short  pcb_id;     /* PM PCBID */
    char            info[24];   /* PM Information */
} ODBIFSBPLSMDL;

typedef struct tagIODBIFSBAXIS {
    short   axis_num;       /* Axis Number */
    char    axis_name[4];   /* Axis Name */
    short   line;
    char    amp_name[8];    /* Amp Name */
    short   pm[8];          /* M1 - M8 */
    short   cs;             /* Cs */
    short   tndm;           /* tandem */
} IODBIFSBAXIS;

typedef struct tagODBIFSBMNTSV {
    short   axis_num;           /* Axis Number */
    char    axis_name[4];       /* Axis Name */
    short   line;
    char    amp_name[8];        /* Amp Name */
    char    amp_series[12];     /* Amp Series */
    char    amp_cur[8];         /* Amp Current */
    char    amp_edt[8];         /* Amp Edition */
    short   amp_axis_num;       /* Amp Axis Number */
    char    amp_spec_num[23];   /* Amp Specificaion */
    char    amp_serial_num[13]; /* Amp Serial Number */
} ODBIFSBMNTSV;

typedef struct tagODBIFSBMNTSP {
    short   spdl_num;           /* Spindle Number */
    char    spdl_name[4];       /* Spindle Name */
    short   line;
    char    amp_name[8];        /* Amp Name */
    char    amp_series[12];     /* Amp Series */
    char    amp_pwr[8];         /* Amp Power */
    char    amp_edt[8];         /* Amp Edition */
    short   amp_spdl_num;       /* Amp Axis Number */
    char    amp_spec_num[23];   /* Amp Specificaion */
    char    amp_serial_num[13]; /* Amp Serial Number */
} ODBIFSBMNTSP;

typedef struct tagODBIFSBSYSALM {
    long    num_sys_alm;
    short   error_line;
    short   error_slvnum1;
    short   error_slvnum2;
    short   year;
    short   mon;
    short   day;
    short   hour;
    short   min;
    short   sec;
    char    alarm_cause[100];
} ODBIFSBSYSALM;

typedef struct tagODBIFSBFSSBUNT {
    short   slv_unt_num;    /* 僗儗乕僽儐僯僢僩斣崋 */
    short   fssb_unt_num;   /* FSSB儐僯僢僩斣崋 */
    char    name[4];        /* 柤徧 */
} ODBIFSBFSSBUNT;

typedef struct tagODBIFSBCOMSTATDTL {
    long    error_inf;      /* 僄儔乕忣曬 */
    long    jitter_inf;     /* 僕僢僞忣曬 */
    char    n_warning;      /* 僲僀僘儚乕僯儞僌僼儔僌 */
    char    j_warning;      /* 僕僢僞儚乕僯儞僌僼儔僌 */
    char    reserve[2];     /* 儕僓乕僽 */
} ODBIFSBCOMSTATDTL;

typedef struct tagODBIFSBWARNINGMSG {
    short   line;     /* 儚乕僯儞僌敪惗儔僀儞斣崋 */
    short   slv_src;  /* 儚乕僯儞僌敪惗僗儗乕僽斣崋(捠怣尦) */
    short   slv_dst;  /* 儚乕僯儞僌敪惗僗儗乕僽斣崋(捠怣愭) */
    short   type;     /* 敪惗儚乕僯儞僌僞僀僾 */
    char    wm_typ[32]; /* 儚乕僯儞僌儊僢僙乕僕(馨戚皋庬椶) */
    char    wm_pnt[32]; /* 儚乕僯儞僌儊僢僙乕僕(馨戚皋売強) */
} ODBIFSBWARNINGMSG;

typedef struct tagODBIFSBWARNHSTMSG {
    short   year;       /* 儚乕僯儞僌敪惗偟偨擭 */
    char    month;      /*                   寧 */
    char    day;        /*                   擔 */
    char    hour;       /*                   帪 */
    char    minute;     /*                   暘 */
    char    second;     /*                   昩 */
    char    dummy;
    ODBIFSBWARNINGMSG   msg_dat;    /*$ 儊僢僙乕僕 $*/
} ODBIFSBWARNHSTMSG;

/*-----------------------------------*/
/* Machine Status Monitor / Recorder */
/*-----------------------------------*/
typedef struct odbmsrhstinf {
    short   year;
    char    month;
    char    day;
    char    hour;
    char    minute;
    char    second;
    char    msu_num;
    char    path_num;
    char    pmc_num;
    unsigned short  nonsave;
    char    save_trigger;
    char    reserve[3];
} ODBMSRHSTINF ;

typedef struct tag_ODBMSUXTERM{
    char    kind;
    char    ch;
    char    atrb;
    char    dec;
    long    data;
}ODBMSUXTERM;

typedef struct tag_ODBMSUYTERM{
    short   data;
    short   dummy;
}ODBMSUYTERM;

typedef struct tag_ODBMSUINF{
    char    pmc_no;
    char    dummy[3];
    long    x_top_adrs;
    long    y_top_adrs;
}ODBMSUINF;

typedef struct odbmsudat {
    ODBMSUINF   inf;
    ODBMSUXTERM x_term[16];
    ODBMSUYTERM y_term[16];
} ODBMSUDAT ;

typedef struct odbmsrpmcsgnl {
    long    adrs;
    char    pmc_no;
    char    kind;
    char    data;
    char    mask;
    char    enbl;
    char    dummy[3];
} ODBMSRPMCSGNL ;

typedef struct odbmsrncdat {
    short       sv_num;
    short       sp_num;
    ODBAXDT     mcn[32];
    ODBAXDT     abs[32];
    ODBAXDT     spdl[8];
    ODBAXDT     actf;
    char        ex_prg_name[248];
    long        ex_blk;
    short       aut;
    short       tmmode;
    ODBCMD      m_mdl[5];
    ODBCMD      s_mdl;
    ODBCMD      t_mdl;
    ODBCMD      b_mdl;
} ODBMSRNCDAT ;

/*-----------------*/
/* CNC : EcoMode   */
/*-----------------*/
typedef struct odbpowccyc {
    unsigned long	cycletime ;
    unsigned long	powc_axis ;
    unsigned long	powc_spindle ;
    unsigned long	powc_outer ;
} ODBPOWCCYC ;

typedef struct odbpowcouter {
    unsigned long	ave_pow[8] ;
    unsigned short	ref_ofs ;
    char			ref_adrs ;
    unsigned char	ref_path ;
} ODBPOWCOUTER;

typedef struct odbpowchis {
    unsigned long	get_time ;
    unsigned long	powc_axis ;
    unsigned long	powc_spindle ;
    unsigned long	powc_outer ;
} ODBPOWCHIS ;

typedef struct odbpowchisall {
    ODBPOWCHIS		powchis[30] ;
} ODBPOWCHISALL ;

/*---------------------------------*/
/* CNC : Power Consumption Monitor */
/*---------------------------------*/
/* cnc_pwcm_rd_consump:read power consumption */
typedef struct odbpwcm {
    long consump ;          /* Integral power consumption */
    long regen ;            /* Integral power regeneration */
    long net ;              /* Integral net amount of power consumption */
    long present ;          /* Present net power consumption */
} ODBPWCM ;

typedef struct odbpwcmdat {
    unsigned long time ;           /* Integrating time of power consumption */
    short   axis_num ;             /* Number of servo axis */
    short   spindle_num ;          /* Number of spindle axis */
    ODBPWCM all ;                  /* Power consumption of all axes */
    ODBPWCM axis[MAX_AXIS] ;       /* Power consumption of each servo axis */
    ODBPWCM spindle[MAX_SPINDLE] ; /* Power consumption of each spindle axis */
} ODBPWCMDAT ;

/*---------------*/
/* CNC : GRAPHIC */
/*---------------*/

/* cnc_rd_grppos:read graphic position */
typedef struct posval {
    long	data ;			/* Value */
    long	dec ;			/* Decimal places */
} POSVAL ;

typedef struct odbgrppos {
    POSVAL	abs ;			/* Absolute position */
    POSVAL	mcn ;			/* Machine position */
    short	feed_type ;		/* Feed type */
    short	reserved ;		/* Padding */
} ODBGRPPOS ;

/* cnc_rdgrpaxisinfo:read graphic axis information */
typedef struct odbgrpaxis {
    short	path_num ;		/* Path number */
    short	draw_num ;		/* Drawing axis number */
} ODBGRPAXIS ;

typedef struct odbwact {
    long    data[6] ;       /* Valule */
} ODBWACT ;

#if defined (PMD) /* only Power Mate D/H */
/*------------------------------*/
/* MAXIS: Axis Movement Control */
/*------------------------------*/
/* cnc_opdi:signal operation command */
typedef struct odbopdi {
    short	axis;	/* axis number */
    union {
        char	cdata;
        short	idata;
        long	ldata;
    } u;
} ODBOPDI;

/* cnc_abspoint:absolute movement */
/* cnc_incpoint:incremental movement */
/* cnc_dwell:dwell */
/* cnc_coordre:coordinate establihment */
typedef struct odbpos {
    short	idata;	/* axis number */
    long	ldata;	/* coordinate value */
} ODBPOS;

/* cnc_refpoint:reference point return */
/* cnc_abspoint:absolute movement */
/* cnc_incpoint:incremental movement */
/* cnc_dwell:dwell */
/* cnc_coordre:coordinate establihment */
/* cnc_exebufstat:reading of the executive buffer condition */
typedef struct odbexec {
    short	dummy;		/* dummy */
    char	cdata[2][8];	/* the infomation of the executive condition of */
} ODBEXEC;			/* each PATH                                    */

/* cnc_finstate:Reading of the execution completion condition */
/* cnc_setfin:Release of the reading mode of the execution completion condition */
typedef struct odbfin {
    short	dummy;		/* dummy */
    char	cdata[8];	/* the infomation of the complete notice flag */
} ODBFIN;			/* condition of each PATH                     */
#endif

/*-----*/
/* PMC */
/*-----*/

/* pmc_rdpmcrng:read PMC data(area specified) */
/* pmc_wrpmcrng:write PMC data(area specified) */
#if defined (PMCMEMD)
typedef struct iodbpmc {
    short            type_a ;    /* PMC address type */
    short            type_d ;    /* PMC data type */
    unsigned short   datano_s ;  /* start PMC address */
    unsigned short   datano_e ;  /* end PMC address */
    union {
        char    cdata[5] ;  /* PMC data */
        short   idata[5] ;
        long    ldata[5] ;
    } u ;
} IODBPMC ; /* In case that the number of data is 5 */
#else
typedef struct iodbpmc {
    short   type_a ;    /* PMC address type */
    short   type_d ;    /* PMC data type */
    short   datano_s ;  /* start PMC address */
    short   datano_e ;  /* end PMC address */
    union {
        char    cdata[5] ;  /* PMC data */
        short   idata[5] ;
        long    ldata[5] ;
    } u ;
} IODBPMC ; /* In case that the number of data is 5 */
#endif

typedef struct  iodbrwpmc {
    short           type_rw ;
    short           type_a ;
    short           type_d ;
    unsigned short  datano_s ;
    short           length ;
    short           conv ;
    short           err_code ;
    short           reserved;
    void            *data ;
} IODBRWPMC ;

/* pmc_rdpmcinfo:read informations of PMC data */
typedef struct odbpmcinf {
    short   datano ;
    struct {
        char    pmc_adr ;
        char    adr_attr ;
        unsigned short  top_num ;
        unsigned short  last_num ;
    } info[64] ;
} ODBPMCINF ;

/* pmc_rdcntldata:read PMC parameter data table control data */
/* pmc_wrcntldata:write PMC parameter data table control data */
typedef struct iodbpmccntl {
    short   datano_s ;
    short   dummy ;
    short   datano_e ;
    struct {
        char    tbl_prm ;
        char    data_type ;
        unsigned short  data_size ;
        unsigned short  data_dsp ;
        short   dummy ;
    } info[100] ;
} IODBPMCCNTL ;

/* pmc_rdalmmsg:read PMC alarm message */
typedef struct  odbpmcalm {
    char    almmsg[128] ;    /* alarm message */
} ODBPMCALM ;

/* pmc_getdtailerr:get detail error for pmc */
typedef struct odbpmcerr {
    short   err_no ;
    short   err_dtno ;
} ODBPMCERR ;

/* pmc_rdpmctitle:read pmc title data */
typedef struct  odbpmctitle {
    char    mtb[48];
    char    machine[48];
    char    type[48];
    char    prgno[8];
    char    prgvers[4];
    char    prgdraw[48];
    char    date[32];
    char    design[48];
    char    written[48];
    char    remarks[48];
} ODBPMCTITLE ;

/* pmc_rdpmctitle2:read pmc title data */
typedef struct  odbpmctitle2 {
    char    mtb[48];
    char    machine[48];
    char    type[48];
    char    prgno[16];
    char    prgvers[16];
    char    prgdraw[48];
    char    date[32];
    char    design[48];
    char    written[48];
    char    remarks[48];
} ODBPMCTITLE2 ;

/* pmc_rdpmcrng_ext:read PMC data */
typedef struct iodbpmcext {
    short	type_a ;	/* PMC address type */
    short	type_d ;	/* PMC data type */
    short	datano_s ;	/* start PMC address */
    short	datano_e ;	/* end PMC address */
    short	err_code ;	/* error code */
    short	reserved ;	/* reserved */
    void	*data ;		/* pointer to buffer */
} IODBPMCEXT ;

/* pmc_rdpmcaddr:read PMC address information */
typedef struct odbpmcadr {
    unsigned short pmc_adr ;	/* PMC address type */
    unsigned short adr_attr ;	/* PMC address attribute */
    unsigned long  adr ;		/* offset address from the top of the PMC address area */
    unsigned long  top ;		/* top number of the PMC address area */
    unsigned long  num ;		/* number of the PMC address area */
} ODBPMCADR ;

/* pmc_read_seq_program_and_memory_type:Reads sequence program and momory type */
typedef struct
{
   unsigned long SystemType;
   unsigned long SystemAttribute;
   unsigned long TargetType;
   unsigned long TargetAttribute;
   char          SystemTypeStr[32];
   char          TargetTypeStr[32];
} ODBPMCLADMEMTYPE;

/* pmc_convert_from_string_to_address:Convert to PMC address information from address or symbol string */
typedef struct odbpmcadrinfo
{
   short sPmcUnit;      /*j PMC unittype */
   short sAdrType;      /*j ID code indicating the PMC address type */
   long  iAdrNum;       /*j number of PMC address */
   short sBitPos;       /*j bit position of PMC address */
   short sDataType;     /*j deta type of PMC address */
} ODBPMCADRINFO;

/*--------------------------*/
/* PROFIBUS function        */
/*--------------------------*/

/* pmc_prfrdcinfo:read PROFIBUS information data */
typedef struct odbprfinfo {
    unsigned short series ;
    unsigned short vers1 ;
    unsigned short vers2 ;
    unsigned short profi ;
} ODBPRFINFO ;

/* pmc_prfrdconfig:read PROFIBUS configration data */
typedef struct odbprfcnf {
    char    master_ser[5] ;
    char    master_ver[3] ;
    char    slave_ser[5] ;
    char    slave_ver[3] ;
    char    cntl_ser[5] ;
    char    cntl_ver[3] ;
} ODBPRFCNF ;

/* pmc_prfrdbusprm:read bus parameter for master function */
/* pmc_prfwrbusprm:write bus parameter for master function */
typedef struct iodbbusprm {
    char           fdl_add ;
    char           baudrate ;
    unsigned short tsl ;
    unsigned short min_tsdr ;
    unsigned short max_tsdr ;
    unsigned char  tqui ;
    unsigned char  tset ;
    long           ttr ;
    char           gap ;
    char           hsa ;
    char           max_retry ;
    unsigned char  bp_flag ;
    unsigned short min_slv_int ;
    unsigned short poll_tout ;
    unsigned short data_cntl ;
    char           reserve1[6] ;
    char           cls2_name[32] ;
    short          user_dlen ;
    char           user_data[62] ;
    char           reserve2[96] ;
} IODBBUSPRM ;

/* pmc_prfrdslvprm:read slave parameter for master function */
/* pmc_prfwrslvprm:write slave parameter for master function */
typedef struct iodbslvprm {
    short          dis_enb ;
    unsigned short ident_no ;
    unsigned char  slv_flag ;
    unsigned char  slv_type ;
    char           reserve1[12] ;
    unsigned char  slv_stat ;
    unsigned char  wd_fact1 ;
    unsigned char  wd_fact2 ;
    unsigned char  min_tsdr ;
    char           reserve2 ;
    unsigned char  grp_ident ;
    short          user_plen ;
    char           user_pdata[32] ;
    short          cnfg_dlen ;
    char           cnfg_data[126] ;
    short          slv_ulen ;
    char           slv_udata[30] ;
    char           reserve3[8] ;
} IODBSLVPRM ;

typedef struct iodbslvprm2 {
    short          dis_enb ;
    unsigned short ident_no ;
    unsigned char  slv_flag ;
    unsigned char  slv_type ;
    char           reserve1[12] ;
    unsigned char  slv_stat ;
    unsigned char  wd_fact1 ;
    unsigned char  wd_fact2 ;
    unsigned char  min_tsdr ;
    char           reserve2 ;
    unsigned char  grp_ident ;
    short          user_plen ;
    char           user_pdata[206] ;
    short          cnfg_dlen ;
    char           cnfg_data[126] ;
    short          slv_ulen ;
    char           slv_udata[30] ;
    char           reserve3[8] ;
} IODBSLVPRM2 ;

/* pmc_prfrdallcadr:read allocation address for master function */
/* pmc_prfwrallcadr:set allocation address for master function */
typedef struct iodbprfadr {
    char           di_size ;
    char           di_type ;
    unsigned short di_addr ;
    short          reserve1;
    char           do_size ;
    char           do_type ;
    unsigned short do_addr ;
    short          reserve2;
    char           dgn_size ;
    char           dgn_type ;
    unsigned short dgn_addr ;
} IODBPRFADR ;

/* pmc_prfrdslvaddr:read allocation address for slave function */
/* pmc_prfwrslvaddr:set allocation address for slave function */
typedef struct iodbslvadr {
    char           slave_no ;
    char           di_size ;
    char           di_type ;
    unsigned short di_addr ;
    char           do_size ;
    char           do_type ;
    unsigned short do_addr ;
    char           reserve[7] ;
} IODBSLVADR ;

/* pmc_prfrdslvstat:read status for slave function */
typedef struct odbslvst {
    unsigned char  cnfg_stat ;
    unsigned char  prm_stat ;
    char           wdg_stat ;
    unsigned char  live_stat ;
    short          ident_no ;
} ODBSLVST ;

/* pmc_prfrdslvid:Reads slave index data of master function */
/* pmc_prfwrslvid:Writes slave index data of master function */
typedef struct {
    short          dis_enb ;
    short          slave_no ;
    short          nsl ;
    unsigned char  dgn_size ;
    char           dgn_type ;
    unsigned short dgn_addr ;
} IODBSLVID ;

/* pmc_prfrdslvprm2:Reads slave parameter of master function(2) */
/* pmc_prfwrslvprm2:Writes slave parameter of master function(2) */
typedef struct {
    unsigned short ident_no ;
    unsigned char  slv_flag ;
    unsigned char  slv_type ;
    char           reserve1[12] ;
    unsigned char  slv_stat ;
    unsigned char  wd_fact1 ;
    unsigned char  wd_fact2 ;
    unsigned char  min_tsdr ;
    char           reserve2 ;
    unsigned char  grp_ident ;
    short          user_plen ;
    char           user_pdata[206] ;
    short          slv_ulen ;
    char           slv_udata[30] ;
} IODBSLVPRM3 ;

/* pmc_prfrddido:Reads DI/DO parameter of master function */
/* pmc_prfwrdido:Writes DI/DO parameter of master function */
typedef struct {
    short          slave_no ;
    short          slot_no ;
    unsigned char  di_size ;
    char           di_type ;
    unsigned short di_addr ;
    unsigned char  do_size ;
    char           do_type ;
    unsigned short do_addr ;
    short          shift;
    unsigned char  module_dlen ;
    char           module_data[128] ;
} IODBDIDO ;

/* pmc_prfrdindiadr:Reads indication address of master function */
/* pmc_prfwrindiadr:Writes indication address of master function */
typedef struct {
    unsigned char  dummy ;
    char           indi_type ;
    unsigned short indi_addr ;
} IODBINDEADR ;


/*-----------------------------------*/
/* CB : CUSTOMER'S BOARD function    */
/*-----------------------------------*/

typedef struct odbtransinfo {
    long    mas_buff_size;
    short   trans_start_reqflag;
    short   trans_end_reqflag;
    short   trans_start_respflag;
    short   trans_end_respflag;
    long    all_transfer_size;
    short   data_id;
    short   reserve;
    long    data_write_pt;
    long    data_read_pt;
    long    accumulation_counter;
    short   forwarding_status;
} ODBTRANSINFO ;


/*-----------------------------------------------*/
/* DS : Data server & Ethernet board function    */
/*-----------------------------------------------*/

/* etb_rdparam : read the parameter of the Ethernet board */
/* etb_wrparam : write the parameter of the Ethernet board */
typedef struct _tcpprm {
    char OwnIPAddress[16];
    char SubNetMask[16];
    char RouterIPAddress[16];
} TCPPRM;

typedef struct _hostprm {
    unsigned short DataServerPort;
    char           DataServerIPAddress[16];
    char           DataServerUserName[32];
    char           DataServerPassword[32];
    char           DataServerLoginDirectory[128];
} HOSTPRM;

typedef struct _ftpprm {
    char FTPServerUserName[32];
    char FTPServerPassword[32];
    char FTPServerLoginDirectory[128];
} FTPPRM;

typedef struct _etbprm {
    char  OwnMACAddress[13];
    short MaximumChannel;
    short HDDExistence;
    short NumberOfScreens;
} ETBPRM;

typedef struct _iodbetp {
    short ParameterType;
    union {
        TCPPRM  tcp;
        HOSTPRM host;
        FTPPRM  ftp;
        ETBPRM  etb;
    } prm;
} IODBETP;

/* etb_rderrmsg : read the error message of the Ethernet board */
typedef struct _odbetmsg {
    char title[33];
    char message[10][39];
} ODBETMSG;

/* ds_rdhddinfo : read information of the Data Server's HDD */
typedef struct _odbhddinf {
    long file_num;
    long remainder_l;
    long remainder_h;
    char current_dir[32];
} ODBHDDINF;

/* ds_rdhdddir : read the file list of the Data Server's HDD */
typedef struct _odbhdddir {
    char  file_name[64];
    char  comment[80];
    short attribute;
    short reserved;
    long  size;
    char  date[16];
} ODBHDDDIR;

/* ds_rdhostdir : read the file list of the host */
typedef struct _odbhostdir {
    char host_file[128];
} ODBHOSTDIR;

/* ds_rdmntinfo : read maintenance information */
typedef struct _dsmntinfo {
    unsigned short empty_cnt;
    unsigned long  total_size;
    unsigned short ReadPtr;
    unsigned short WritePtr;
} DSMNTINFO;


/*----------------------------*/
/* NET : Ethernet function    */
/*----------------------------*/
typedef struct _common_prm {
    char                    OwnMacAddress[13];
    char                    OwnIpAddress[40];
    char                    SubNetmask[16];
    char                    RouterIpAddress[40];
    char                    DnsServer1IpAddress[40];
    char                    DnsServer2IpAddress[40];
    char                    OwnHostName[32];
    char                    OwnDomain[63];
} COMMON_PRM;

typedef struct _focas2_prm {
    unsigned long           TcpPort;
    unsigned long           UdpPort;
    unsigned long           TimeInterval;
} FOCAS2_PRM;

typedef struct _ftp_client_prm {
    char                    HostName[64];
    unsigned long           ControlPort;
    unsigned long           Dummy;
    char                    UserName[32];
    char                    Password[32];
    char                    LoginDirectory[128];
} FTP_CLIENT_PRM;

typedef struct _ftp_server_prm {
    char                    UserName[32];
    char                    Password[32];
    char                    LoginDirectory[128];
} FTP_SERVER_PRM;

typedef struct _ftptrans_prm {
    FTP_CLIENT_PRM          opposite[3];
} FTPTRANS_PRM;

typedef struct _dtsvr_prm {
    FTP_CLIENT_PRM          opposite[3];
    FTP_SERVER_PRM          own;
} DTSVR_PRM;

typedef struct _rmtdiag_client_prm {
    char                    HostName[64];
    unsigned long           Port;
    char                    InquiryName[64];
} RMTDIAG_CLIENT_PRM;

typedef struct _rmtdiag_prm {
    char                    MtbInformation[17];
    char                    MachineInformation[17];
    RMTDIAG_CLIENT_PRM      opposite[3];
} RMTDIAG_PRM;

typedef struct _factolink_client_prm {
    char                    HostName[64];
    unsigned long           Port;
} FACTOLINK_CLIENT_PRM;

typedef struct _factolink_prm {
    FACTOLINK_CLIENT_PRM    opposite[3];
} FACTO_PRM;

typedef struct _maintain_ping_prm {
    char                    HostName[64];
    unsigned short          Count;
} PING_PRM;

typedef struct _maintain_prm {
    PING_PRM                opposite;
} MAINTAIN_PRM;

typedef struct _netsrv_prm {
    char                    HostName[64];
    unsigned long           Port;
    unsigned long           TimeInterval;
    unsigned long           UdpPeriod;
    char                    MachineNumber[25];
    char                    dummy1[7];
    char                    AcceptanceReply[25];
    char                    dummy2[7];
    char                    ErrorReply[25];
    char                    dummy3[7];
} NETSRV_PRM;

typedef struct _unsolicmsg_prm {
    char                    HostName[64];
    unsigned long           Port;
    unsigned short          RetryCount;
    unsigned short          Timeout;
    unsigned short          AliveTime;
    char                    dummy1[8];
    UNSOLICMSG_TYPE_PRM     Control;
    unsigned short          TransmissionNumber;
    char                    dummy2[14];
    UNSOLICMSG_TYPE_PRM     Transmission[3];
} UNSOLICMSG_PRM;

typedef struct _pmc_addr {
    unsigned short          Path;
    short                   Kind;
    unsigned long           Address;
} PMC_ADDR;

typedef struct _mbsvr_area_prm {
    unsigned long           DatSize;
    unsigned long           DatModAddr;
    PMC_ADDR                DatPmcAddr;
} MBSVR_AREA_PRM;

typedef struct _mbsvr_prm {
    unsigned long           TcpPort;
    unsigned short          Option1;
    unsigned short          Option2;
    PMC_ADDR                StsPmcAddr;
    MBSVR_AREA_PRM          AreaPrm[3];
} MBSVR_PRM;

typedef struct _user_account_prm {
    char    UserName[32];
    char    Password[32];
} USER_ACCOUNT_PRM;

typedef struct _httpsvr_prm {
    unsigned long           TcpPort;
    unsigned long           Timeout;
    USER_ACCOUNT_PRM        UserAccount[2];
} HTTPSVR_PRM;

typedef struct _stsntf_prm {
    unsigned long           PopSvrPort;
    unsigned long           SmtpSvrPort;
    USER_ACCOUNT_PRM        UserAccount[1];
} STSNTF_PRM;

typedef struct _common_prm_flg {
    char                    OwnIpAddress;
    char                    SubNetmask;
    char                    RouterIpAddress;
    char                    DnsServer1IpAddress;
    char                    DnsServer2IpAddress;
    char                    OwnHostName;
    char                    OwnDomain;
} COMMON_PRM_FLG;

typedef struct _focas2_prm_flg {
    char                    TcpPort;
    char                    UdpPort;
    char                    TimeInterval;
} FOCAS2_PRM_FLG;

typedef struct _ftp_client_prm_flg {
    char                    HostName;
    char                    ControlPort;
    char                    Dummy;
    char                    UserName;
    char                    Password;
    char                    LoginDirectory;
} FTP_CLIENT_PRM_FLG;

typedef struct _ftp_server_prm_flg {
    char                    UserName;
    char                    Password;
    char                    LoginDirectory;
} FTP_SERVER_PRM_FLG;

typedef struct _ftptrans_prm_flg {
    FTP_CLIENT_PRM_FLG      opposite[3];
} FTPTRANS_PRM_FLG;

typedef struct _dtsvr_prm_flg {
    FTP_CLIENT_PRM_FLG      opposite[3];
    FTP_SERVER_PRM_FLG      own;
} DTSVR_PRM_FLG;

typedef struct _rmtdiag_client_prm_flg {
    char                    HostName;
    char                    Port;
    char                    InquiryName;
} RMTDIAG_CLIENT_PRM_FLG;

typedef struct _rmtdiag_prm_flg {
    char                    MtbInformation;
    char                    MachineInformation;
    RMTDIAG_CLIENT_PRM_FLG  opposite[3];
} RMTDIAG_PRM_FLG;

typedef struct _facto_client_prm_flg {
    char                    HostName;
    char                    Port;
} FACTO_CLIENT_PRM_FLG;

typedef struct _facto_prm_flg {
    FACTO_CLIENT_PRM_FLG    opposite[3];
} FACTO_PRM_FLG;

typedef struct _ping_prm_flg {
    char                    HostName;
    char                    Count;
} PING_PRM_FLG;

typedef struct _maintain_prm_flg {
    PING_PRM_FLG            opposite;
} MAINTAIN_PRM_FLG;

typedef struct _netsrv_prm_flg {
    char                    HostName;
    char                    Port;
    char                    TimeInterval;
    char                    UdpPeriod;
    char                    MachineNumber;
    char                    AcceptanceReply;
    char                    ErrorReply;
} NETSRV_PRM_FLG;

typedef struct _unsolicmsg_type_prm_flg {
    char                    Type;
    char                    dummy1[3];
    union {
        struct {
            char            PathKindAddress;
            char            Size;
        } Pmc;
        struct {
            char            PathNo;
            char            Number;
        } Macro;
    } Prm;
    char                    dummy2[2];
} UNSOLICMSG_TYPE_PRM_FLG;

typedef struct _unsolicmsg_prm_flg {
    char                    HostName;
    char                    Port;
    char                    RetryCount;
    char                    Timeout;
    char                    AliveTime;
    char                    dummy1[3];
    UNSOLICMSG_TYPE_PRM_FLG Control;
    char                    TransmissionNumber;
    char                    dummy2[3];
    UNSOLICMSG_TYPE_PRM_FLG Transmission[3];
} UNSOLICMSG_PRM_FLG;

typedef struct _mbsvr_area_prm_flg {
    char                    DatSize;
    char                    DatModAddr;
    char                    DatPmcAddr;
    char                    dummy;
} MBSVR_AREA_PRM_FLG;

typedef struct _mbsvr_prm_flg {
    char                    TcpPort;
    char                    Option1;
    char                    Option2;
    char                    StsPmcAddr;
    MBSVR_AREA_PRM_FLG      AreaPrm[3];
} MBSVR_PRM_FLG;

typedef struct _user_account_prm_flg {
    char    UserName;
    char    Password;
} USER_ACCOUNT_PRM_FLG;

typedef struct _httpsvr_prm_flg {
    char                    TcpPort;
    char                    Timeout;
    USER_ACCOUNT_PRM_FLG    UserAccount[2];
} HTTPSVR_PRM_FLG;

typedef struct _stsntf_prm_flg {
    char                    PopSvrPort;
    char                    SmtpSvrPort;
    USER_ACCOUNT_PRM_FLG    UserAccount[1];
} STSNTF_PRM_FLG;

/* eth_wrparam : */
typedef struct _in_ethprm_flag {
    union {
        COMMON_PRM_FLG      common;
        FOCAS2_PRM_FLG      focas2;
        FTPTRANS_PRM_FLG    ftpTrans;
        DTSVR_PRM_FLG       dataServer;
        RMTDIAG_PRM_FLG     remoteDiag;
        FACTO_PRM_FLG       factolink;
        MAINTAIN_PRM_FLG    maintain;
        NETSRV_PRM_FLG      netservice;
        UNSOLICMSG_PRM_FLG  unsolicmsg;
        MBSVR_PRM_FLG       mbsvr;
        HTTPSVR_PRM_FLG     httpsvr;
        STSNTF_PRM_FLG      stsntf;
    } flg;
} IN_ETHPRMFLAG;

typedef struct _in_ethprm {
    short                   reserve01;
    short                   reserve02;
    short                   reserve03;
    short                   reserve04;
    short                   reserve05;
    short                   reserve06;
    union {
        COMMON_PRM          common;
        FOCAS2_PRM          focas2;
        FTPTRANS_PRM        ftpTrans;
        DTSVR_PRM           dataServer;
        RMTDIAG_PRM         remoteDiag;
        FACTO_PRM           factolink;
        MAINTAIN_PRM        maintain;
        NETSRV_PRM          netservice;
        UNSOLICMSG_PRM      unsolicmsg;
        MBSVR_PRM           mbsvr;
        HTTPSVR_PRM         httpsvr;
        STSNTF_PRM          stsntf;
    } prm;
} IN_ETHPRM;

/* eth_rdparam : */
typedef struct _out_ethprm {
    unsigned short          Option;
    short                   Type;
    short                   Dhcp;
    short                   ValidDevice;
    short                   DtsvrChannel;
    short                   Storage;
    union {
        COMMON_PRM          common;
        FOCAS2_PRM          focas2;
        FTPTRANS_PRM        ftpTrans;
        DTSVR_PRM           dataServer;
        RMTDIAG_PRM         remoteDiag;
        FACTO_PRM           factolink;
        MAINTAIN_PRM        maintain;
        NETSRV_PRM          netservice;
        UNSOLICMSG_PRM      unsolicmsg;
        MBSVR_PRM           mbsvr;
        HTTPSVR_PRM         httpsvr;
        STSNTF_PRM          stsntf;
    } prm;
} OUT_ETHPRM;

typedef struct _out_ethdsmode {
    short                   DsMode[10];
} OUT_ETHDSMODE;

typedef struct _out_ethping1shot {
    unsigned short          MsgId;
    char                    IpAddress[64];
} OUT_ETHPING1SHOT;

/* eth_ping_result : */
typedef struct _out_ethping {
    short                   Device;
    short                   Count;
    OUT_ETHPING1SHOT        reply[10];
} OUT_ETHPING;

typedef struct _emblsi {
    unsigned short          Collision;
    unsigned short          CarrierSenseLost;
    unsigned short          DelayOver;
    unsigned short          Underrun;
    unsigned short          SendParityError;
    unsigned short          AlignmentError;
    unsigned short          CrcError;
    unsigned short          Overrun;
    unsigned short          FrameLengthViolation;
    unsigned short          RecvParityError;
} EMBLSI;

typedef struct _boardlsi {
    unsigned short          SendRetryOver;
    unsigned short          Collision;
    unsigned short          CarrierSenseLost;
    unsigned short          NoCarrier;
    unsigned short          InvalidFrameLength;
    unsigned short          CrcError;
    unsigned short          ShortFrame;
    unsigned short          LongFrame;
    unsigned short          OddFrame;
    unsigned short          Overflow;
    unsigned short          PhyLsiError;
} BOARDLSI;

/* eth_rdlsistate : */
typedef struct _out_ethlsi {
    short                   Type;
    short                   Baudrate;
    unsigned short          RecvPacketCount;
    unsigned short          RecvBroadcastCount;
    unsigned short          SendPacketCount;
    union {
        EMBLSI              emb;
        BOARDLSI            board;
    } lst;
} OUT_ETHLSI;

typedef struct _tsk_sts {
    unsigned short          StsId;
    char                    Status[30];
} TSK_STS;

/* eth_rdtaskstate : */
typedef struct _out_ethtask {
    short                   Type;
    short                   Count;
    char                    pad[12];
    TSK_STS                 task[32];
} OUT_ETHTASK;

typedef struct _out_ethlog1shot {
    short                   Type;
    unsigned short          MsgId;
    unsigned char           Year;
    unsigned char           Month;
    unsigned char           Day;
    unsigned char           Hour;
    unsigned char           Minute;
    unsigned char           Second;
    char                    reserve[2];
    char                    Text[84];
} OUT_ETHLOG1SHOT;

/* eth_rdlog : */
typedef struct _out_ethlog {
    short                   Count;
    char                    reserve[14];
    OUT_ETHLOG1SHOT         logData[15];
} OUT_ETHLOG;

/* eth_rdtype : */
typedef struct _out_ethtype {
    short                   Kind;
    short                   FunctionEmb;
    short                   FunctionBoard;
    short                   FunctionEmbCe;
} OUT_ETHTYPE;

/* eth_rdtype2 : */
typedef struct _out_ethtype2 {
    unsigned short          Kind;
    short                   dummy;
    unsigned long           FunctionEmb;
    unsigned long           FunctionEmbPcm;
    unsigned long           FunctionBoard;
    unsigned long           FunctionEmbCe;
    unsigned long           FunctionEmbCePcm;
} OUT_ETHTYPE2;

/* eth_rdtype3 : */
typedef struct _out_ethtype3 {
    unsigned long           Kind;
    unsigned short          KindFLnet;
    short                   Pad;
    unsigned long           FunctionEmb;
    unsigned long           FunctionEmbPcm;
    unsigned long           FunctionBoard;
    unsigned long           FunctionEmbCe;
    unsigned long           FunctionEmbCePcm;
    unsigned long           FunctionReserve;
} OUT_ETHTYPE3;

/* eth_rddsstate : */
typedef struct _out_dsstate {
    short                   DtsvrChannel;
    short                   pad;
    short                   Mode;
    unsigned short          EmptyCount;
    unsigned long           TotalSize;
    unsigned short          WritePtr;
    unsigned short          ReadPtr;
} OUT_DSSTATE;

/* eth_rdunsolicstate : */
typedef struct _out_unsolicstate {
    char                    IpAddress[64];
    unsigned short          status;
} OUT_UNSOLICSTATE;

/* eth_rdfsclntinfo : */
typedef struct _clnt_info {
    char                    IpAddress[64];
    long                    SocketId;
    unsigned long           ConnectTime;
} CLNT_INFO;

typedef struct _out_fsinfo {
    short                   Number;
    unsigned char           pad[2];
    CLNT_INFO               clntinfo[10];
} OUT_FSINFO;

/* eth_rdmbsclntinfo : */
typedef struct _mbsvr_clnt_info {
    char                    IpAddress[64];
    unsigned long           ConnectTime;
} MBSVR_CLNT_INFO;

typedef struct _out_mbsvrinfo {
    short                   Number;
    unsigned char           pad[2];
    MBSVR_CLNT_INFO         clntinfo[10];
} OUT_MBSVRINFO;

/* net_rdtype : */
typedef struct _out_fl_devtype {
    unsigned short          Kind1;
    unsigned char           pad1[2];
    unsigned long           FunctionFLnet1;
    unsigned short          Kind2;
    unsigned char           pad2[2];
    unsigned long           FunctionFLnet2;
} FL_DEVTYPE;

typedef struct _out_pnc_devtype {
    unsigned short          Kind;
    unsigned char           pad[2];
    unsigned long           FunctionPnc;
} PNC_DEVTYPE;

typedef struct _out_netdevprm {
    union {
       FL_DEVTYPE           Fldevtype;
       PNC_DEVTYPE          Pncdevtype;
    } prm;
} OUT_NETDEVPRM;

/*----------------------------*/
/* NET : EtherNet/IP function */
/*----------------------------*/

typedef struct _eip_common_prm {
    unsigned short          TcpPort;
    unsigned short          UdpPort;
    char                    DiDataOnAbnormal;
    unsigned char           Option1;
    char                    pad[2];
} EIP_COMMON_PRM;

typedef struct _eipa_basic_prm {
    EIP_COMMON_PRM          Common;
    unsigned char           Option2;
    unsigned char           AllocMax;
    unsigned short          ConnectMax;
    unsigned short          RPI_Min;
    unsigned short          RPI_Max;
    struct {
        unsigned short      Path;
        short               Addr;
        unsigned long       No;
    }                       Status;
    unsigned long           StatusSize;
} EIPA_BASIC_PRM;

typedef EIPA_BASIC_PRM      OUT_EIPA_BASIC_PRM;
typedef EIPA_BASIC_PRM       IN_EIPA_BASIC_PRM;

typedef struct _in_eip_common_prm_flg {
    char                    TcpPort;
    char                    UdpPort;
    char                    DiDataOnAbnormal;
    char                    Option1;
    char                    pad[4];
} IN_EIP_COMMON_PRM_FLG;

typedef struct _in_eipa_basic_prm_flg {
    IN_EIP_COMMON_PRM_FLG   Common;
    char                    Option2;
    char                    pad[5];
    char                    Status;
    char                    StatusSize;
} IN_EIPA_BASIC_PRM_FLG;

typedef struct _eip_type_prm {
    unsigned short          Type;
    char                    pad[2];
    union {
        struct {
            unsigned short  Path;
            short           Addr;
            unsigned long   No;
            unsigned long   Size;
        } pmc;
        struct {
            unsigned short  Path;
            char            pad[2];
            unsigned long   No;
            unsigned long   Num;
        } macro;
    } prm;
    char                    TagName[28];
    char                    pad2[4];
} EIP_TYPE_PRM;

typedef struct _eipa_alloc_prm {
    char                    State;
    unsigned char           Option;
    char                    pad[2];
    EIP_TYPE_PRM            DI;
    EIP_TYPE_PRM            DO;
} EIPA_ALLOC_PRM;

typedef EIPA_ALLOC_PRM      OUT_EIPA_ALLOC_PRM;
typedef EIPA_ALLOC_PRM       IN_EIPA_ALLOC_PRM;

typedef struct _eip_type_prm_flg {
    char                    Type;
    char                    pad1[2];
    char                    Address;
    char                    Size;
    char                    TagName;
    char                    pad2[2];
} IN_EIP_TYPE_PRM_FLG;

typedef struct _in_eipa_alloc_prm_flg{
    char                    State;
    char                    Option;
    char                    pad[2];
    IN_EIP_TYPE_PRM_FLG     DI;
    IN_EIP_TYPE_PRM_FLG     DO;
} IN_EIPA_ALLOC_PRM_FLG;

typedef struct _out_eip_msnsinfo {
    char                    ModuleStatus;
    char                    NetworkStatus;
    char                    pad[2];
} OUT_EIP_MSNSINFO;

typedef struct _out_eip_deviceinfo {
    unsigned short          VendorId;
    unsigned short          DeviceType;
    unsigned short          ProductCode;
    unsigned char           MajorRevision;
    unsigned char           MinorRevision;
    unsigned long           SerialNo;
} OUT_EIP_DEVICEINFO;

typedef struct _out_eipa_scndata {
    long                    ConnectionId;
    unsigned long           ConnectTime;
    char                    IpAddress[40];
} OUT_EIPA_SCNDATA;

typedef struct _out_eip_listdetail {
    char                    IpAddress[40];
    unsigned long           ConnectTime;
    char                    ApplicationType;
    char                    pad1;
    unsigned short          O2T_RPI;
    unsigned short          T2O_RPI;
    unsigned short          O2T_API;
    unsigned short          T2O_API;
    unsigned short          RecvPacket;
    unsigned short          SendPacket;
    unsigned short          LostPacket;
    short                   AllocationId;
    char                    pad2[2];
} OUT_EIP_LISTDETAIL;

typedef struct _eip_unuse_addr {
    unsigned short          Param1;
    short                   Param2;
    unsigned long           Param3;
} EIP_UNUSE_ADDR;

typedef struct _eip_pmc_addr {
    unsigned short          Path;
    short                   Addr;
    unsigned long           No;
} EIP_PMC_ADDR;

typedef struct _eip_multi_addr {
    union {
        EIP_UNUSE_ADDR      Unuse;
        EIP_PMC_ADDR        Pmc;
    } Prm;
} EIP_MULTI_ADDR;

typedef struct _eips_basic_prm {
    EIP_COMMON_PRM          Common;
    unsigned short          Network;
    unsigned char           pad[2];
    unsigned char           Option2;
    unsigned char           AllocMax;
    unsigned short          ConnectMax;
    unsigned short          RPI_Min;
    unsigned short          RPI_Max;
    EIP_PMC_ADDR            StatusAddr;
    unsigned long           StatusSize;
} EIPS_BASIC_PRM;

typedef EIPS_BASIC_PRM   IN_EIPS_BASIC_PRM;
typedef EIPS_BASIC_PRM  OUT_EIPS_BASIC_PRM;

typedef struct _out_eips_state_prm {
    unsigned char           State[32];
    char                    reserve[32];
} OUT_EIPS_STATE_PRM;

typedef struct _eips_conn_prm {
    unsigned long           AssemblyInstance;
    unsigned short          Type;
    char                    pad1[2];
    EIP_MULTI_ADDR          Addr;
    unsigned long           Size;
    unsigned long           RPI;
    unsigned short          TransportType;
    unsigned short          HeaderFormat;
    unsigned short          Priority;
    char                    pad2[2];
    char                    reserve[28];
    char                    pad3[4];
} EIPS_CONN_PRM;

typedef struct _eips_electronic_key {
    unsigned short          VendorID;
    unsigned short          DeviceType;
    unsigned short          ProductCode;
    unsigned char           MajorRevision;
    unsigned char           MinorRevision;
    unsigned char           Compatibility;
    char                    pad[3];
} EIPS_ELECTRONIC_KEY;

typedef struct _eips_alloc_prm {
    char                    IpAddress[40];
    unsigned char           Option1;
    unsigned char           Option2;
    unsigned char           DataUnit;
    unsigned char           Endian;
    unsigned long           ConfigInstance;
    EIPS_CONN_PRM           ConnT2O;
    EIPS_CONN_PRM           ConnO2T;
    EIP_PMC_ADDR            reserve1;
    EIP_PMC_ADDR            reserve2;
    unsigned char           ProductTrigger;
    unsigned char           Timeout;
    unsigned char           Reconnect;
    char                    pad;
    EIPS_ELECTRONIC_KEY     ElectronicKey;
    unsigned long           DataPerSec;
    unsigned long           DataPerSecTotal;
} EIPS_ALLOC_PRM;

typedef EIPS_ALLOC_PRM   IN_EIPS_ALLOC_PRM;
typedef EIPS_ALLOC_PRM  OUT_EIPS_ALLOC_PRM;

typedef struct _in_eips_basic_prm_flg {
    IN_EIP_COMMON_PRM_FLG   Common;
    char                    Option2;
    char                    StatusAddr;
    char                    StatusSize;
    char                    pad;
} IN_EIPS_BASIC_PRM_FLG;

typedef struct _in_eips_basic {
    IN_EIPS_BASIC_PRM_FLG   flg;
    IN_EIPS_BASIC_PRM       prm;
} IN_EIPS_BASIC;

typedef struct _in_eips_conn_prm_flg {
    char                    AssemblyInstance;
    char                    Type;
    char                    Addr;
    char                    Size;
    char                    RPI;
    char                    TransportType;
    char                    HeaderFormat;
    char                    Priority;
    char                    reserve;
    char                    pad[3];
} IN_EIPS_CONN_PRM_FLG;

typedef struct _in_eips_alloc_prm_flg {
    char                    IpAddress;
    char                    Option1;
    char                    Option2;
    char                    DataUnit;
    char                    Endian;
    char                    ConfigInstance;
    char                    pad1[2];
    IN_EIPS_CONN_PRM_FLG    ConnT2O;
    IN_EIPS_CONN_PRM_FLG    ConnO2T;
    char                    reserve1;
    char                    reserve2;
    char                    ProductTrigger;
    char                    Timeout;
    char                    Reconnect;
    char                    VendorID;
    char                    DeviceType;
    char                    ProductCode;
    char                    MajorRevision;
    char                    MinorRevision;
    char                    Compatibility;
    char                    pad2;
} IN_EIPS_ALLOC_PRM_FLG;

typedef struct _in_eips_alloc {
    IN_EIPS_ALLOC_PRM_FLG   flg;
    IN_EIPS_ALLOC_PRM       prm;
} IN_EIPS_ALLOC;

typedef struct _out_eips_com_info {
    unsigned char           State[32];
    char                    reserve[32];
} OUT_EIPS_COM_INFO;

typedef struct _out_eips_detail_info {
    short                   Result;
    char                    pad1[2];
    char                    IpAddress[40];
    unsigned char           GeneralCode;
    char                    pad2;
    unsigned short          ExtendedCode;
    unsigned long           ConnectTime;
    unsigned short          O2T_RPI;
    unsigned short          T2O_RPI;
    unsigned short          O2T_API;
    unsigned short          T2O_API;
    unsigned short          RecvPacket;
    unsigned short          SendPacket;
    unsigned short          LostPacket;
    char                    pad3[2];
} OUT_EIPS_DETAIL_INFO;

typedef struct _out_eips_identity_info {
    short                   Result;
    char                    pad1[2];
    unsigned short          VendorId;
    unsigned short          DeviceType;
    unsigned short          ProductCode;
    unsigned char           MajorRevision;
    unsigned char           MinorRevision;
    unsigned long           SerialNo;
    char                    ProductName[33];
    char                    pad2[3];
} OUT_EIPS_IDENTITY_INFO;

typedef struct _out_adpsafe_mntinfo {
    unsigned short  SupervisorStatus;
    unsigned char   SafetyNetworkNumber[6];

    unsigned short  SelfDiagnosisErrorA;
    unsigned short  SelfDiagnosisErrorB;
    unsigned short  SelfDiagnosisDetailA;
    unsigned short  SelfDiagnosisDetailB;

    unsigned long   SafetyParameterCrc;
    unsigned short  ChangeDateYear;
    unsigned char   ChangeDateMonth;
    unsigned char   ChangeDateDay;
    unsigned short  ChangeTimeHours;
    unsigned short  ChangeTimeMinutes;
    unsigned short  ChangeTimeSeconds;
    unsigned short  Pad;

    unsigned char   DiConnectionStatusA;
    unsigned char   DiConnectionStatusB;
    unsigned char   DoConnectionStatusA;
    unsigned char   DoConnectionStatusB;

    unsigned char   DiConnectionDataSizeA;
    unsigned char   DiConnectionDataSizeB;
    unsigned char   DoConnectionDataSizeA;
    unsigned char   DoConnectionDataSizeB;

    unsigned char   DiConnectionErrorA;
    unsigned char   DiConnectionErrorB;
    unsigned char   DoConnectionErrorA;
    unsigned char   DoConnectionErrorB;

    unsigned short  DiRecvPacketNumberA;
    unsigned short  DiRecvPacketNumberB;
    unsigned short  DoSendPacketNumberA;
    unsigned short  DoSendPacketNumberB;
} OUT_ADPSAFE_MNTINFO;

/*---------------------------*/
/* NET : PROFIBUS function   */
/*---------------------------*/

/* pbm_rd_param */
typedef struct _T_MAS_USR
{
    unsigned short          master_user_data_len;
    unsigned char           master_user_data[62];
} T_MAS_USR;

typedef struct _T_BUS_PARA
{
    unsigned char           fdl_add;
    unsigned char           baud_rate;
    unsigned short          tsl;
    unsigned short          min_tsdr;
    unsigned short          max_tsdr;
    unsigned char           tqui;
    unsigned char           tset;
    unsigned long           ttr;
    unsigned char           g;
    unsigned char           hsa;
    unsigned char           max_retry_limit;
    unsigned char           bp_flag;
    unsigned short          min_slave_interval;
    unsigned short          poll_timeout;
    unsigned short          data_control_time;
    unsigned char           reserved[6];
    char                    master_class2_name[32];
    T_MAS_USR               mas_usr;
} T_BUS_PARA;

typedef struct _T_MODE_ADDR_ALLOC
{
    unsigned char           md_path;
    unsigned char           md_kind;
    unsigned short          md_top_address;
    unsigned char           md_size;
    unsigned char           pad;
} T_MODE_ADDR_ALLOC;

typedef struct _T_SLAVE_IND_PARA
{
    unsigned char           slv_idx;
    unsigned char           slv_no;
} T_SLAVE_IND_PARA;

typedef struct _T_SLAVE_SUB_PARA
{
    T_SLAVE_IND_PARA        slv_ind_para;
    unsigned char           slv_enable;
    unsigned char           slt_num;
} T_SLAVE_SUB_PARA;

typedef struct _T_USR_PRM_DATA
{
    unsigned short          user_prm_data_len;
    unsigned char           user_prm_data[201];
    unsigned char           pad;
} T_USR_PRM_DATA;

typedef struct _T_PRM_DATA
{
    unsigned char           station_status;
    unsigned char           wd_fact_1;
    unsigned char           wd_fact_2;
    unsigned char           min_tsdr;
    unsigned short          ident_number;
    unsigned char           group_ident;
    unsigned char           pad;
    T_USR_PRM_DATA  usr_prm;
} T_PRM_DATA;

typedef struct _T_CFG_DATA
{
    unsigned short          cfg_data_len;
    unsigned char           cfg_data[128];
} T_CFG_DATA;

typedef struct _T_SLV_USR_DATA
{
    unsigned short          slave_user_data_len;
    unsigned char           slave_user_data[30];
} T_SLV_USR_DATA;

typedef struct _T_SLAVE_PARA
{
    T_SLAVE_IND_PARA        slv_ind_para;
    unsigned char           sl_flag;
    unsigned char           slave_type;
    unsigned char           reserved[12];
    T_PRM_DATA              prm_data;
    T_CFG_DATA              cfg_data;
    T_SLV_USR_DATA          slv_usr;
} T_SLAVE_PARA;

typedef struct _T_DGN_ADDR_ALLOC
{
    T_SLAVE_IND_PARA        slv_ind_para;
    unsigned char           dgn_path;
    unsigned char           dgn_kind;
    unsigned short          dgn_top_address;
    unsigned char           dgn_size;
    unsigned char           pad;
} T_DGN_ADDR_ALLOC;

typedef struct _T_SLOT_IND_PARA
{
    unsigned char           slv_no;
    unsigned char           slt_no;
} T_SLOT_IND_PARA;

typedef struct _T_MODULE_DATA
{
    T_SLOT_IND_PARA         slt_ind_para;
    unsigned short          module_len;
    unsigned char           module_data[128];
} T_MODULE_DATA;

typedef struct _T_DIDO_ADDR_ALLOC
{
    T_SLOT_IND_PARA         slt_ind_para;
    unsigned char           di_path;
    unsigned char           do_path;
    unsigned char           di_kind;
    unsigned char           do_kind;
    unsigned short          di_top_address;
    unsigned short          do_top_address;
    unsigned char           di_size;
    unsigned char           do_size;
    unsigned char           module_type;
    unsigned char           pad;
} T_DIDO_ADDR_ALLOC;

typedef struct _OUT_PBMPRM{
    union {
        T_BUS_PARA          bus_para;
        T_MODE_ADDR_ALLOC   mode_addr_alloc;
        T_SLAVE_SUB_PARA    slv_sub_para;
        T_SLAVE_PARA        slv_para;
        T_DGN_ADDR_ALLOC    dgn_addr_alloc;
        T_MODULE_DATA       module_data;
        T_DIDO_ADDR_ALLOC   dido_addr_alloc;
    } prm;
} OUT_PBMPRM;

/* pbm_wr_param */
typedef struct _T_MAS_USR_FLG
{
    char                    master_user_data_len;
    char                    master_user_data;
} T_MAS_USR_FLG;

typedef struct _T_BUS_PARA_FLG {
    char                    fdl_add;
    char                    baud_rate;
    char                    tsl;
    char                    min_tsdr;
    char                    max_tsdr;
    char                    tqui;
    char                    tset;
    char                    ttr;
    char                    g;
    char                    hsa;
    char                    max_retry_limit;
    char                    bp_flag;
    char                    min_slave_interval;
    char                    poll_timeout;
    char                    data_control_time;
    char                    pad1;
    char                    reserved[6];
    char                    master_class2_name_rsv;
    char                    pad2;
    T_MAS_USR_FLG   mas_usr;
} T_BUS_PARA_FLG;

typedef struct _T_MODE_ADDR_ALLOC_FLG
{
    char                    md_path;
    char                    md_kind;
    char                    md_top_address;
    char                    md_size;
} T_MODE_ADDR_ALLOC_FLG;

typedef struct _T_SLAVE_IND_PARA_FLG
{
    char                    slv_idx;
    char                    slv_no;
} T_SLAVE_IND_PARA_FLG;

typedef struct _T_SLAVE_SUB_PARA_FLG
{
    T_SLAVE_IND_PARA_FLG    slv_ind_para;
    char                    slv_enable;
    char                    slt_num;
} T_SLAVE_SUB_PARA_FLG;

typedef struct _T_USR_PRM_DATA_FLG
{
    char                    user_prm_data_len;
    char                    user_prm_data;
} T_USR_PRM_DATA_FLG;

typedef struct _T_PRM_DATA_FLG
{
    char                    station_status;
    char                    wd_fact_1;
    char                    wd_fact_2;
    char                    min_tsdr;
    char                    ident_number;
    char                    group_ident;
    T_USR_PRM_DATA_FLG      usr_prm;
} T_PRM_DATA_FLG;

typedef struct _T_CFG_DATA_FLG
{
    char                    cfg_data_len;
    char                    cfg_data;
} T_CFG_DATA_FLG;

typedef struct _T_SLV_USR_DATA_FLAG
{
    char                    slave_user_data_len;
    char                    slave_user_data;
} T_SLV_USR_DATA_FLG;

typedef struct _T_SLAVE_PARA_FLG
{
    T_SLAVE_IND_PARA_FLG    slv_ind_para;
    char                    sl_flag;
    char                    slave_type;
    char                    reserved[12];
    T_PRM_DATA_FLG          prm_data;
    T_CFG_DATA_FLG          cfg_data_rsv;
    T_SLV_USR_DATA_FLG      slv_usr;
} T_SLAVE_PARA_FLG;

typedef struct _T_DGN_ADDR_ALLOC_FLG
{
    T_SLAVE_IND_PARA_FLG    slv_ind_para;
    char                    dgn_path;
    char                    dgn_kind;
    char                    dgn_top_address;
    char                    dgn_size;
} T_DGN_ADDR_ALLOC_FLG;

typedef struct _T_SLOT_IND_PARA_FLG
{
    char                    slv_no;
    char                    slt_no;
} T_SLOT_IND_PARA_FLG;

typedef struct _T_MODULE_DATA_FLG
{
    T_SLOT_IND_PARA_FLG     slt_ind_para;
    char                    module_len;
    char                    module_data;
} T_MODULE_DATA_FLG;

typedef struct _T_DIDO_ADDR_ALLOC_FLG
{
    T_SLOT_IND_PARA_FLG     slt_ind_para;
    char                    di_path;
    char                    do_path;
    char                    di_kind;
    char                    do_kind;
    char                    di_top_address;
    char                    do_top_address;
    char                    di_size;
    char                    do_size;
    char                    module_type_rsv;
    char                    pad;
} T_DIDO_ADDR_ALLOC_FLG;

typedef struct _IN_PBMPRM{
    union {
        T_BUS_PARA          bus_para;
        T_MODE_ADDR_ALLOC   mode_addr_alloc;
        T_SLAVE_SUB_PARA    slv_sub_para;
        T_SLAVE_PARA        slv_para;
        T_DGN_ADDR_ALLOC    dgn_addr_alloc;
        T_MODULE_DATA       module_data;
        T_DIDO_ADDR_ALLOC   dido_addr_alloc;
    } prm;
} IN_PBMPRM;

typedef struct _IN_PBMPRMFLG {
    union {
        T_BUS_PARA_FLG          bus_para;
        T_MODE_ADDR_ALLOC_FLG   mode_addr_alloc;
        T_SLAVE_SUB_PARA_FLG    slv_sub_para;
        T_SLAVE_PARA_FLG        slv_para;
        T_DGN_ADDR_ALLOC_FLG    dgn_addr_alloc;
        T_MODULE_DATA_FLG       module_data;
        T_DIDO_ADDR_ALLOC_FLG   dido_addr_alloc;
    } flg;
} IN_PBMPRMFLG;

/* pbm_ini_prm */
typedef struct _T_SLVSLT_IND{
    unsigned char           slv_no;
    unsigned char           slt_no;
} T_SLVSLT_IND;

/* pbm_rd_allslvtbl */
typedef struct _T_SLVTBL{
    T_SLAVE_IND_PARA        slv_ind_para;
    unsigned char           slv_enable;
    unsigned char           slt_num;
    unsigned char           dgn_path;
    unsigned char           dgn_kind;
    unsigned short          dgn_top_address;
    unsigned char           dgn_size;
    unsigned char           pad;
} T_SLVTBL;

typedef struct _OUT_ALLSLVTBL{
    T_SLVTBL                slv_tbl[80];
} OUT_ALLSLVTBL;

/* pbm_rd_subprm */
typedef struct _T_MAXMODLENPRM{
    unsigned char           slv_no;
    unsigned char           slt_no;
    unsigned char           max_mod_len;
    unsigned char           pad;
} T_MAXMODLENPRM;

typedef struct _OUT_PBMSUBPRM{
    union {
        unsigned char       max_slv_num;
        unsigned char       max_slt_num;
        unsigned char       enb_slv_num;
        unsigned char       total_slts;
        unsigned char       shift_mode_stat;
        T_MAXMODLENPRM      max_mod_len_prm;
    } subprm;
} OUT_PBMSUBPRM;

/* pbm_rd_errcode */
typedef struct _T_ERR_CODE{
    unsigned short          param_err_code[4];
    unsigned short          inter_err_code[4];
} T_ERR_CODE;

/* pbm_chg_mode */
typedef struct _OUT_CHGMODERESULT{
    unsigned char           crnt_mode;
    unsigned char           pad;
    unsigned short          result;
} OUT_CHGMODERESULT;

/* pbm_rd_comstate */
typedef struct _T_DATA_REF_TIM{
    unsigned short          total_ref_tim;
    unsigned short          board_ref_tim;
    unsigned short          cnc_ref_tim;
} T_DATA_REF_TIM;

typedef struct _OUT_PBMCOMINFO{
    union {
        unsigned char       crnt_mode;
        T_DATA_REF_TIM      data_ref_tim;
    } cominfo;
} OUT_PBMCOMINFO;

/* pbm_rd_nodeinfo */
typedef struct _OUT_PBMNODEINFO{
    unsigned char           slv_no;
    unsigned char           commstat;
    unsigned char           status1;
    unsigned char           status2;
    unsigned char           status3;
    unsigned char           master;
    unsigned short          ident;
} OUT_PBMNODEINFO;

/* pbm_rd_slotinto */
typedef struct _OUT_PBMSLOTINFO{
    unsigned char           slv_no;
    unsigned char           slt_no;
    unsigned char           di_size;
    unsigned char           do_size;
    unsigned char           di_path;
    unsigned char           do_path;
    unsigned char           di_kind;
    unsigned char           do_kind;
    unsigned short          di_top_address;
    unsigned short          do_top_address;
    unsigned char           module_type;
    unsigned char           commstat;
    unsigned short          reserved;
} OUT_PBMSLOTINFO;

/* pbs_rd_param */
typedef struct _OUT_PBSPRM{
    unsigned char           slave_no;
    unsigned char           pad;
    unsigned char           di_size;
    unsigned char           do_size;
    unsigned char           di_path;
    unsigned char           do_path;
    unsigned char           di_kind;
    unsigned char           do_kind;
    unsigned short          di_top_address;
    unsigned short          do_top_address;
} OUT_PBSPRM;

/* pbs_wr_param */
typedef struct _IN_PBSPRMFLG{
    char                    slave_no;
    char                    pad;
    char                    di_size;
    char                    do_size;
    char                    di_path;
    char                    do_path;
    char                    di_kind;
    char                    do_kind;
    char                    di_top_address;
    char                    do_top_address;
} IN_PBSPRMFLG;

typedef struct _IN_PBSPRM{
    unsigned char           slave_no;
    unsigned char           pad;
    unsigned char           di_size;
    unsigned char           do_size;
    unsigned char           di_path;
    unsigned char           do_path;
    unsigned char           di_kind;
    unsigned char           do_kind;
    unsigned short          di_top_address;
    unsigned short          do_top_address;
} IN_PBSPRM;

/* pbs_rd_cominfo */
typedef struct _OUT_PBSSTATUS{
    unsigned char           config_sts;
    unsigned char           param_sts;
    unsigned char           watchdog_sts;
    unsigned char           pad;
    unsigned short          ident_no;
} OUT_PBSSTATUS;

/* pbs_rd_param2 */
typedef struct _OUT_PBSPRM2{
    unsigned char           slave_no;
    unsigned char           pad;
    unsigned char           di_size;
    unsigned char           do_size;
    unsigned char           di_path;
    unsigned char           do_path;
    unsigned char           di_kind;
    unsigned char           do_kind;
    unsigned short          di_top_address;
    unsigned short          do_top_address;
    unsigned char           sts_path;
    unsigned char           sts_kind;
    unsigned short          sts_top_address;
} OUT_PBSPRM2;

/* pbs_wr_param2 */
typedef struct _IN_PBSPRMFLG2{
    char                    slave_no;
    char                    pad1;
    char                    di_size;
    char                    do_size;
    char                    di_path;
    char                    do_path;
    char                    di_kind;
    char                    do_kind;
    char                    di_top_address;
    char                    do_top_address;
    char                    sts_path;
    char                    sts_kind;
    char                    sts_top_address;
    char                    pad2;
} IN_PBSPRMFLG2;

typedef struct _IN_PBSPRM2{
    unsigned char           slave_no;
    unsigned char           pad;
    unsigned char           di_size;
    unsigned char           do_size;
    unsigned char           di_path;
    unsigned char           do_path;
    unsigned char           di_kind;
    unsigned char           do_kind;
    unsigned short          di_top_address;
    unsigned short          do_top_address;
    unsigned char           sts_path;
    unsigned char           sts_kind;
    unsigned short          sts_top_address;
} IN_PBSPRM2;

/* pbs_rd_cominfo2 */
typedef struct _OUT_PBSSTATUS2{
    unsigned char           config_sts;
    unsigned char           param_sts;
    unsigned char           watchdog_sts;
    unsigned char           pad1;
    unsigned short          ident_no;
    unsigned char           sts;
    unsigned char           pad2;
} OUT_PBSSTATUS2;

/*--------------------------*/
/* HSSB multiple connection */
/*--------------------------*/

/* cnc_rdnodeinfo:read node informations */
typedef struct odbnode {
    long node_no;
    long io_base;
    long status;
    long cnc_type;
    char node_name[20];
} ODBNODE;

/*--------------------------*/
/*  Power Mate CNC manager  */
/*--------------------------*/

/* initialize */

typedef struct odbpmmslv {
    long	slvnum;       /* a number of groups  */
    long	group[8];     /* group's number */
}ODBPMMSLV;

/* get serise , version */

typedef struct odbpmmsyd {
    char   system[2];     /* */
    char   model[2];      /* */
    char   series[4];     /* serise */
    char   edition[4];    /* version */
} ODBPMMSYD ;


/* get continuos data start */

typedef struct idbpmmgti {
    long	top;         /* top number */
    long	num;         /* number of data  */
} IDBPMMGTI ;


/* get continuos data */
typedef struct odbpmmget {
    long   pos     ;        /* position           */
    long   feed    ;        /* actual feed        */
    long   data[20];        /* diagnosis's data   */
    long   number[20];      /* number of diagnosis's data */
    short  axis[20];        /* axis attribute of diagnosis's data */
    short  type[20];        /* data type of diagnosis's data */
    char   alaxis[40];        /* axis attribute of alarm */
    unsigned short  alnumber[40]; /* number of alarm */
    long   chanl ;     /* data's chanl      */
    long   group ;     /* data's group      */
} ODBPMMGET ;

/* get parameter 1 page */
typedef struct odbpmmprp {
    long            data    ;        /* data    */
    unsigned short  number  ;        /* number  */
    unsigned char   axis    ;        /* axis attribute */
    unsigned char   type    ;        /* data type */
} ODBPMMPRP ;

/* read/write  parameter (tape memory) */
typedef struct idbpmmprp {
    long   chanl       ;        /* channel */
    long   group       ;        /* group   */
    char   folder[130] ;        /* folder (current //CNC_MEM/USER/PATH1/)*/
    long   warn        ;        /* warnning */
} IDBPMMPRP ;

/* I/O LINK channel number */
typedef struct odbpmmio {
    long   chanlnum;     /* channel number */
} ODBPMMIO ;

/*--------------------------*/
/* real-time custom macro   */
/*--------------------------*/

typedef struct  iodbrtmio {
    short adr_type;
    short dummy;
    unsigned long no;
    char	bit;
} IODBRTMIO ;

typedef struct  iodbrtmior {
    short adr_type;		/* kind of DI/DO variable address(alphabet) */
    long adr_attr ;		/* PMC address attribute (use for cnc_getrtmioinfo only) */
    unsigned long sno;	/* DI/DO variable access enable start no. */
    unsigned long eno;	/* DI/DI variable access enable end no. */
} IODBRTMIOR ;


/* Distribute infomation */
typedef struct odbipl {
    unsigned char	outpt;
    unsigned char	ipltp;
    unsigned char	mv;     /* Not used             */
    unsigned char	inp;    /* Not used             */
} ODBIPL ;

/* Axis move distance */
typedef struct  iodbaxis {
    int	    axnum;          /* Axis number          */
    long    data[MAX_AXIS]; /* Axis move distance   */
    long    dp[MAX_AXIS];   /* Decimal point        */
} IODBAXIS ;

/* cnc_wrtofsdrctinp:write Tool offset data Direct Input */
typedef struct realmes {
    long   mes_val; /* data of real measeure */
    long   dec_val; /* decimal point of real measeure */
} REALMES;

/* servoid spindleid info */
typedef struct odbcsvid {
    char   mt_spc[20] ;        /* servo motor spec	*/
    char   mt_srn[10] ;        /* servo motor s/n	*/
    char   plc_spc[22] ;       /* pulsecoder spec	*/
    char   plc_srn[9] ;        /* pulsecoder s/n	*/
    char   svm_spc[22] ;       /* servo amp spec	*/
    char   svm_srn[12] ;       /* servo amp s/n		*/
    char   psm_spc[22] ;       /* psm spec			*/
    char   psm_srn[12] ;       /* psm s/n			*/
} ODBCSVID ;

typedef struct odbcspid {
    char   mt_spc[20] ;		   /* sp motor spec		*/
    char   mt_srn[10] ;		   /* sp motor s/n		*/
    char   sbmt_spc[20] ;	   /* subsp motor spec  */
    char   sbmt_srn[10] ;	   /* subsp motor s/n	*/
    char   spm_spc[22] ;	   /* sp amp spec		*/
    char   spm_srn[12] ;	   /* sp amp s/n		*/
    char   psm_spc[22] ;	   /* psm spec			*/
    char   psm_srn[12] ;	   /* psm s/n			*/
} ODBCSPID ;

/* servoid spindleid info2 */
typedef struct odbcsvid2 {
    char   mt_spc[20] ;        /* servo motor spec       */
    char   mt_srn[10] ;        /* servo motor s/n        */
    char   plc_spc[22] ;       /* pulsecoder spec        */
    char   plc_srn[9] ;        /* pulsecoder s/n         */
    char   svm_spc[22] ;       /* sv spec                */
    char   svm_srn[12] ;       /* sv s/n                 */
    char   psm_spc[22] ;       /* ps spec                */
    char   psm_srn[12] ;       /* ps s/n                 */
    char   svs_see[9] ;        /* sv soft series/edition */
    char   pss_see[9] ;        /* ps soft series/edition */
    char   pm1_spc[22] ;       /* pm1 spec               */
    char   pm1_srn[9] ;        /* pm1 s/n                */
    char   pm2_spc[22] ;       /* pm2 spec               */
    char   pm2_srn[9] ;        /* pm2 s/n                */
} ODBCSVID2 ;

typedef struct odbcspid2 {
    char   mt_spc[20] ;        /* main spinlde motor spec */
    char   mt_srn[10] ;        /* main spinlde motor s/n  */
    char   sbmt_spc[20] ;      /* sub spinlde motor spec  */
    char   sbmt_srn[10] ;      /* sub spinlde motor s/n   */
    char   spm_spc[22] ;       /* sp spec                 */
    char   spm_srn[12] ;       /* sp s/n                  */
    char   psm_spc[22] ;       /* ps spec                 */
    char   psm_srn[12] ;       /* ps s/n                  */
    char   pss_see[9] ;        /* ps soft series/edition  */
} ODBCSPID2 ;

/* Dual Check Safety MCC Test Status */
typedef struct dcsmcc {
     struct {
         long  hour;
         long  minute;
         long  second;
     } time;
     long  testno;		/* Last Test No. */
     long  sign;		/* Test Request DI */
} DCSMCC;

typedef struct dcsmca {
    long	mgrp_no ;
    DCSMCC*	mcc_test_inf ;
} DCSMCA;

typedef struct dcsfmoni {
    long  data_d ;		/* Fixed Val  */
    long  data_p ;		/* Present Val*/
} ODBDCSFMONI;

typedef struct dcscrsalm {
    long existFlag;
    long pmc_no;
    struct {
        char  pmc_adr[8] ;
        long  pmc_data[8];
        char  dcs_adr[8];
        long  dcs_data[8];
    } pmc ;
    struct {
        char  pmc_adr[8] ;
        long  pmc_data[8];
        char  dcs_adr[8];
        long  dcs_data[8];
    } dcspmc ;
} DCSCRSALM ;

typedef struct dcssvspsts {
    char	name[4];
    long	dummy;
    double	ncdata;
    double	svspdata;
}DCSSVSPSTS;

typedef struct dcssvspst2 {
    double	limit_dt_p;
    double	limit_dt_m;
    short	axissts;
    short	unittype;
    char	axissts2;
    char	level;
    char	alm_lvl;
    char	add_info;
}DCSSVSPST2;


/*----------------------------*/
/* NET : DeviceNet function   */
/*----------------------------*/
typedef struct _pmc_reg {
    unsigned char   Path;
    unsigned char   Kind;
    unsigned short  Address;
} PMC_REG;

/* dnm_rdparam  */
/* dnm_rdparam2 */
typedef struct _out_dnmprm_bus {
    short           Network;
    short           BaudRate;
    short           DiDataOnAbnormal;
    short           OwnMacId;
    PMC_REG         CommonStatus;
    short           CommonStatusSize;
    short           CycleTimeSetting;
    short           CycleTimeCurrent;
    short           CycleTimeMaximum;
    short           CycleTimeMinimum;
    unsigned short  RefreshTime;
} OUT_DNMPRM_BUS;

typedef struct _out_dnmprm_each_node {
    short           NodeNumber;
    short           Communication;
    short           reserved1[6];
    PMC_REG         DetailStatus;
    short           reserved2[2];
    PMC_REG         Di;
    short           DiSize;
    short           reserved3;
    PMC_REG         Do;
    short           DoSize;
    short           reserved4;
} OUT_DNMPRM_SLAVE;

typedef struct _out_dnmprm {
    union {
        OUT_DNMPRM_BUS      bus;
        OUT_DNMPRM_SLAVE    slave;
    } prm;
} OUT_DNMPRM;

typedef struct _out_dnmprm_bus2 {
    short           Network;
    short           BaudRate;
    short           DiDataOnAbnormal;
    short           OwnMacId;
    PMC_REG         CommonStatus;
    short           CommonStatusSize;
    short           CycleTimeSetting;
    short           CycleTimeCurrent;
    short           CycleTimeMaximum;
    short           CycleTimeMinimum;
    unsigned short  RefreshTime;
    unsigned short  Option;
    short           reserved;
} OUT_DNMPRM_BUS2;

typedef struct _out_dnmprm2 {
    union {
        OUT_DNMPRM_BUS2     bus;
        OUT_DNMPRM_SLAVE    slave;
    } prm;
} OUT_DNMPRM2;

/* dnm_wrparam  */
/* dnm_wrparam2 */
typedef struct _in_dnmprmflag_bus {
    char            Network;
    char            BaudRate;
    char            DiDataOnAbnormal;
    char            OwnMacId;
    char            CommonStatus;
    char            CommonStatusSize;
    char            CycleTimeSetting;
    char            reserved[9];
} IN_DNMPRMFLAG_BUS;

typedef struct _in_dnmprmflag_each_node {
    char            Communication;
    char            DetailStatus;
    char            Di;
    char            DiSize;
    char            Do;
    char            DoSize;
    char            reserved[10];
} IN_DNMPRMFLAG_SLAVE;

typedef struct _in_dnmprmflag {
    union {
        IN_DNMPRMFLAG_BUS   bus;
        IN_DNMPRMFLAG_SLAVE slave;
    } flg;
} IN_DNMPRMFLAG;

typedef struct _in_dnmprmflag_bus2 {
    char            Network;
    char            BaudRate;
    char            DiDataOnAbnormal;
    char            OwnMacId;
    char            CommonStatus;
    char            CommonStatusSize;
    char            CycleTimeSetting;
    char            reserved1[4];
    char            Option;
    char            reserved2[4];
} IN_DNMPRMFLAG_BUS2;

typedef struct _in_dnmprmflag2 {
    union {
        IN_DNMPRMFLAG_BUS2  bus;
        IN_DNMPRMFLAG_SLAVE slave;
    } flg;
} IN_DNMPRMFLAG2;

typedef struct _in_dnmprm_bus {
    short           Network;
    short           BaudRate;
    short           DiDataOnAbnormal;
    short           OwnMacId;
    PMC_REG         CommonStatus;
    short           CommonStatusSize;
    short           CycleTimeSetting;
    short           reserved[8];
} IN_DNMPRM_BUS;

typedef struct _in_dnmprm_each_node {
    short           reserved1;
    short           Communication;
    short           reserved2[6];
    PMC_REG         DetailStatus;
    short           reserved3[2];
    PMC_REG         Di;
    short           DiSize;
    short           reserved4;
    PMC_REG         Do;
    short           DoSize;
    short           reserved5;
} IN_DNMPRM_SLAVE;

typedef struct _in_dnmprm {
    union {
        IN_DNMPRM_BUS       bus;
        IN_DNMPRM_SLAVE     slave;
    } prm;
} IN_DNMPRM;

typedef struct _in_dnmprm_bus2 {
    short           Network;
    short           BaudRate;
    short           DiDataOnAbnormal;
    short           OwnMacId;
    PMC_REG         CommonStatus;
    short           CommonStatusSize;
    short           CycleTimeSetting;
    short           reserved1[4];
    unsigned short  Option;
    short           reserved2[3];
} IN_DNMPRM_BUS2;

typedef struct _in_dnmprm2 {
    union {
        IN_DNMPRM_BUS2      bus;
        IN_DNMPRM_SLAVE     slave;
    } prm;
} IN_DNMPRM2;

/* dnm_rdnodetable */
typedef struct _out_dnmnode {
    char        node[64];
} OUT_DNMNODE;

/* dnm_rdnodeinfo */
typedef struct _out_dnmnodeinfo {
    short           MacId;
    short           State;
    short           RetryCounter;
    unsigned short  VenderId;
    unsigned short  DeviceType;
    unsigned short  ProductCode;
} OUT_DNMNODEINFO;

/* dnm_rdfirminfo */
typedef struct _out_dnmfirm {
    unsigned short  MpuStatus1;
    unsigned short  MpuStatus2;
    unsigned short  MasterStatus1;
    unsigned short  CanRecvCounter;
    unsigned short  CanSendCounter;
    unsigned short  CanRecvErrorCounter;
    unsigned short  CanSendErrorCounter;
    unsigned short  FirmwareVersion;
} OUT_DNMFIRM;

/* dnm_rderrorrecord */
typedef struct _out_dnmerr_record {
    unsigned short  AbnormalCode;
    unsigned short  DetailCode;
} OUT_DNMERR_RECORD;

typedef struct _out_dnmerr {
    OUT_DNMERR_RECORD   record[8];
} OUT_DNMERR;

/* dnm_rd_hist */
typedef struct _out_dnmhist_log {
    unsigned char   Type;
    unsigned char   reserved;
    unsigned short  Mpu1;
    unsigned short  Mpu2;
    unsigned short  Sts1;
    unsigned char   Slave[8];
    unsigned char   Date;
    unsigned char   Hour;
    unsigned char   Minute;
    unsigned char   Second;
} OUT_DNMHIST_LOG;

typedef struct _out_dnmhist {
    unsigned short  Count;
    unsigned short  reserved;
    OUT_DNMHIST_LOG Log[32];
} OUT_DNMHIST;

/* dns_rdparam */
typedef struct _out_dnsprm {
    short           BaudRate;
    short           DiDataOnAbnormal;
    short           OwnMacId;
    char            pad1[2];
    PMC_REG         Di;
    short           DiSize;
    char            pad2[2];
    PMC_REG         Do;
    short           DoSize;
    char            pad3[2];
    PMC_REG         Status;
    short           StatusSize;
    char            pad4[2];
} OUT_DNSPRM;

/* dns_wrparam */
typedef struct _in_dnsprmflag {
    char            BaudRate;
    char            DiDataOnAbnormal;
    char            OwnMacId;
    char            Di;
    char            DiSize;
    char            Do;
    char            DoSize;
    char            Status;
    char            StatusSize;
    char            pad[7];
} IN_DNSPRMFLAG;

typedef struct _in_dnsprm {
    short           BaudRate;
    short           DiDataOnAbnormal;
    short           OwnMacId;
    char            pad1[2];
    PMC_REG         Di;
    short           DiSize;
    char            pad2[2];
    PMC_REG         Do;
    short           DoSize;
    char            pad3[2];
    PMC_REG         Status;
    short           StatusSize;
    char            pad4[2];
} IN_DNSPRM;

/* dns_rdinfo */
typedef struct _dnsidentityinfo {
    unsigned short  VenderID;
    unsigned short  DeviceType;
    unsigned short  ProductCode;
    unsigned char   MajorRev;
    unsigned char   MinorRev;
    unsigned long   SerialNo;
    char            ProductName[32];
    char            pad[4];
} DNS_IDENTITY_INFO;

typedef struct _dnsstatusinfo {
    unsigned char   Status;
    unsigned char   MpuStatus;
    unsigned char   MpuState;
    unsigned char   MpuAlarmCode;
    unsigned char   MpuVerInfo;
    unsigned char   pad[3];
} DNS_STATUS_INFO;

typedef struct _out_dnsmonitor {
    DNS_IDENTITY_INFO   IdentityInfo;
    DNS_STATUS_INFO     StatusInfo;
} OUT_DNSINFO;

/* dns_rd_hist */
typedef struct _out_dnshist_log {
    unsigned char   Type;
    unsigned char   Status;
    unsigned char   MpuStatus;
    unsigned char   MpuFsm;
    unsigned char   MpuAlarm;
    unsigned char   Date;
    unsigned char   Hour;
    unsigned char   Minute;
    unsigned char   Second;
    unsigned char   reserved[3];
} OUT_DNSHIST_LOG;

typedef struct _out_dnshist {
    unsigned short  Count;
    unsigned short  reserved;
    OUT_DNSHIST_LOG Log[32];
} OUT_DNSHIST;


/*----------------------------*/
/* NET : FL-net function      */
/*----------------------------*/

/* flnt_rdparam  */
/* flnt_rdparam2 */
typedef struct _out_flntprm {
    char            OwnMacAddress[16];
    char            OwnIpAddress[40];
    char            NodeName[12];
    short           Area1CmnMemAddr;
    short           Area1CmnMemSize;
    short           Area2CmnMemAddr;
    short           Area2CmnMemSize;
    unsigned char   TokenWatch;
    char            MinFrame;
    char            Reserved0[2];
    PMC_REG         OwnStatus;
    PMC_REG         EntryNode;
    PMC_REG         Area1PmcAddr;
    short           Area1ExchgAddr;
    short           Area1ExchgSize;
    PMC_REG         Area2PmcAddr;
    short           Area2ExchgAddr;
    short           Area2ExchgSize;
    PMC_REG         Area2PmcDoAddr;
    short           Area2ExchgDoSize;
    char            Reserved1[2];
    PMC_REG         Area2PmcDiAddr;
    PMC_REG         Area2ConditionAddr;
    PMC_REG         Area2AlterAddr;
    short           Area2ExchgDiAddr;
    short           Area2ExchgDiSize;
    PMC_REG         ClientMsgAddr;
    short           ClientMsgSize;
    char            Reserved2[2];
    PMC_REG         ServerMsgAddr;
    short           ServerMsgSize;
    char            Reserved3[2];
    unsigned short  Option1;
    unsigned short  Option2;
} OUT_FLNTPRM;

/* flnt_wrparam  */
/* flnt_wrparam2 */
typedef struct _in_flntprmflag {
    char            OwnIpAddress;
    char            NodeName;
    char            Area1CmnMemAddr;
    char            Area1CmnMemSize;
    char            Area2CmnMemAddr;
    char            Area2CmnMemSize;
    char            TokenWatch;
    char            MinFrame;
    char            OwnStatus;
    char            EntryNode;
    char            Area1PmcAddr;
    char            Area1ExchgAddr;
    char            Area1ExchgSize;
    char            Area2PmcAddr;
    char            Area2ExchgAddr;
    char            Area2ExchgSize;
    char            Area2PmcDoAddr;
    char            Area2ExchgDoSize;
    char            Area2PmcDiAddr;
    char            Area2ConditionAddr;
    char            Area2AlterAddr;
    char            Area2ExchgDiAddr;
    char            Area2ExchgDiSize;
    char            ClientMsgAddr;
    char            ClientMsgSize;
    char            ServerMsgAddr;
    char            ServerMsgSize;
    char            Option1;
    char            Option2;
} IN_FLNTPRMFLG;

typedef struct _in_flntprm {
    char            OwnIpAddress[40];
    char            NodeName[12];
    short           Area1CmnMemAddr;
    short           Area1CmnMemSize;
    short           Area2CmnMemAddr;
    short           Area2CmnMemSize;
    unsigned char   TokenWatch;
    char            MinFrame;
    char            Reserved0[2];
    PMC_REG         OwnStatus;
    PMC_REG         EntryNode;
    PMC_REG         Area1PmcAddr;
    short           Area1ExchgAddr;
    short           Area1ExchgSize;
    PMC_REG         Area2PmcAddr;
    short           Area2ExchgAddr;
    short           Area2ExchgSize;
    PMC_REG         Area2PmcDoAddr;
    short           Area2ExchgDoSize;
    char            Reserved1[2];
    PMC_REG         Area2PmcDiAddr;
    PMC_REG         Area2ConditionAddr;
    PMC_REG         Area2AlterAddr;
    short           Area2ExchgDiAddr;
    short           Area2ExchgDiSize;
    PMC_REG         ClientMsgAddr;
    short           ClientMsgSize;
    char            Reserved2[2];
    PMC_REG         ServerMsgAddr;
    short           ServerMsgSize;
    char            Reserved3[2];
    unsigned short  Option1;
    unsigned short  Option2;
} IN_FLNTPRM;

/* flnt_rdentry  */
/* flnt_rdentry2 */
typedef struct _out_flntentry {
    unsigned char   Node;
    char            Reserved[3];
    unsigned long   EntryNode[8];
} OUT_FLNTENTRY;

/* flnt_rdnodeinfo  */
/* flnt_rdnodeinfo2 */
typedef struct _out_flntnodetbl {
    char            NodeName[12];
    char            VendorName[12];
    char            MakerType[12];
    short           Area1Address;
    short           Area1Size;
    short           Area2Address;
    short           Area2Size;
    unsigned short  Rct;
    unsigned short  Uls;
    unsigned char   TokenWatch;
    unsigned char   MinFrame;
    unsigned char   Lks;
    unsigned char   Status;
} OUT_FLNTNODETBL;

/* flnt_rdnetwork  */
/* flnt_rdnetwork2 */
typedef struct _out_flntnettbl {
    unsigned char   TokenNode;
    unsigned char   MinFrame;
    unsigned short  Rct;
    unsigned short  Rcm;
    unsigned short  MaxRcm;
    unsigned short  MinRcm;
} OUT_FLNTNETTBL;

/* flnt_rdlog */
typedef struct _out_flntlog {
    unsigned long   TotalSend;
    unsigned long   SendErr;
    unsigned long   TotalRecv;
    unsigned long   RecvErr;
    unsigned long   CycErr;
    unsigned long   MsgRetry;
    unsigned long   MsgRetryOver;
    unsigned long   RecvMsgErr;
    unsigned long   AckErr;
    unsigned long   DuplicatedToken;
    unsigned long   DestroyedToken;
    unsigned long   ReissueToken;
    unsigned long   FrameWait;
    unsigned long   Entry;
    unsigned long   OutRing;
    unsigned long   Skip;
    unsigned long   Disconnect;
} OUT_FLNTLOG;

/* flnt_rdlog2 */
typedef struct _out_flntlog2 {
    unsigned long   TotalSend;
    unsigned long   SendErr;
    unsigned long   TotalRecv;
    unsigned long   RecvErr;
    unsigned long   CycErr;
    unsigned long   MsgRetry;
    unsigned long   MsgRetryOver;
    unsigned long   RecvMsgErr;
    unsigned long   AckErr;
    unsigned long   DuplicatedToken;
    unsigned long   DestroyedToken;
    unsigned long   ReissueToken;
    unsigned long   FrameWait;
    unsigned long   Entry;
    unsigned long   OutRing;
    unsigned long   Skip;
    unsigned long   Disconnect;
    short           Baudrate;
    char            Reserved[2];
} OUT_FLNTLOG2;

/* flnt_rdmsg  */
/* flnt_rdmsg2 */
typedef struct _out_flnteachmsg {
    unsigned short  MsgId;
    unsigned char   Year;
    unsigned char   Month;
    unsigned char   Day;
    unsigned char   Hour;
    unsigned char   Minute;
    unsigned char   Second;
    char            Text[32];
} OUT_FLNTEACHMSG;

typedef struct _out_flntmsg {
    short           Count;
    char            reserve[14];
    OUT_FLNTEACHMSG msgData[15];
} OUT_FLNTMSG;

/* flnt_rddeviceinfo */
typedef struct _out_flntdevinfo {
    unsigned short      Kind;
    short               dummy;
    unsigned long       FunctionFLnetBoard;
    unsigned long       FunctionFLnetEmb;
    unsigned long       FunctionFLnetCard;
} OUT_FLNTDEVINFO;

/* flnt_rddeviceinfo2 */
typedef struct _out_flntdevinfo2 {
    unsigned short      Kind;
    short               Pad;
    unsigned long       FunctionFLnet;
} OUT_FLNTDEVINFO2;

/* flnt_rdsfstatus */
typedef struct _each_sts{
    unsigned char   StatusFlag;
    unsigned char   ErrDetectNode;
    unsigned char   ErrSendNode;
    char            Reserved[1];
} EACH_STS;

typedef struct _out_flntsfsts{
    EACH_STS        eachSts[2];
    short           AlarmInfo;
    char            Reserved[2];
} OUT_FLNTSFSTS;

/* flnt_rdsferrnode */
typedef struct _each_err{
    unsigned char   ErrFlag;
    unsigned char   ErrNode;
    char            Reserved[2];
} EACH_ERR;

typedef struct _node_err{
    EACH_ERR        eachErr[2];
} NODE_ERR;

typedef struct _out_flntsferrtbl{
    unsigned char   SelfNode;
    char            Reserved[3];
    unsigned long   EntryNode;
    NODE_ERR        nodeErr[30];
} OUT_FLNTSFERRTBL;


/*----------------------------*/
/* NET : CC-Link function     */
/*----------------------------*/

/* cclr_rdparam */
typedef struct _out_cclrprm {
    short           BaudRate;
    short           ID;
    short           UseIDCount;
    short           DataOnAbnormal;
    PMC_REG         Status;
    PMC_REG         RY;
    short           RYSize;
    char            pad1[2];
    PMC_REG         RX;
    short           RXSize;
    char            pad2[2];
    PMC_REG         RWw;
    short           RWwSize;
    char            pad3[2];
    PMC_REG         RWr;
    short           RWrSize;
    char            pad4[2];
} OUT_CCLRPRM;

/* cclr_wrparam */
typedef struct _in_cclrprmflag {
    char            BaudRate;
    char            ID;
    char            UseIDCount;
    char            DataOnAbnormal;
    char            Status;
    char            RY;
    char            RYSize;
    char            RX;
    char            RXSize;
    char            RWw;
    char            RWwSize;
    char            RWr;
    char            RWrSize;
    char            pad[3];
} IN_CCLRPRMFLAG;

typedef struct _in_cclrprm {
    short           BaudRate;
    short           ID;
    short           UseIDCount;
    short           DataOnAbnormal;
    PMC_REG         Status;
    PMC_REG         RY;
    short           RYSize;
    char            pad1[2];
    PMC_REG         RX;
    short           RXSize;
    char            pad2[2];
    PMC_REG         RWw;
    short           RWwSize;
    char            pad3[2];
    PMC_REG         RWr;
    short           RWrSize;
    char            pad4[2];
} IN_CCLRPRM;

/* cclr_rdinfo */
typedef struct _out_cclrinfo {
    unsigned char   LineStatus;
    unsigned char   MachineCode;
    unsigned short  MakerCode;
    unsigned short  errCode;
    char            pad[2];
} OUT_CCLRINFO;


/*----------------------------*/
/* NET : USB function         */
/*----------------------------*/

/* usb_rdinfo */
typedef struct _out_usbinfo {
    short           UsbStatus;
    unsigned short  VendorID;
    unsigned short  ProductID;
    unsigned short  DeviceRelease;
    char            Manufacturer[64];
    char            ProductName[64];
    char            SerialNumber[64];
} OUT_USBINFO;

/* usb_rdlog */
typedef struct _out_usblog1shot {
    short           Type;
    unsigned short  MsgId;
    unsigned char   Year;
    unsigned char   Month;
    unsigned char   Day;
    unsigned char   Hour;
    unsigned char   Minute;
    unsigned char   Second;
    char            reserve[2];
    char            Text[84];
} OUT_USBLOG1SHOT;

typedef struct _out_usblog {
    short           Count;
    char            reserve[14];
    OUT_USBLOG1SHOT logData[15];
} OUT_USBLOG;

/*-----------------------------------*/
/* NET : PROFINET IO Device function */
/*-----------------------------------*/

typedef struct _pnd_addr {
    unsigned short          Path;
    short                   Kind;
    unsigned long           Addr;
    unsigned long           Size;
} PND_ADDR;

typedef struct _pnd_common_param {
    char                    OwnMacAddress[16];
    char                    OwnIpAddress[40];
    char                    SubNetmask[16];
    char                    RouterIpAddress[40];
    char                    DnsServer1IpAddress[40];
    char                    DnsServer2IpAddress[40];
    char                    OwnHostName[32];
    char                    OwnDomain[64];
} PND_COMMON_PARAM;

typedef struct _pnd_ping_param {
    char                    IpAddress[64];
    unsigned short          Count;
    char                    pad[2];
} PND_PING_PARAM;

typedef struct _pnd_setting_param {
    unsigned char           PnDeviceMode;
    unsigned char           DiDataOnAbnormal;
    unsigned char           pad1[2];
    unsigned char           BasicOption1;
    unsigned char           BasicOption2;
    unsigned char           AllocOption1;
    unsigned char           AllocOption2;
    PND_ADDR                DiData;
    PND_ADDR                DoData;
    PND_ADDR                Status;
    char                    DeviceName[244];
} PND_SETTING_PARAM;

typedef struct _pnd_param_flg {
    char                    OwnIpAddress;
    char                    SubNetmask;
    char                    RouterIpAddress;
    char                    DnsServer1IpAddress;
    char                    DnsServer2IpAddress;
    char                    OwnHostName;
    char                    OwnDomain;
    char                    PingIpAddress;
    char                    PingCount;
    char                    PnDeviceMode;
    char                    DiDataOnAbnormal;
    char                    BasicOption1;
    char                    BasicOption2;
    char                    AllocOption1;
    char                    AllocOption2;
    char                    DiData;
    char                    DoData;
    char                    Status;
    char                    DeviceName;
    char                    pad2;
} PND_PARAM_FLG;

typedef struct _pnd_param {
    PND_COMMON_PARAM        Common;
    PND_PING_PARAM          Ping;
    PND_SETTING_PARAM       Setting;
} PND_PARAM;

typedef PND_PARAM           OUT_PND_PARAM;

typedef struct _in_pnd_param {
    PND_PARAM_FLG           flg;
    PND_PARAM               prm;
} IN_PND_PARAM;

typedef struct _out_pnd_mntinfo {
    unsigned char           Status;
    unsigned char           pad[3];
    unsigned short          VendorID;
    unsigned short          DeviceID;
    unsigned short          InputSize;
    unsigned short          OutputSize;
    unsigned short          RcvRead;
    unsigned short          RcvWrite;
    unsigned short          RcvRt;
    unsigned short          RcvRtU;
    unsigned short          RcvPause;
    unsigned short          RcvLldp;
    unsigned short          InputCycleTime;
    unsigned short          OutputCycleTime;
    unsigned short          DoRefreshTime;
    unsigned short          DiRefreshTIme;
} OUT_PND_MNTINFO;

/*---------------------------------------*/
/* NET : PROFINET IO Controller function */
/*---------------------------------------*/

/* pnc_rdparam pnc_wrparam */
typedef struct _pnc_addr {
    unsigned short          Path;
    short                   Kind;
    unsigned long           Addr;
    unsigned long           Size;
} PNC_ADDR;

/* pnc_rdparam */
typedef struct _pnc_common_param {
    char                    OwnMacAddress[16];
    char                    OwnIpAddress[40];
    char                    SubNetmask[16];
    char                    RouterIpAddress[40];
} PNC_COMMON_PARAM;

/* pnc_rdparam pnc_wrparam */
typedef struct _pnc_ping_param {
    char                    IpAddress[64];
    unsigned short          Count;
    char                    pad[2];
} PNC_PING_PARAM;

/* pnc_rdparam */
typedef struct _pnc_setting_param {
    unsigned char           PnControllerMode;
    unsigned char           TotalDeviceNum;
    unsigned char           BasicOption1;
    unsigned char           reserve1;
    PNC_ADDR                DiData;
    PNC_ADDR                DoData;
    PNC_ADDR                Status;
    unsigned char           reserve2[12];
} PNC_SETTING_PARAM;

/* pnc_rdparam */
typedef struct _pnc_param {
    PNC_COMMON_PARAM        Common;
    PNC_PING_PARAM          Ping;
    PNC_SETTING_PARAM       Setting;
} PNC_PARAM;

/* pnc_rdparam */
typedef PNC_PARAM           OUT_PNC_PARAM;

/* pnc_wrparam pnc_rdmntinfo */
typedef struct _pnc_addr_top {
    unsigned short          Path;
    short                   Kind;
    unsigned long           Addr;
} PNC_ADDRTOP;

/* pnc_wrparam */
typedef struct _pnc_common_param_w {
    char                    OwnIpAddress[40];
    char                    SubNetmask[16];
    char                    RouterIpAddress[40];
} PNC_COMMON_PARAM_W;

/* pnc_wrparam */
typedef struct _pnc_setting_param_w {
    unsigned char           PnControllerMode;
    unsigned char           pad;
    unsigned char           BasicOption1;
    unsigned char           reserve1;
    PNC_ADDRTOP             DiAddrTop;
    PNC_ADDRTOP             DoAddrTop;
    PNC_ADDR                Status;
    unsigned char           reserve2[12];
} PNC_SETTING_PARAM_W;

/* pnc_wrparam */
typedef struct _pnc_param_flg {
    char                    OwnIpAddress;
    char                    SubNetmask;
    char                    RouterIpAddress;
    char                    PingIpAddress;
    char                    PingCount;
    char                    PnControllerMode;
    char                    BasicOption1;
    char                    reserve1;
    char                    DiAddrTop;
    char                    DoAddrTop;
    char                    Status;
    char                    reserve2;
} PNC_PARAM_FLG;

/* pnc_wrparam */
typedef struct _pnc_param_w {
    PNC_COMMON_PARAM_W      Common;
    PNC_PING_PARAM          Ping;
    PNC_SETTING_PARAM_W     Setting;
} PNC_PARAM_W;

/* pnc_wrparam */
typedef struct _in_pnc_param {
    PNC_PARAM_FLG           flg;
    PNC_PARAM_W             prm;
} IN_PNC_PARAM;

/* pnc_rdmntinfo */
typedef struct _out_pnc_cntrlr_info {
    unsigned char           Status;
    unsigned char           pad;
    unsigned short          DiDoRefreshTime;
} OUT_PNC_CNTRLR_INFO;

/* pnc_rdmntinfo */
typedef struct _out_pnc_device_info {
    char                    IpAddress[16];
    unsigned char           Status;
    unsigned char           pad[3];
    PNC_ADDRTOP             DiAddrTop;
    PNC_ADDRTOP             DoAddrTop;
    unsigned short          InputSize;
    unsigned short          OutputSize;
    unsigned short          InputCycleTime;
    unsigned short          OutputCycleTime;
    unsigned long           AlarmNum;
    unsigned long           ConnectTime;
} OUT_PNC_DEVICE_INFO;

/* pnc_rdmntinfo */
typedef struct _out_pnc_allcom_stat {
    unsigned char           State[48];
} OUT_PNC_ALLCOM_STAT;

/* pnc_resdetailinfo */
typedef struct _out_pnc_detail_info {
    short                   Result;
    unsigned char           pad[2];
    char                    IpAddress[16];
    char                    Info[360];
} OUT_PNC_DETAIL_INFO;

/*-----------------------------------*/
/* NET : EtherCAT function           */
/*-----------------------------------*/

/* ect_rdlog */
typedef struct _out_ectlog1shot {
    unsigned short          MsgId;
    unsigned char           Year;
    unsigned char           Month;
    unsigned char           Day;
    unsigned char           Hour;
    unsigned char           Minute;
    unsigned char           Second;
    char                    Text[32];
} OUT_ECTLOG1SHOT;

typedef struct _out_ectlog {
    unsigned short          Count;
    unsigned char           reserve[14];
    OUT_ECTLOG1SHOT         logData[15];
} OUT_ECTLOG;

/* ect_rdslvtype */
typedef struct _out_ecttype {
    unsigned char           Kind;
    unsigned char           Slot;
    unsigned short          FunctionEctSlv;
} OUT_ECTTYPE;

/* ect_rdslvdeviceinfo */
typedef struct _out_ectdevinfo {
    char                    EsiVersion[8];
    unsigned long           VendorID;
    unsigned long           ProductCode;
    unsigned long           RevisionNo;
    unsigned short          NodeAddress;
    unsigned char           pad[2];
} OUT_ECTDEVINFO;

/* ect_rdslvdeviceinfo */
typedef struct _out_ectnetinfo {
    unsigned short          Esm;
    unsigned short          Mode;
} OUT_ECTNETINFO;


/*--------------------*/
/* RENISHAW function  */
/*--------------------*/
typedef struct odbrenplt {
    short           delay_time ;
    unsigned short  data_flag ;
    short           pos_data[6] ;
} ODBRENPLT ;

/* cnc_rdproctime:read processing time stamp data */
typedef struct odbptime2 {
    short	num;
    struct{
        char	filename[36];
        short	hour;
        char	min;
        char	sec;
    }data[10];
} ODBPTIME2;

/*--------------------*/
/* schedule function  */
/*--------------------*/
#if !defined _SCDL_1D
#define _SCDL_1D
typedef struct  scdldata {
    short   file_no;
    char    file_name[16];
    short   repeat_num;
    short   current_num;
    char   dummy[2];
} SCDL_1D ;

#endif

/*--------------------------*/
/*   path table function    */
/*--------------------------*/
/*--- cnc_rdptaxitablestatus ---*/
/* Axis-Motion Table */
typedef struct odbptaxistat{
    union{
        struct{
            double  l_value_e ;
            double  pos_value_e ;
            double  l_value ;
            //double  pos_value ;
            double  time ;
            short   ov_time ;
            short   number ;
            short   next_table ;
            short   skip_table ;
            short   skip_signal ;
            short   table_kind ;
            short   master_indx_no ;
        }state1;
        struct{
            double  l_value_e_sub ;
            double  pos_value_e_sub ;
            double  l_value_sub ;
            long    repeat_e_sub ;
            long    repeat_sub ;
            short   number_sub ;
            short   next_table_sub ;
            short   skip_table_sub ;
            short   skip_signal_sub ;
            short   table_kind_sub ;
            short   master_indx_no_sub ;
        }state2;
    }u;
}ODBPTAXISTAT ;

/*--- cnc_rdptsptablestatus ---*/
/* Spindle-Command Table */
typedef struct odbptspstat{
    union{
        struct{
            double  l_value_e ;
            double  pos_value_e ;
            double  l_value ;
            //double  pos_value ;
            double  time ;
            long    srpm ;
            long    sspm ;
            long    smax ;
            short   ov_time ;
            short   number ;
            short   next_table ;
            short   skip_table ;
            short   skip_signal ;
            char    sp_mode ;
        }state1;
        struct{
            double  l_value_e_sub ;
            double  pos_value_e_sub ;
            double  l_value_sub ;
            long    repeat_e_sub ;
            long    repeat_sub ;
            short   number_sub ;
            short   next_table_sub ;
            short   skip_table_sub ;
            short   skip_signal_sub ;
        }state2;
    }u;
}ODBPTSPSTAT ;

/*--- cnc_rdptaxfunctablestatus ---*/
/* Auxiliary-Function Table */
typedef struct odbptaxfuncstat{
    union{
        struct{
            double  l_value_e ;
            double  l_value ;
            double  time ;
            long    m_code[3] ;
            short   ov_time ;
            short   number ;
            short   next_table ;
            short   skip_table ;
            short   skip_signal ;
            short   table_kind ;
            short   master_indx_no ;
            short   m_count ;
        }state1;
        struct{
            double  l_value_e_sub ;
            double  l_value_sub ;
            long    repeat_e_sub ;
            long    repeat_sub ;
            short   number_sub ;
            short   next_table_sub ;
            short   skip_table_sub ;
            short   skip_signal_sub ;
            short   table_kind_sub ;
            short   master_indx_no_sub ;
        }state2;
    }u;
}ODBPTAXFUNCSTAT ;

/*--- cnc_rdptcomment ---*/
typedef struct odbptcomment {
    long    t_code ;
    char    comment_count ;
    char    pto_mode ;
    char    dummy1[2] ;
    char    comment[10][32] ;
}ODBPTCOMMENT ;

/*--- cnc_rdpthis_gb ---*/
typedef struct odbpthis_gb {
    struct {
        short   year;
        char    mon;
        char    day;
        char    hour;
        char    min;
        char    sec;
    } date;
    char    reserve1;
    long    info1;
    char    path_num;
    char    reserve2[3];
} ODBPTHIS_GB ;

/*--- cnc_rdpthis_pt ---*/
typedef struct odbpthis_pt {
    double  time;
    short   dist_err;
    short   ov_time;
    long    info1 ;
    short   alarm_no ;
    char    alarm_type ;
    char    alarm_axis ;
    char    path_axis_num ;
    char    path_spdl_num ;
    char    time_frac ;
    char    reserve1;
} ODBPTHIS_PT ;

/*--- cnc_rdpthis_ax ---*/
typedef struct odbpthis_ax {
    double  l_value ;
    double  l_value_e ;
    double  pos_value ;
    double  pos_value_e ;
    double  l_value_sub ;
    double  l_value_e_sub ;
    double  l_value_cycle ;
    double  l_value_e_cycle ;
    long    repeat_sub ;
    long    repeat_e_sub ;
    long    info1 ;
    short   number ;
    short   number_sub ;
    short   number_cycle ;
    short   table_kind ;
    char    name[4] ;
    char    cs_spdl_idx_pt ;
    char    cs_spdl_idx_rel ;
    char    master_indx_no_pt ;
    char    master_indx_no_rel ;
    char    pos_frac ;
    char    l_frac ;
    char    l_frac_cycle ;
    char    reserve1;
} ODBPTHIS_AX ;

/*--- cnc_rdpthis_sp ---*/
typedef struct odbpthis_sp {
    double  l_value ;
    double  l_value_e ;
    double  pos_value ;
    double  pos_value_e ;
    double  l_value_sub ;
    double  l_value_e_sub ;
    long    repeat_sub ;
    long    repeat_e_sub ;
    long    srpm ;
    long    rrpm ;
    long    sspm ;
    long    smax ;
    long    info1 ;
    short   number ;
    short   number_sub ;
    short   table_kind ;
    char    sp_mode ;
    char    name[4] ;
    char    ov_sp;
    char    reserve1;
    char    cs_axis_idx_pt ;
    char    cs_axis_idx_rel ;
    char    pos_frac ;
    char    l_frac ;
    char    reserve2[3];
} ODBPTHIS_SP ;

/*--- cnc_rdpthis_aux ---*/
typedef struct odbpthis_aux {
    double  l_value ;
    double  l_value_e ;
    double  l_value_sub ;
    double  l_value_e_sub ;
    long    repeat_sub ;
    long    repeat_e_sub ;
    long    m_code[3] ;
    long    info1 ;
    short   number ;
    short   number_sub ;
    short   table_kind ;
    char    m_count ;
    char    master_indx_no_pt ;
    char    master_indx_no_rel ;
    char    l_frac ;
    char    reserve1[6];
} ODBPTHIS_AUX ;

/*--- cnc_rdpthis_log ---*/
typedef struct odbpthis_log {
    char    issub;
    char    kind;
    short   number;
} ODBPTHIS_LOG ;

/*--- cnc_rdptcnvinfo2 ---*/
typedef struct odbptcnvinfo2{
    short	executing[2][10] ;
    long	conv_status[2][10] ;
    short	ofs_change[2][10] ;
}ODBPTCNVINFO2 ;

typedef struct odbaxsts_bg {
    long   flag;
} ODBAXSTS_BG;

/*--- cnc_rdpalaxis ---*/
/* Parallel axis control */
typedef struct iodbpalax{
    long   max_pal ;
    long   data[MAX_AXIS] ;
}IODBPALAX ;

/*--- cnc_hdck_nochange_info ---*/
/*    handle retrace message    */
typedef struct odbahdck {
    short	dat_path ;
    struct {
        short	stat ;
        short	data ;
    } info[MAX_CNCPATH];
} ODBAHDCK;

/*--- cnc_rstrt_rdpntlist ---*/
/* restart point list  */
typedef struct odbrstlist {
    char  prg_name[246];
    char  dummy[2];
    long  seq_no;
    long  c_blck_cnt;
} ODBRSTLIST ;

typedef struct odbrstlist2 {
    char  prg_name[246];
    char  status;
    char  dummy;
    long  seq_no;
    long  wait_m_code;
    long  c_blck_cnt;
    char  time_s;
    char  time_m;
    char  time_h;
    char  time_d;
    long  id_no;
    long  reserve[3];
} ODBRSTLIST2 ;

/*--- cnc_rstrt_rdpnt ---*/
/* restart point info  */
typedef struct iodbrstinfo {
    long  seq_no;
    long  c_blck_cnt;
    long  t_blck_cnt;
    long  call_from_no;
    long  call_from_blck;
    short prg_rep;
    short seq_rep;
    short c_blck_rep;
    short nest_lv;
    char  prg_name[246];
    char  dummy1[2];
    char  call_from_prg[246];
    char  dummy2[2];
    char  edit_flag;
    char  reserve;
    short repeat;
    long  wait_m_code;
} IODBRSTINFO ;

/*--- cnc_rstrt_rdpnt2 ---*/
/* restart point info  */
typedef struct iodbrstinfo2 {
    long  seq_no;
    long  c_blck_cnt;
    long  t_blck_cnt;
    long  call_from_no;
    long  call_from_blck;
    short prg_rep;
    short seq_rep;
    short c_blck_rep;
    short nest_lv;
    char  prg_name[246];
    char  dummy1[2];
    char  call_from_prg[246];
    char  dummy2[2];
    char  edit_flag;
    char  reserve;
    short repeat;
    long  wait_m_code;
    char  time_s;
    char  time_m;
    char  time_h;
    char  time_d;
    long  id_no;
    long  reserve2[3];
} IODBRSTINFO2 ;

/*---------------------*/
/* spindle unit offset */
/*---------------------*/
typedef struct iodbsuofs {
    long		vect_val;	/* vector element */
    long		frc_dgt;   	/* fraction digit */
} ODBSUOVECT ;

typedef struct odbsuodata {
     char  data_name[4]; /* axis name   */
     long  prm_val;      /* parameter value */
     long  frc_dgt;      /* fraction digit */
} ODBSUODATA ;
/*----------------------------*/
/*  Memory card access        */
/*----------------------------*/
/*--- cnc_rdmcdfinfo -------------*/
typedef struct odbfilestatus {
    unsigned long  size;
    unsigned char  min;
    unsigned char  hour;
    unsigned char  day;
    unsigned char  month;
    unsigned short year;
    unsigned char  reserve[2] ;
    char           filename[20];
}ODBFILESTATUS;

/*--- cnc_rdmcdprgcmnt -----------*/
typedef struct odbproginfo {
    char comment[52];
    char o_time[12];
} ODBPROGINFO ;

/* cnc_tpnl_read:read touch panel status & point */
typedef struct odbtpnlinf{
    unsigned char	status ;
    unsigned char	dummy[3]   ;
    short	        coord_x ;
    short	        coord_y ;
}ODBTPNLINTF;

/*--- cnc_rdpmcaxisinfo ---*/
/*    handle retrace message    */
typedef struct odbpmcaxisinfo {
    unsigned char	datastatus;		/* active / nonactive */
    unsigned char	axisstatus;		/* axis status */
    unsigned char	commandsignal;	/* command signal */
    unsigned char	statussignal;	/* status signal */
    unsigned char	dummy;			/* boundary alignment */
    unsigned char	instruction;	/* instruction number */
    unsigned short	speedsignal;	/* speed signal */
    unsigned long	axisctrldata;	/* data signal */
    unsigned short	subinstnum;		/* subinstruction number */
    unsigned short	subinstlength;	/* data length of subinstruction */
    unsigned long	subinstdata1;	/* subinstruction data 1 */
    unsigned long	subinstdata2;	/* subinstruction data 2 */
    unsigned long	subinstdata3;	/* subinstruction data 3 */
    unsigned long	subinstdata4;	/* subinstruction data 4 */
    unsigned long	subinstdata5;	/* subinstruction data 5 */
    unsigned long	subinstdata6;	/* subinstruction data 6 */
    unsigned long	subinstdata7;	/* subinstruction data 7 */
} ODBPMCAXISINFO;

/*--- cnc_mdd_rdinfo ---*/
/* Modification detection information */
typedef struct odbmddinfo {
    short           status;         /* Modification detection status */
    short           prot;           /* Data protection status */
    short           year;           /* Registered year */
    short           month;          /*            month */
    short           day;            /*            day */
    short           hour;           /*            hour */
    short           min;            /*            minute */
    short           sec;            /*            second */
    unsigned long   reg_code;       /* Check code - registered */
    unsigned long   cur_code;       /* Check code - current */
    short           modulate;       /* C-EXE code modulation status */
} ODBMDDINFO ;

/* Modification detection exception parameter */
typedef struct iodbmddexceptinfo {
    long           sno;            /* Start Parameter Number */
    long           eno;            /* End Parameter Number   */
} IODBMDDEXCEPTPRM ;

/*----------------------------*/
/*  USB Memory access         */
/*----------------------------*/
/*--- cnc_rdusbdevinfo ---*/
/* USB Memory size information */
typedef struct odbusbsize {
    unsigned long    totalsize_h;      /* total size (high) */
    unsigned long    totalsize_l;      /* total size (low)  */
    unsigned long    freesize_h;       /* free size (high)  */
    unsigned long    freesize_l;       /* free size (low)   */
} ODBUSBSIZE;

/*--- cnc_rdusbfilelist ---*/
/* input data */
typedef struct idbusbfile {
    char             path[256];  /* base path              */
    unsigned long    offset;     /* offset                 */
    short            req_num;    /* number of demand files */
    unsigned short   req_attrib; /* attribute              */
    char             sort;       /* sort flag              */
    char             req_comment;/* comment flag           */
    char			 req_total;	 /* file count flag		   */
    char			 dummy;
} IDBUSBFILE;
/* output data */
typedef struct odbusbinfo {
    short           f_num;      /* number of files actually acquired */
    char            next_entry; /* next file entry                   */
    char            dummy;
    unsigned long   total;      /* number of total files             */
} ODBUSBINFO;
/* file information */
typedef struct odbusbfile {
    /* output */
    unsigned long   size;       /* size        */
    unsigned short  attribute;  /* attribute   */
    unsigned short  long_name;  /* information */
    unsigned short  year;       /* time stamp  */
    unsigned char   mon;        /* time stamp  */
    unsigned char   day;        /* time stamp  */
    unsigned char   hour;       /* time stamp  */
    unsigned char   min;        /* time stamp  */
    unsigned char   sec;        /* time stamp  */
    unsigned char   dummy;
    char            fname[36];   /* file name   */
    char            comment[64];/* comment     */
} ODBUSBFILE;
/*--- cnc_searchusbfile ---*/
/* input data */
typedef struct idbusbsearch {
    char             path[256];  /* base path              */
    char             s_fname[36];/* search file/folder name */
    unsigned short   req_attrib; /* attribute              */
    char             sort;       /* sort flag              */
    char             dummy;
} IDBUSBSEARCH;


/*------------------------*/
/* Robot Connect Function */
/*------------------------*/
typedef struct odbrbsignal{
    char type;
    char state;
    unsigned short no;
    char name[76];
}ODBRBSIGNAL;

typedef struct iodbrbsignal2{
    char type;
    char state;
    unsigned short no;
    char name[73];
    char reserve[3];
}IODBRBSIGNAL2;

typedef struct iodbrbalmmsg{
    char msg[152];
}IODBRBALMMSG;

typedef struct odbrbgrplist{
    char select;
    unsigned char robot_program;
    char nc_program_folder[213];
    char nc_program_name[33];
    char comment[52];
}ODBRBGRPLIST;

typedef struct idbrbgroup{
    unsigned char robot_program;
    char nc_program_folder[213];
    char nc_program_name[33];
}IDBRBGROUP;

typedef struct idbrbsignal{
    char name[76];
}IDBRBSIGNAL;

typedef struct iodbrbtopsig{
    char unit_type;
    char adr_type;
    unsigned short address;
}IODBRBTOPSIG;

typedef struct iodbrbpowersig{
    char unit_type;
    char adr_type;
    unsigned short address;
    char bit;
    char reserve[3];
}IODBRBPOWERSIG;

typedef struct iodbrbcomset{
    IODBRBTOPSIG di_top;
    IODBRBTOPSIG do_top;
    IODBRBPOWERSIG power_on;
    unsigned short di_offset;
    unsigned short do_offset;
    unsigned char property;
    char reserve[3];
}IODBRBCOMSET;

typedef struct iodbrbsummary{
    char signal_type;
    char reserve;
    unsigned short no;
}IODBRBSUMMARY;

/*--- cnc_rdindexprm -------------------*/
/*--- cnc_wrindexprm -------------------*/
typedef struct iodbindexprm {
    long            ofs_limit;
    long            detect_width;
    unsigned short  jog_clamp[3];
    char            matrix_single;
    unsigned char   torque_ovr;
    char            ofs_adjust;
    char            dummy[3];
} IODBINDEXPRM;
/*--- cnc_rdindexdata ------------------*/
/*--- cnc_wrindexdata ------------------*/
typedef struct iodbindexdat{
    long            pos;
    long            inp_width;
    unsigned short  speed;
    char            f_flg;
    char            dummy;
}IODBINDEXDAT;
/*--- cnc_rdindexofs -------------------*/
/*--- cnc_wrindexofs -------------------*/
/* nothing */
/*--- cnc_rdindexposdata ---------------*/
/*--- cnc_wrindexposdata ---------------*/
typedef struct indexposdat{
    long            min_value;
    long            max_value;
    char            setting;
    char            dummy[3];
} IODBINDEXPOSDAT;
/*--- cnc_rdindexinfo ---------------*/
typedef struct odbindexinfo{
    unsigned short  mode;
    short           nc_ax;
    short           inpos_point;
    short           ofs_edit_signal;
} ODBINDEXINFO;

/*------------------------*/
/* Chopping Function      */
/*------------------------*/
typedef struct realnum{
    long val;
    long dec;
}REALNUM;

typedef struct odbchopping{
    REALNUM cur_pos;
    REALNUM cur_speed;
    REALNUM real_udp;
    REALNUM real_ldp;
    unsigned long stroke_cnt;
}ODBCHOPPING;

/*---------------------------------------*/
/* Tilted Working Plane Command          */
/*---------------------------------------*/
typedef struct _odbcoord{
    long    orign[3] ;
    short   vec_x[3] ;
    short   vec_y[3] ;
    short   vec_z[3] ;
} ODBCOORD ;

typedef struct idbtwp_euler_fmt{
    double orign[3];
    double i;
    double j;
    double k;
    long   reserve[24];
} IDBTWP_EULER_FMT;

typedef struct idbtwp_rpy_fmt{
    double orign[3];
    double i;
    double j;
    double k;
    short  turn ;
    short  reserve0 ;
    long   reserve[23];
} IDBTWP_RPY_FMT;

typedef struct idbtwp_3p_fmt{
    double p1[3];
    double p2[3];
    double p3[3];
    double sft[3];
    double rot;
    long   reserve[10];
} IDBTWP_3P_FMT;

typedef struct idbtwp_2vct_fmt{
    double orign[3];
    double vtr1[3];
    double vtr2[3];
    long   reserve[18];
} IDBTWP_2VCT_FMT;

typedef struct idbtwp_pjct_fmt{
    double orign[3];
    double i;
    double j;
    double k;
    long   reserve[24];
} IDBTWP_PJCT_FMT;

typedef union idbviewgrp{
    IDBTWP_EULER_FMT euler;
    IDBTWP_RPY_FMT   rpy;
    IDBTWP_3P_FMT    p3;
    IDBTWP_2VCT_FMT  vct2;
    IDBTWP_PJCT_FMT  pjct;
} IDBTWPFORM;

typedef struct odbftrmtx{
    double orgn[3];
    double rot[3][3];
} ODBFTRMTX;

/*---------------------------------------*/
/* Machining Condition Setting           */
/*---------------------------------------*/
typedef struct _odbmcshead {
    char    layout     ;
    char    string1[51];
    char    string2[51];
} ODBMCSHEAD ;

/*----------------------------*/
/* Safety I/O signal history  */
/*----------------------------*/
typedef struct odbsfsgalm{
    short   alm_type ;
    short   alm_no ;
} ODBSFSGALM ;

typedef struct odbsfsgalmtime{
    short   year ;
    short   month ;
    short   date ;
    short   hour ;
    short   minute ;
    short   second ;
} ODBSFSGALMTIME ;

typedef struct odbsfsgloginf {
    short           signal_num;
    short           sig_his_period;

    short           sig_his_count;
    short           sig_his_after;

    short           alm_detect_time[3];
    short           dummy;
    ODBSFSGALM      sfsg_alm;
    ODBSFSGALMTIME  sfsg_alm_time;
} ODBSFSGLOGINF ;

typedef struct iodbsfsgsiginf{
    long     unittype;
    long     number;
    short    adr_type;
    short    bit;
} IODBSFSGSIGINF ;

typedef struct odbsfsgsiginfex{
    IODBSFSGSIGINF  sfsg_siginf;
    short           select;
    short           reserve;
} ODBSFSGSIGINFEX ;

typedef struct iodbsfsgsighis {
    short   sno_sig ;
    short   len_sig ;
    short   sno_sig_his ;
    short   len_sig_his ;
    short   extract ;
} IODBSFSGSIGHIS ;

typedef struct odbsfsgsignalnum {
    short   signal_num_default;
    short   signal_num_extract;
} ODBSFSGSIGNALNUM ;

typedef struct iodbsfsgdspstat {
    short   extract;
    short   symbol;
    short   extend;
} IODBSFSGDSPSTAT ;

/* cnc_rd1punchtl_ex  :read punchpress tool data  */
/* cnc_wrldsplc_ex    :write punchpress tool data */
typedef struct iodbpunch1_ex {
    unsigned short  number ;
    unsigned short  attr ;
    union {
        unsigned short  u2data ;
        short           s2data ;
        unsigned long   u4data ;
        long            s4data ;
        unsigned long   u8data[2] ;
    } u ;
    short   decimal ;
    short   reserve ;
} IODBPUNCH1_EX;

/* cnc_rd2punchtl_ex  :read punchpress tool data  */
typedef struct iodbpunch2_ex {
    unsigned long   number ;
    unsigned short  attr ;
    union {
        unsigned short  u2data ;
        short           s2data ;
        unsigned long   u4data ;
        long            s4data ;
        unsigned long   u8data[2] ;
    } u ;
    short   decimal ;
    short   reserve ;
} IODBPUNCH2_EX;

/*---------------------------------------*/
/* Main Menu      */
/*---------------------------------------*/
typedef struct odbmmscrninf {
    unsigned long scrn_id;
}ODBMMSCRNINF;

typedef struct iodbmmiconcstmstring {
    ODBMMSCRNINF    scrninf;
    char            string[13];
    char            reserve[3];
}IODBMMICONCSTMSTRING;

typedef struct iodbmmctgrycstmstring {
    char            string[13];
    char            reserve[3];
}IODBMMCTGRYCSTMSTRING;

typedef struct iodbmmmcscrndefdat{
    ODBMMSCRNINF  scrninf;
    long          icn_id;
    long          msg_id;
}IODBMMMCSCRNDEFDAT;

typedef struct iodbmmmcctgrydefdat{
    long          cmsg_id;
}IODBMMMCCTGRYDEFDAT;

/*-----------------------------*/
/*            LASER            */
/*-----------------------------*/
/*------ cnc_rdpscdedge2 ------*/
/*------ cnc_wrpscdedge2 ------*/
typedef struct iodbedge2 {
    short    slct;
    short    power;
    short    freq;
    short    duty;
    short    g_press;
    short    g_kind;
    long     pier_t;
    long     angle;
    long     gap;
    long     r_len;
    long     r_feed;
    short    r_freq;
    short    r_duty;
    char     gap_axis;
    char     angle_dec;
    char     gap_dec;
    char     r_len_dec;
    char     r_feed_dec;
    char     reserve;
    short    pb_power ;
    short    reserves[2];
} IODBEDGE2 ;

/*------ cnc_rdlpscdpwrctl ------*/
/*------ cnc_wrlpscdpwrctl ------*/
typedef struct iodbpwrctl {
    short    slct;
    short    power_min;
    short    pwr_sp_zr;
    short    freq_min;
    short    freq_sp_zr;
    short    duty_min;
    short    duty_sp_zr;
    char     feed_r_dec;
    char     reserve;
    long     feed_r;
    short    ag_press_min ;
    short    ag_press_sp_zr ;
    short    pb_power_min ;
    short    pb_pwr_sp_zr ;
    short    reserves[2] ;
} IODBPWRCTL ;

/*------ cnc_rdldsplc2 ------*/
/*------ cnc_wrldsplc2 ------*/
typedef struct iodbdsplc {
    short   slct;
    long    dsplc;
    short   dsplc_dec;
    char    reserve;
    short   reserves[4];
} IODBDSPLC ;

/* cnc_rdlhsstate : read laser high speed state data */
typedef struct odblstate {
    long    cmd_feed;
    long    act_feed;
    short   cmd_power;
    short   cmd_freq;
    short   cmd_duty;
    char    beam;
    char    beam_lock;
    char    cw_mode;
    char    pulse_mode;
    char    cmd_feed_dec;
    char    act_feed_dec;
    char    reserve[8];
} ODBLSTATE ;

/* cnc_rdlpoweroffset : read laser power offset data */
typedef struct odblpwofs {
    short   pwrofs_set;
    short   pwrofs_coef;
    short   pwrofs_upper;
    short   pwrofs_max;
    short   pwrofs_min;
    short   pwrinofs_coef;
    char    reserve[8];
} ODBLPWOFS ;

/* cnc_wrlswork : white laser work data */
typedef struct idblswork {
    short   slct ;
    short   skeyinf ;
    short   reserve[14] ;
} IDBLSWORK ;

typedef struct odblalmhis {
    unsigned short  s_no;
    unsigned short  e_no;
    struct {
        short   lalm_wrg ;
        short   alm_grp;
        short   alm_wrg_no ;
        short   year ;
        short   month ;
        short   day ;
        short   hour ;
        short   minute ;
        short   second ;
        short   len_msg ;
        char    alm_msg[64] ;
        short   reserve[4] ;
    }alm_his[50] ;
} ODBLALMHIS;

/*--------------------------------*/
/*   PDSA Pulse Input Diag Data   */
/*--------------------------------*/
typedef struct odbplsdata {
    short	pulse_type;		/* Pulse Type */
    short	channel_state;	/* Channel Connect State */
    short	reserve1;		/* reserve */
    short	reserve2;		/* reserve */
    short	alarm[4];		/* Alarm Detail(CH1乣4) */
    short	cmd_val[4];		/* Command Value(CH1乣4) */
    short	reserve3[4];		/* reserve */
    long	total_val[4];	/* Total Value(CH1乣4) */
    long	reserve4[4];	/* reserve */
} ODBPLSDATA;

/* cnc_rduvactpt2 : uv macro pointer */
typedef struct odbuvmcrpt2 {
    char    prog_name[248] ;
    long    blk_no ;
    long    uvblk_no ;
    long    mult_piece_no ;
    short   reserve[2] ;
} ODBUVMCRPT2 ;

typedef struct odbhmprogstat {
    short   run;
    short   disp;
    short   alm_no;
    short   reserve;
    long    prog_no;
    long    block_no;
} ODBHMPROGSTAT ;

/*-----------------------------------*/
/*  Teach Program Input/Output Data  */
/*-----------------------------------*/
typedef struct odbtpaprg {
    /* output */
    short       format_version;		/* Data format version */
    short       func_version;		/* Function set version */
    long        size;				/* Memory usage */
    struct {						/* Creation date */
        short       year;
        short       mon;
        short       day;
        short       hour;
        short       min;
        short       sec;
    } create ;
    struct {						/* Edit date */
        short       year;
        short       mon;
        short       day;
        short       hour;
        short       min;
        short       sec;
    } edit ;
    struct {						/* Conversion date */
        short       year;
        short       mon;
        short       day;
        short       hour;
        short       min;
        short       sec;
    } convert ;
    unsigned long attr;				/* Program attribute */
    char        name_copy[36];		/* Name of copy original */

    char        prg_name[36];		/* Program name */
    char        comment[20];		/* Comment text of program */
    unsigned long axis;				/* Control axis bit (in path) */
    char        out_nc_prg[36];		/* Output NC program name */
    long        reserve[2];
} ODBTPAPRG ;

typedef struct idbtpinfo {
    char			prg_name[36];	/* Program name */
    char			comment[20];	/* Comment text of program */
    unsigned long	axis;			/* Control axis bit (in path) */
    char			out_nc_prg[36];	/* Output NC program name */
    long			reserve[2];
} IDBTPINFO ;

typedef struct tprogeditcmd {
    char cmd_num ;					/* Count of cmd[] */
    char cmd[31] ;					/* Array of available commands */
    char word_num ;					/* Count of word[] */
    char word[31] ;					/* Array of available words */
} ODBTPEDTCMD;

typedef struct tprogcmd {
    long cmd_id ;					/* Kind of edit operation */
                                    /* Arguments */
    long    integer[4];					/* integer */
    struct {							/* real */
       long val;
       long dec;
    } val[4];
    char    text[64];					/* text */
} IDBTPCMD;

/*----------------------------*/
/* Machining simulation       */
/*----------------------------*/
#ifndef CNC_PPC
/* anm_rdsimuelm : move element data */
typedef struct iodbsimuelm {
    char    type;
    char    rot_w;
    char    type2;
    char    plane;
    long    tcode;
    union {
        struct {
            long    mv_p[8];
        } rapid;
        struct {
            long    mv_p[8];
        } line;
        struct {
            long    mv_p[8];
            long    cnt_p[4];
        } arc;
        struct {
            long    mv_p[8];
            long    ptch;
        } thrd1;
        struct {
            long    mv_p[8];
            long    ptch;
            long    mv_p2[2];
        } thrd2;
        struct {
            long    mv_p[16];
        } dummy_d;
    } data;
    char    dm_type;
    char    cssc_md;
    long    dm_x[3];
    long    dm_y[3];
    long    dm_z[3];
    long    cnt_x[3];
    long    cord[6];
    char    tlchng;
    char    fd_type;
    long    mcode;
    short   dummy4;
    long    cylndr;
    long    aux;
    long    dcode;
    long    smax;
    long    dwell;
    long    fcode;
    long    scode;
    char    nummcd;
    char    fcddec;
    long    shift;
    char    fbsft;
    char    tilt;
} IODBSIMUELM;

/* anm_rdsimuelm2 : move element data with multi M code */
typedef struct iodbsimuelm2 {
    char    type;
    char    rot_w;
    char    type2;
    char    plane;
    long    tcode;
    union {
        struct {
            long    mv_p[8];
        } rapid;
        struct {
            long    mv_p[8];
        } line;
        struct {
            long    mv_p[8];
            long    cnt_p[4];
        } arc;
        struct {
            long    mv_p[8];
            long    ptch;
        } thrd1;
        struct {
            long    mv_p[8];
            long    ptch;
            long    mv_p2[2];
        } thrd2;
        struct {
            long    mv_p[16];
        } dummy_d;
    } data;
    char    dm_type;
    char    cssc_md;
    long    dm_x[3];
    long    dm_y[3];
    long    dm_z[3];
    long    cnt_x[3];
    long    cord[6];
    char    tlchng;
    char    fd_type;
    long    mcode;
    short   dummy4;
    long    cylndr;
    long    aux;
    long    dcode;
    long    smax;
    long    dwell;
    long    fcode;
    long    scode;
    char    nummcd;
    char    fcddec;
    long    shift;
    char    fbsft;
    char    tilt;
    short   dummy6;
    long    mcode2;
    long    mcode3;
    long    mcode4;
    long    mcode5;
    long    reserve[10];
} IODBSIMUELM2;
#endif

/*--- cnc_rdsvgtungstat ---*/
typedef struct obdtunstat {
    short    status[MAX_AXIS] ;
}ODBTUNSTAT ;
/*------------------------*/
/* Reducing Cycle Time    */
/*------------------------*/

typedef struct iodbrct_item {
    unsigned short  item_num;
    unsigned char   type ;
             char   axsp_num ;
             char   ptn_num ;
    unsigned char   dummy ;
    unsigned short  attr ;

    struct data_info {
        char    enable ;
        char dummy2[7] ;
        union {
            char    bdata ;
            char    cdata ;
            short   idata ;
            long    ldata ;
            REALPRM rdata ;
            char    bdatas[MAX_AXIS] ;
            char    cdatas[MAX_AXIS] ;
            short   idatas[MAX_AXIS] ;
            long    ldatas[MAX_AXIS] ;
            REALPRM rdatas[MAX_AXIS] ;
        } uParam ;
    } ptn[6] ;
} IODBRCT_ITEM;

typedef struct iodbrct_cstmname {
    unsigned short  grp_num;       			/* grp number    */
    unsigned short  dummy;              	/* dummy         */
              char  grp_name[16];       	/* group name    */
              char  ptn_name[3][16];    	/* pattern name  */
} IODBRCT_CSTMNAME;

typedef struct iodbrct_grpptn {
    unsigned short  grp_num;                /* grp number    */
    unsigned short  ptn_num;                /* dummy         */
} IODBRCT_GRPPTN ;

typedef struct odbpressure {
    long    cmd_val;
    long    feedbak_val;
} ODBPRESSURE;

typedef struct odbexpos {
    double  data;
    long    dec;
    long    digit;
} ODBEXPOS ;

/*------------------------------*/
/* Scroll Waiting Mcode Setting */
/*------------------------------*/
typedef struct iodbwaitmcode {
    long	mcode;                /* scroll wait mcode   */
    long	pathnum;              /* path num            */
} IODBWAITMCODE ;


// 连接机床
typedef short (*cnc_allclibhndl3)( const char *, unsigned short, long, unsigned short * );

// 读取绝对位置
typedef short (*cnc_absolute)( unsigned short, short, short, ODBAXIS * ) ;

// 读取机械位置
typedef short (*cnc_machine)( unsigned short, short, short, ODBAXIS * ) ;

// 读取相对位置
typedef short (*cnc_relative)( unsigned short, short, short, ODBAXIS * ) ;

/* cnc_actf:read actual axis feedrate(F) */
/* cnc_acts:read actual spindle speed(S) */
typedef short (*cnc_actf)( unsigned short, ODBACT * ) ;
typedef short (*cnc_acts)( unsigned short, ODBACT * ) ;

/* read CNC system path information */
typedef short (*cnc_sysinfo_ex)( unsigned short, ODBSYSEX * ) ;

/* read servo load meter */
typedef short (*cnc_rdsvmeter)( unsigned short, short *, ODBSVLOAD * );

/* read spindle load meter
 * 0 : spindle load meter data
 * 1 : spindle motor speed data
 */
typedef short (*cnc_rdspmeter)( unsigned short, short, short *, ODBSPLOAD * );

/* read load information of serial spindle */
typedef short (*cnc_rdspload)( unsigned short, short, ODBSPN * ) ;

/* read program information */
typedef short (*cnc_rdproginfo)( unsigned short, short, short, ODBNC * ) ;

/* read the actual current for each axis */
#if !defined (PMD)
typedef short (*cnc_rdcurrent)( unsigned short, short * ) ;
#else
typedef short (*cnc_rdcurrent)( unsigned short, long * ) ;
#endif

/* read alarm status */
typedef short (*cnc_alarm)( unsigned short, ODBALM * ) ;
/* read alarm message */
typedef short (*cnc_rdalmmsg2)( unsigned short, short, short *, ODBALMMSG2 * ) ;
/* 释放连接句柄 */
typedef short (*cnc_freelibhndl)(unsigned short FlibHndl);

#endif // FW_HEADER_H
